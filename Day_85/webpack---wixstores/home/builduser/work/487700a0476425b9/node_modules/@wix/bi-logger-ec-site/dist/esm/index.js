import {
    __assign,
    __rest
} from "tslib";
/* tslint:disable */
/* eslint:disable */
/**
 * @typedef {string} Url
 */
/**
 * @typedef {string} GUID
 */
/**
 * @typedef {number} DateTime
 */
var dummy;
var defaultConfig = {
    endpoint: 'ec-site'
};
var init = function(webOrMobileLogger) {
    return function(userConfig) {
        if (userConfig === void 0) {
            userConfig = {};
        }
        var defaults = userConfig.defaults,
            restOfConfig = __rest(userConfig, ["defaults"]);
        var config = __assign(__assign({}, defaultConfig), restOfConfig);
        var factoryInstance = typeof webOrMobileLogger.factory === 'function' ? webOrMobileLogger.factory(config) : webOrMobileLogger;
        var logger = getLogger(factoryInstance);
        return defaults ? logger.util.updateDefaults(defaults) : logger;
    };
};
export var initCustomLogger = function(factoryInstance) {
    return getLogger(factoryInstance);
};
var getLogger = function(biLoggerClientFactoryInstance) {
    return new Logger(biLoggerClientFactoryInstance);
};
var Logger = /** @class */ (function() {
    function Logger(biLoggerClientFactoryInstance) {
        var _this = this;
        this.biLoggerClientFactoryInstance = biLoggerClientFactoryInstance;
        this.util = {
            updateDefaults: function(defaults) {
                _this.biLoggerClientFactoryInstance.updateDefaults(defaults);
                return _this;
            },
            log: function(logParams, context) {
                return _this.bi.log(logParams, context);
            }
        };
        biLoggerClientFactoryInstance
            .updateDefaults({
                src: 130
            });
        this.bi = biLoggerClientFactoryInstance.logger({
            endpoint: 'ec-site'
        });
    };
    /**
     * @typedef {Object} checkoutMinimumOrderClickOnGotItInErrorModalInCheckoutParams
     * @property {string} appName - app_name
     * @property {GUID} cartId - null
     * @property {string} catalogAppId - A list of verticals which are in this order separated by “ ,“:(stores app id, bookings app_id, ...) .
     * @property {GUID} checkoutId - only in EP
     * @property {string} currency - the currency that was shown in the message
     * @property {number} diffLong - The diff between the relevant order value and the minimum order threshold  multiplied by 100,000
     * @property {string} itemType - List of distinct checkout.lineItems.itemType
     * @property {number} minimumValueLong - the minimum order threshold multiplied by 100,000
     * @property {string} stage - the stage in the checkout the visitor was at when the modal was opened
     **/
    /**
     * Name: Checkout -> Minimum order - click on ‘got it’ in error modal in checkout. Evid: 655.
     * Event description: Minimum order - click on ‘got it’ in error modal in checkout.
    
     * appName - Type: string. Desc: app_name
     *
     * cartId - Type: guid.
     *
     * catalogAppId - Type: string. Desc: A list of verticals which are in this order separated by “ ,“:(stores app id, bookings app_id, ...) .
     *
     * checkoutId - Type: guid. Desc: only in EP
     *
     * currency - Type: string. Desc: the currency that was shown in the message
     *
     * diffLong - Type: numeric. Desc: The diff between the relevant order value and the minimum order threshold  multiplied by 100,000
     *
     * itemType - Type: string. Desc: List of distinct checkout.lineItems.itemType
     *
     * minimumValueLong - Type: numeric. Desc: the minimum order threshold multiplied by 100,000
     *
     * stage - Type: string. Desc: the stage in the checkout the visitor was at when the modal was opened
     * @param {checkoutMinimumOrderClickOnGotItInErrorModalInCheckoutParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.checkoutMinimumOrderClickOnGotItInErrorModalInCheckout = function(params) {
        return this.bi.log(__assign({
            evid: 655
        }, params));
    };
    /**
     * @typedef {Object} cartClickOnCartIconToOpenMiniCartParams
     * @property {string} appName - app_name
     * @property {GUID} cartId - cart_id
     * @property {string} cartType - Digital/ Physical/ mixed (Digital &Physical)
     * @property {string} catalogAppId - A list of verticals which are in this cart separated by “ ,“:(stores app id, bookings app_id, ...)
     * @property {number} itemsCount - Numbers of items in cart
     * @property {boolean} isNavigateCart - hard coded false (for Anodot)
     * @property {string} viewMode - editor / site / preview
     **/
    /**
     * Name: Cart -> Click on cart icon to open mini cart. Evid: 49.
     * Event description: click on cart icon to open the mini cart.
    
     * appName - Type: string. Desc: app_name
     *
     * cartId - Type: guid. Desc: cart_id
     *
     * cartType - Type: string. Desc: Digital/ Physical/ mixed (Digital &Physical)
     *
     * catalogAppId - Type: string. Desc: A list of verticals which are in this cart separated by “ ,“:(stores app id, bookings app_id, ...)
     *
     * itemsCount - Type: numeric. Desc: Numbers of items in cart
     *
     * isNavigateCart - Type: bool. Desc: hard coded false (for Anodot)
     *
     * viewMode - Type: string. Desc: editor / site / preview
     * @param {cartClickOnCartIconToOpenMiniCartParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.cartClickOnCartIconToOpenMiniCart = function(params) {
        return this.bi.log(__assign({
            evid: 49
        }, params));
    };
    /**
     * @typedef {Object} thankYouPageLoadSfParams
     * @property {number} additionalFeesPrice - INT, multiplied by 100 000 - sum of all additional fees price in order
     * @property {string} appName - null
     * @property {GUID} cartId - cart_id
     * @property {string} cartType - Digital/ Physical/ mixed (Digital &Physical)
     * @property {string} catalogAppId - A list of verticals which are in this order separated by “ ,“:(stores app id, bookings app_id, ...) .
     * @property {string} checkoutId - Order.checkoutId
     * @property {string} itemType - List of distinct Order.lineItems.itemType
     * @property {number} numOfLineItems - Count distinct Order.lineItems.id
     * @property {number} numberOfAdditionalFees - number of all additional fees in the order
     * @property {string} orderId - orderId
     * @property {string} origin - the state of the panel when the user clicked on the button
     * @property {string} paymentMethodType - List of distinct Order.lineItems.paymentOption
     * @property {string} paymentProvider - null
     * @property {string} payment_status - payment_status
     * @property {string} viewMode - DESKTOP etc.
     **/
    /**
     * Name: Thank you page-> load SF. Evid: 174.
     * Event description: this event indicates when the "thank you page" was presented to the user:.
    
     * additionalFeesPrice - Type: numeric. Desc: INT, multiplied by 100 000 - sum of all additional fees price in order
     *
     * appName - Type: string.
     *
     * cartId - Type: guid. Desc: cart_id
     *
     * cartType - Type: string. Desc: Digital/ Physical/ mixed (Digital &Physical)
     *
     * catalogAppId - Type: string. Desc: A list of verticals which are in this order separated by “ ,“:(stores app id, bookings app_id, ...) .
     *
     * checkoutId - Type: string. Desc: Order.checkoutId
     *
     * itemType - Type: string. Desc: List of distinct Order.lineItems.itemType
     *
     * numOfLineItems - Type: numeric. Desc: Count distinct Order.lineItems.id
     *
     * numberOfAdditionalFees - Type: numeric. Desc: number of all additional fees in the order
     *
     * orderId - Type: string. Desc: orderId
     *
     * origin - Type: string. Desc: the state of the panel when the user clicked on the button
     *
     * paymentMethodType - Type: string. Desc: List of distinct Order.lineItems.paymentOption
     *
     * paymentProvider - Type: string.
     *
     * payment_status - Type: string. Desc: payment_status
     *
     * viewMode - Type: string. Desc: DESKTOP etc.
     * @param {thankYouPageLoadSfParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.thankYouPageLoadSf = function(params) {
        return this.bi.log(__assign({
            evid: 174
        }, params));
    };
    /**
     * @typedef {Object} clickOnBackInCheckoutProcessParams
     * @property {number} additionalFeesPrice - INT, multiplied by 100 000 - sum of all additional fees price in order
     * @property {string} appName - app_name
     * @property {GUID} cartId - cart_id
     * @property {string} catalogAppId - A list of verticals which are in this order separated by “ ,“:(stores app id, bookings app_id, ...) .
     * @property {GUID} checkoutId - checkout_id
     * @property {boolean} isOwner - true if visitor is the site owner
     * @property {string} itemType - List of distinct checkout.lineItems.itemType
     * @property {number} numberOfAdditionalFees - number of all additional fees in the order
     * @property {GUID} owner_id - uuid of site owner
     * @property {string} previousStage - the closed stage - payment / shippingDetails / deliveryMethod / payment-method / pickupDetails / shipping-method / customerDetails
     * @property {string} stage - which stage in the wishlist installation process
     **/
    /**
     * Name: Checkout -> click on 'back' in checkout process. Evid: 170.
     * Event description: click on 'back' or 'edit' in checkout process. since june 2019 also sent from OneApp.
    
     * additionalFeesPrice - Type: numeric. Desc: INT, multiplied by 100 000 - sum of all additional fees price in order
     *
     * appName - Type: string. Desc: app_name
     *
     * cartId - Type: guid. Desc: cart_id
     *
     * catalogAppId - Type: string. Desc: A list of verticals which are in this order separated by “ ,“:(stores app id, bookings app_id, ...) .
     *
     * checkoutId - Type: guid. Desc: checkout_id
     *
     * isOwner - Type: bool. Desc: true if visitor is the site owner
     *
     * itemType - Type: string. Desc: List of distinct checkout.lineItems.itemType
     *
     * numberOfAdditionalFees - Type: numeric. Desc: number of all additional fees in the order
     *
     * owner_id - Type: guid. Desc: uuid of site owner
     *
     * previousStage - Type: string. Desc: the closed stage - payment / shippingDetails / deliveryMethod / payment-method / pickupDetails / shipping-method / customerDetails
     *
     * stage - Type: string. Desc: which stage in the wishlist installation process
     * @param {clickOnBackInCheckoutProcessParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.clickOnBackInCheckoutProcess = function(params) {
        return this.bi.log(__assign({
            evid: 170
        }, params));
    };
    /**
     * @typedef {Object} updatedCartItemQuantitySfParams
     * @property {number} additionalFeesPrice - INT, multiplied by 100 000 - sum of all additional fees price in cart
     * @property {string} appName - app_name
     * @property {GUID} cartId - cart id
     * @property {string} cartType - Digital/ Physical/ mixed (Digital &Physical)
     * @property {string} catalogAppId - A list of verticals which are in this cart separated by “ ,“:(stores app id, bookings app_id, ...)
     * @property {GUID} checkoutId - checkout_id
     * @property {number} itemsCount - number of items in the cart
     * @property {number} numberOfAdditionalFees - number of all additional fees in the cart
     * @property {string} origin - origin
     * @property {GUID} owner_id - id of site's owner. since june 2019
     * @property {string} productId - product_id
     **/
    /**
     * Name: Cart -> Updated cart item quantity SF. Evid: 116.
     * Event description: Updated cart item quantity.
    
     * additionalFeesPrice - Type: numeric. Desc: INT, multiplied by 100 000 - sum of all additional fees price in cart
     *
     * appName - Type: string. Desc: app_name
     *
     * cartId - Type: guid. Desc: cart id
     *
     * cartType - Type: string. Desc: Digital/ Physical/ mixed (Digital &Physical)
     *
     * catalogAppId - Type: string. Desc: A list of verticals which are in this cart separated by “ ,“:(stores app id, bookings app_id, ...)
     *
     * checkoutId - Type: guid. Desc: checkout_id
     *
     * itemsCount - Type: numeric. Desc: number of items in the cart
     *
     * numberOfAdditionalFees - Type: numeric. Desc: number of all additional fees in the cart
     *
     * origin - Type: string. Desc: origin
     *
     * owner_id - Type: guid. Desc: id of site's owner. since june 2019
     *
     * productId - Type: string. Desc: product_id
     * @param {updatedCartItemQuantitySfParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.updatedCartItemQuantitySf = function(params) {
        return this.bi.log(__assign({
            evid: 116
        }, params));
    };
    /**
     * @typedef {Object} clickOnAddToCartParams
     * @property {string} appName - app_name
     * @property {string} buttonType - buy now / add to cart / subscribe now
     * @property {GUID} checkoutId - checkout_id
     * @property {number} quantity - added product quntety
     * @property {boolean} hasOptions - does the product have options
     * @property {boolean} isNavigateCart - true if the button redirect to cart (mobile or without cart icon), false otherwise
     * @property {string} navigationClick - mini-cart / cart  / none / checkout
     * @property {string} options - a json containing the options selected for the product
     * @property {string} origin - origin
     * @property {GUID} owner_id - id of site's owner. since june 2019
     * @property {string} productId - product_id
     * @property {string} productType - digital / physical
     * @property {GUID} uuid - uuid
     * @property {string} viewMode - editor / site / preview
     **/
    /**
     * Name: Click on add to cart. Evid: 63.
     * Event description: buyer clicks on add to cart. Also since june 2019 can be sent from OneApp store front (member view) with origin ='OA StoreFront'. Currently not sent from src 130, under disscussions.
    
     * appName - Type: string. Desc: app_name
     *
     * buttonType - Type: string. Desc: buy now / add to cart / subscribe now
     *
     * checkoutId - Type: guid. Desc: checkout_id
     *
     * quantity - Type: numeric. Desc: added product quntety
     *
     * hasOptions - Type: bool. Desc: does the product have options
     *
     * isNavigateCart - Type: bool. Desc: true if the button redirect to cart (mobile or without cart icon), false otherwise
     *
     * navigationClick - Type: string. Desc: mini-cart / cart  / none / checkout
     *
     * options - Type: string. Desc: a json containing the options selected for the product
     *
     * origin - Type: string. Desc: origin
     *
     * owner_id - Type: guid. Desc: id of site's owner. since june 2019
     *
     * productId - Type: string. Desc: product_id
     *
     * productType - Type: string. Desc: digital / physical
     *
     * uuid - Type: guid. Desc: uuid
     *
     * viewMode - Type: string. Desc: editor / site / preview
     * @param {clickOnAddToCartParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.clickOnAddToCart = function(params) {
        return this.bi.log(__assign({
            evid: 63
        }, params));
    };
    /**
     * @typedef {Object} clickOnAddNoteToSellerSfParams
     * @property {string} appName - app_name
     * @property {GUID} cartId - cart id
     * @property {string} catalogAppId - A list of verticals which are in this cart separated by “ ,“:(stores app id, bookings app_id, ...)v
     * @property {GUID} checkoutId - checkout_id
     * @property {string} origin - OA StoreFront
     **/
    /**
     * Name: Cart -> Click on add note to seller SF. Evid: 121.
     * Event description: buyer clicks on 'add note to seller' in cart page. since june 2019 also sent from OA StoreFront (with origin).
    
     * appName - Type: string. Desc: app_name
     *
     * cartId - Type: guid. Desc: cart id
     *
     * catalogAppId - Type: string. Desc: A list of verticals which are in this cart separated by “ ,“:(stores app id, bookings app_id, ...)v
     *
     * checkoutId - Type: guid. Desc: checkout_id
     *
     * origin - Type: string. Desc: OA StoreFront
     * @param {clickOnAddNoteToSellerSfParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.clickOnAddNoteToSellerSf = function(params) {
        return this.bi.log(__assign({
            evid: 121
        }, params));
    };
    /**
     * @typedef {Object} checkoutPageSpecificStageExpandedParams
     * @property {number} additionalFeesPrice - INT, multiplied by 100 000 - sum of all additional fees price in order
     * @property {string} additionalRequiredField - only for 'placeOrderFastFlow' stage: required additional field that we didnt get info fron PayPal) for "Place Order" button to be clickable='state'/'zip code' / 'state and zip code' / 'none'
     * @property {string} appName - app_name
     * @property {GUID} cartId - cart_id
     * @property {string} cartType - Digital/ Physical/ mixed (Digital &Physical)
     * @property {string} catalogAppId - catalog_app_id
     * @property {GUID} checkoutId - checkout_id
     * @property {number} itemsCount - Numbers of items in cart
     * @property {string} flowType - 'quick flow' / 'full flow'
     * @property {boolean} hasGiftCard - payment stage only - true  if visitor sees the Gift Card Checkbox
     * @property {boolean} isFirstTimeUsage - True If the user sees this stage for the first time, false if it's from edit click
     * @property {boolean} isGiftCardApplied - payment stage only  - true if giftcard is already applied on load
     * @property {boolean} isCartPaidOnlyWithGiftCard - True if payments options are hidden due to gift card fully cover the payment (with coupon or without)
     * @property {boolean} is_member - true if the visitor signed in as a member, false otherwise
     * @property {boolean} isOwner - true if visitor is the site owner
     * @property {string} itemType - List of distinct checkout.lineItems.itemType
     * @property {number} num_of_shipping - number of shipping choices presented to the visitor
     * @property {number} numberOfAdditionalFees - number of all additional fees in the order
     * @property {string} origin - 'OA StoreFront' (for OneApp)
     * @property {GUID} owner_id - uuid of site owner
     * @property {boolean} savedAddress - true if the member has saved address
     * @property {string} shippingMethodType - shipping /store pickup / none
     * @property {string} shippingStatus - data on shipping status from shipping service, only relevant after shipping details were field
     * @property {string} stage - which stage in the wishlist installation process
     **/
    /**
     * Name: Checkout -> specific stage expanded. Evid: 37.
     * Event description: when a new stage is expanded and another collapse.
    When all data is visible. since june 2019 is sent also from OneApp.
    
     * additionalFeesPrice - Type: numeric. Desc: INT, multiplied by 100 000 - sum of all additional fees price in order
     *
     * additionalRequiredField - Type: string. Desc: only for 'placeOrderFastFlow' stage: required additional field that we didnt get info fron PayPal) for "Place Order" button to be clickable='state'/'zip code' / 'state and zip code' / 'none'
     *
     * appName - Type: string. Desc: app_name
     *
     * cartId - Type: guid. Desc: cart_id
     *
     * cartType - Type: string. Desc: Digital/ Physical/ mixed (Digital &Physical)
     *
     * catalogAppId - Type: string. Desc: catalog_app_id
     *
     * checkoutId - Type: guid. Desc: checkout_id
     *
     * itemsCount - Type: numeric. Desc: Numbers of items in cart
     *
     * flowType - Type: string. Desc: 'quick flow' / 'full flow'
     *
     * hasGiftCard - Type: bool. Desc: payment stage only - true  if visitor sees the Gift Card Checkbox
     *
     * isFirstTimeUsage - Type: bool. Desc: True If the user sees this stage for the first time, false if it's from edit click
     *
     * isGiftCardApplied - Type: bool. Desc: payment stage only  - true if giftcard is already applied on load
     *
     * isCartPaidOnlyWithGiftCard - Type: bool. Desc: True if payments options are hidden due to gift card fully cover the payment (with coupon or without)
     *
     * is_member - Type: bool. Desc: true if the visitor signed in as a member, false otherwise
     *
     * isOwner - Type: bool. Desc: true if visitor is the site owner
     *
     * itemType - Type: string. Desc: List of distinct checkout.lineItems.itemType
     *
     * num_of_shipping - Type: numeric. Desc: number of shipping choices presented to the visitor
     *
     * numberOfAdditionalFees - Type: numeric. Desc: number of all additional fees in the order
     *
     * origin - Type: string. Desc: 'OA StoreFront' (for OneApp)
     *
     * owner_id - Type: guid. Desc: uuid of site owner
     *
     * savedAddress - Type: bool. Desc: true if the member has saved address
     *
     * shippingMethodType - Type: string. Desc: shipping /store pickup / none
     *
     * shippingStatus - Type: string. Desc: data on shipping status from shipping service, only relevant after shipping details were field
     *
     * stage - Type: string. Desc: which stage in the wishlist installation process
     * @param {checkoutPageSpecificStageExpandedParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.checkoutPageSpecificStageExpanded = function(params) {
        return this.bi.log(__assign({
            evid: 37
        }, params));
    };
    /**
     * @typedef {Object} oaDebugGeneralEventParams
     * @property {string} info - debug info
     * @property {string} name - what for event is sent
     **/
    /**
     * Name: OA debug -> general event. Evid: 458.
     * Event description: event for debuging.
    
     * info - Type: string. Desc: debug info
     *
     * name - Type: string. Desc: what for event is sent
     * @param {oaDebugGeneralEventParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.oaDebugGeneralEvent = function(params) {
        return this.bi.log(__assign({
            evid: 458
        }, params));
    };
    /**
     * @typedef {Object} checkoutNotAbleToAcceptPaymentsVisitorPopupSfParams
     * @property {number} additionalFeesPrice - INT, multiplied by 100 000 - sum of all additional fees price in order
     * @property {string} appName - app_name
     * @property {string} catalogAppId - A list of verticals which are in this order separated by “ ,“:(stores app id, bookings app_id, ...) .
     * @property {GUID} checkoutId - Should be taken from checkout.Checkout Object.checkoutId
     * @property {string} itemType - List of distinct checkout.lineItems.itemType
     * @property {number} numberOfAdditionalFees - number of all additional fees in the order
     * @property {string} origin - null
     * @property {string} viewMode - editor / live / preview
     **/
    /**
     * Name: Checkout -> Not able to accept payments visitor popup SF. Evid: 283.
     * Event description: Error pop-up opens when the buyer clicks on one of the checkout buttons, and If the store can't accept orders (not an Active Store / doesn't have any shipping rules)..
    
     * additionalFeesPrice - Type: numeric. Desc: INT, multiplied by 100 000 - sum of all additional fees price in order
     *
     * appName - Type: string. Desc: app_name
     *
     * catalogAppId - Type: string. Desc: A list of verticals which are in this order separated by “ ,“:(stores app id, bookings app_id, ...) .
     *
     * checkoutId - Type: guid. Desc: Should be taken from checkout.Checkout Object.checkoutId
     *
     * itemType - Type: string. Desc: List of distinct checkout.lineItems.itemType
     *
     * numberOfAdditionalFees - Type: numeric. Desc: number of all additional fees in the order
     *
     * origin - Type: string.
     *
     * viewMode - Type: string. Desc: editor / live / preview
     * @param {checkoutNotAbleToAcceptPaymentsVisitorPopupSfParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.checkoutNotAbleToAcceptPaymentsVisitorPopupSf = function(params) {
        return this.bi.log(__assign({
            evid: 283
        }, params));
    };
    /**
     * @typedef {Object} clickToAddCouponParams
     * @property {string} appName - app_name
     * @property {GUID} cartId - cart_id
     * @property {string} catalogAppId - A list of verticals which are in this order separated by “ ,“:(stores app id, bookings app_id, ...) .
     * @property {GUID} checkoutId - checkout_id
     * @property {boolean} isMember - true if visitor is member
     * @property {boolean} isOwner - true if visitor is the site owner
     * @property {string} itemType - List of distinct checkout.lineItems.itemType
     * @property {string} origin - shopping cart / checkout
     * @property {GUID} owner_id - uuid of site owner
     **/
    /**
     * Name: Checkout -> Click to add Coupon. Evid: 111.
     * Event description: user clicks on "add code"/"insert promo code" (first step of applying coupon) . since june 2019 also sent from OA StoreFront (member view).
    
     * appName - Type: string. Desc: app_name
     *
     * cartId - Type: guid. Desc: cart_id
     *
     * catalogAppId - Type: string. Desc: A list of verticals which are in this order separated by “ ,“:(stores app id, bookings app_id, ...) .
     *
     * checkoutId - Type: guid. Desc: checkout_id
     *
     * isMember - Type: bool. Desc: true if visitor is member
     *
     * isOwner - Type: bool. Desc: true if visitor is the site owner
     *
     * itemType - Type: string. Desc: List of distinct checkout.lineItems.itemType
     *
     * origin - Type: string. Desc: shopping cart / checkout
     *
     * owner_id - Type: guid. Desc: uuid of site owner
     * @param {clickToAddCouponParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.clickToAddCoupon = function(params) {
        return this.bi.log(__assign({
            evid: 111
        }, params));
    };
    /**
     * @typedef {Object} clickPlaceOrderWithSubscriptionParams
     * @property {number} additionalFeesPrice - INT, multiplied by 100 000 - sum of all additional fees price in order
     * @property {string} appName - app_name
     * @property {GUID} cartId - cart_id
     * @property {string} catalogAppId - A list of verticals which are in this order separated by “ ,“:(stores app id, bookings app_id, ...) .
     * @property {GUID} checkoutId - checkout_id
     * @property {boolean} default_state - true if was turned on by default by merchant settings
     * @property {string} itemType - List of distinct checkout.lineItems.itemType
     * @property {number} numberOfAdditionalFees - number of all additional fees in the order
     * @property {string} origin - OA StoreFront
     **/
    /**
     * Name: Checkout -> Click Place order with Subscription. Evid: 58.
     * Event description: if mail "Subscription" checkbox was checked on clicking on place order (client event). since june 2019 also sent from OA StoreFront (with origin).
    
     * additionalFeesPrice - Type: numeric. Desc: INT, multiplied by 100 000 - sum of all additional fees price in order
     *
     * appName - Type: string. Desc: app_name
     *
     * cartId - Type: guid. Desc: cart_id
     *
     * catalogAppId - Type: string. Desc: A list of verticals which are in this order separated by “ ,“:(stores app id, bookings app_id, ...) .
     *
     * checkoutId - Type: guid. Desc: checkout_id
     *
     * default_state - Type: bool. Desc: true if was turned on by default by merchant settings
     *
     * itemType - Type: string. Desc: List of distinct checkout.lineItems.itemType
     *
     * numberOfAdditionalFees - Type: numeric. Desc: number of all additional fees in the order
     *
     * origin - Type: string. Desc: OA StoreFront
     * @param {clickPlaceOrderWithSubscriptionParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.clickPlaceOrderWithSubscription = function(params) {
        return this.bi.log(__assign({
            evid: 58
        }, params));
    };
    /**
     * @typedef {Object} thankYouPageContinueBrowsingLinkClickedSfParams
     * @property {string} appName - null
     * @property {GUID} cartId - cart_id
     * @property {string} catalogAppId - A list of verticals which are in this order separated by “ ,“:(stores app id, bookings app_id, ...) .
     * @property {string} checkoutId - Order.checkoutId
     * @property {string} orderId - orderId
     **/
    /**
     * Name: Thank you page-> Continue browsing link clicked SF. Evid: 176.
    
    
     * appName - Type: string.
     *
     * cartId - Type: guid. Desc: cart_id
     *
     * catalogAppId - Type: string. Desc: A list of verticals which are in this order separated by “ ,“:(stores app id, bookings app_id, ...) .
     *
     * checkoutId - Type: string. Desc: Order.checkoutId
     *
     * orderId - Type: string. Desc: orderId
     * @param {thankYouPageContinueBrowsingLinkClickedSfParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.thankYouPageContinueBrowsingLinkClickedSf = function(params) {
        return this.bi.log(__assign({
            evid: 176
        }, params));
    };
    /**
     * @typedef {Object} errorInCheckoutParams
     * @property {number} additionalFeesPrice - INT, multiplied by 100 000 - sum of all additional fees price in order
     * @property {string} appName - app_name
     * @property {string} buyerLanguage - buyer Language
     * @property {GUID} cartId - cart_id
     * @property {string} catalogAppId - list of all catalog app ids. A list of verticals which are in this order separated by “ ,“:(stores app id, bookings app_id, ...) .
     * @property {string} channelType - what is the channel type
     * @property {GUID} checkoutId - checkout_id
     * @property {string} contactId - Buyer's contact ID. take from: Checkout.Chekout object.buyerInfo.contactId
     * @property {string} customFieldsTitle - title of custom field (can be a list if there is more than one field
     * @property {number} dintinctNumItems - count distinct item_id
     * @property {string} dintinctNumItemsPerCatalog - Json - sum of total count distinct item_id per catalog - example: {“stores”: 2, “bookings”: 3}
     * @property {string} errorMessage - right now only relevant for minimum order, no message = NULL
     * @property {string} field - Icon text, button text, out of stock...
     * @property {string} flowType - 'quick flow' / 'full flow'
     * @property {boolean} isBuyNowPayLaterOption - is buy now pay later option exist
     * @property {boolean} isBuyerNote - does a buyes note exist
     * @property {boolean} isCalculationErrors - does calculation errors exist
     * @property {boolean} isDiscountPriceSummary - does discount exist in price summary
     * @property {boolean} isGiftCard - does gift card is available in the checkout
     * @property {boolean} isMember - true if visitor is member
     * @property {boolean} isOwner - true if visitor is the site owner
     * @property {boolean} isPolicy - has policies in checkout
     * @property {boolean} is_promo_code - is promo code (coupon) option visible in the cart & checkout
     * @property {boolean} isShippingPriceSummary - does shipping exist in price summary
     * @property {boolean} isTaxPriceSummary - does tax exist in price summary
     * @property {boolean} is_with_ewallet_payment - does the store has an ewallet payment connected
     * @property {boolean} is_with_offline_payment - does the store has an offline payment connected
     * @property {string} itemType - List of distinct checkout.lineItems.itemType
     * @property {number} itemsQuantity - sum of total items quantity
     * @property {string} itemsQuantityPerCatalog - Json - sum of total items quantity per catalog - example: {“stores”: 9, “bookings”: 7}
     * @property {string} message - validation error
     * @property {number} numLineItems - total number of line items
     * @property {string} numLineItemsPerCatalog - Json - number of line items per catalog - example: {“stores”: 3, “bookings”: 4}
     * @property {number} num_of_paymet_providers - How many payment providers does the store/ site has connected
     * @property {number} num_of_shipping - number of shipping choices presented to the visitor
     * @property {number} numberOfAdditionalFees - number of all additional fees in the order
     * @property {string} origin - OA StoreFront
     * @property {string} originType - the type of flow that lead to the checkout, like buy now, paypal, etc.
     * @property {GUID} owner_id - uuid of site owner
     * @property {string} paymet_providers - array of payment providers connected to the store site
     * @property {boolean} savedAddress - true if the member has saved address
     * @property {string} selectedCarrierServiceOption - Take from: Checkout.Chekout object.Shipping Info.selectedCarrierServiceOption
     * @property {string} selectedDeliveryOption - what was the selected delivery option.
     * @property {string} shippingCity - buyer city when viewing the checkout. Take from: Checkout.Chekout object.Shipping Info. shipping destenation.address.city
     * @property {string} shippingCountry - buyer country code when viewing the checkout. Take from: Checkout.Chekout object.Shipping Info. shipping destenation.address.country
     * @property {string} shippingMethodType - shipping /store pickup / none
     * @property {string} siteLanguage - site Language
     * @property {string} stage - which stage in the wishlist installation process
     **/
    /**
     * Name: Checkout -> Error in checkout. Evid: 24.
     * Event description: errors in checkoutfunnel. since june 2019 also sent from OneApp (origin = 'OA StoreFront').
    
     * additionalFeesPrice - Type: numeric. Desc: INT, multiplied by 100 000 - sum of all additional fees price in order
     *
     * appName - Type: string. Desc: app_name
     *
     * buyerLanguage - Type: string. Desc: buyer Language
     *
     * cartId - Type: guid. Desc: cart_id
     *
     * catalogAppId - Type: string. Desc: list of all catalog app ids. A list of verticals which are in this order separated by “ ,“:(stores app id, bookings app_id, ...) .
     *
     * channelType - Type: string. Desc: what is the channel type
     *
     * checkoutId - Type: guid. Desc: checkout_id
     *
     * contactId - Type: string. Desc: Buyer's contact ID. take from: Checkout.Chekout object.buyerInfo.contactId
     *
     * customFieldsTitle - Type: string. Desc: title of custom field (can be a list if there is more than one field
     *
     * dintinctNumItems - Type: numeric. Desc: count distinct item_id
     *
     * dintinctNumItemsPerCatalog - Type: string. Desc: Json - sum of total count distinct item_id per catalog - example: {“stores”: 2, “bookings”: 3}
     *
     * errorMessage - Type: string. Desc: right now only relevant for minimum order, no message = NULL
     *
     * field - Type: string. Desc: Icon text, button text, out of stock...
     *
     * flowType - Type: string. Desc: 'quick flow' / 'full flow'
     *
     * isBuyNowPayLaterOption - Type: bool. Desc: is buy now pay later option exist
     *
     * isBuyerNote - Type: bool. Desc: does a buyes note exist
     *
     * isCalculationErrors - Type: bool. Desc: does calculation errors exist
     *
     * isDiscountPriceSummary - Type: bool. Desc: does discount exist in price summary
     *
     * isGiftCard - Type: bool. Desc: does gift card is available in the checkout
     *
     * isMember - Type: bool. Desc: true if visitor is member
     *
     * isOwner - Type: bool. Desc: true if visitor is the site owner
     *
     * isPolicy - Type: bool. Desc: has policies in checkout
     *
     * is_promo_code - Type: bool. Desc: is promo code (coupon) option visible in the cart & checkout
     *
     * isShippingPriceSummary - Type: bool. Desc: does shipping exist in price summary
     *
     * isTaxPriceSummary - Type: bool. Desc: does tax exist in price summary
     *
     * is_with_ewallet_payment - Type: bool. Desc: does the store has an ewallet payment connected
     *
     * is_with_offline_payment - Type: bool. Desc: does the store has an offline payment connected
     *
     * itemType - Type: string. Desc: List of distinct checkout.lineItems.itemType
     *
     * itemsQuantity - Type: numeric. Desc: sum of total items quantity
     *
     * itemsQuantityPerCatalog - Type: string. Desc: Json - sum of total items quantity per catalog - example: {“stores”: 9, “bookings”: 7}
     *
     * message - Type: string. Desc: validation error
     *
     * numLineItems - Type: numeric. Desc: total number of line items
     *
     * numLineItemsPerCatalog - Type: string. Desc: Json - number of line items per catalog - example: {“stores”: 3, “bookings”: 4}
     *
     * num_of_paymet_providers - Type: numeric. Desc: How many payment providers does the store/ site has connected
     *
     * num_of_shipping - Type: numeric. Desc: number of shipping choices presented to the visitor
     *
     * numberOfAdditionalFees - Type: numeric. Desc: number of all additional fees in the order
     *
     * origin - Type: string. Desc: OA StoreFront
     *
     * originType - Type: string. Desc: the type of flow that lead to the checkout, like buy now, paypal, etc.
     *
     * owner_id - Type: guid. Desc: uuid of site owner
     *
     * paymet_providers - Type: string. Desc: array of payment providers connected to the store site
     *
     * savedAddress - Type: bool. Desc: true if the member has saved address
     *
     * selectedCarrierServiceOption - Type: string. Desc: Take from: Checkout.Chekout object.Shipping Info.selectedCarrierServiceOption
     *
     * selectedDeliveryOption - Type: string. Desc: what was the selected delivery option.
     *
     * shippingCity - Type: string. Desc: buyer city when viewing the checkout. Take from: Checkout.Chekout object.Shipping Info. shipping destenation.address.city
     *
     * shippingCountry - Type: string. Desc: buyer country code when viewing the checkout. Take from: Checkout.Chekout object.Shipping Info. shipping destenation.address.country
     *
     * shippingMethodType - Type: string. Desc: shipping /store pickup / none
     *
     * siteLanguage - Type: string. Desc: site Language
     *
     * stage - Type: string. Desc: which stage in the wishlist installation process
     * @param {errorInCheckoutParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.errorInCheckout = function(params) {
        return this.bi.log(__assign({
            evid: 24
        }, params));
    };
    /**
     * @typedef {Object} updateClickedInSelectYourShippingDestinationPopupSfParams
     * @property {number} additionalFeesPrice - INT, multiplied by 100 000 - sum of all additional fees price in cart
     * @property {string} appName - app_name
     * @property {GUID} cartId - cart id
     * @property {string} cartType - Digital/ Physical/ mixed (Digital &Physical)
     * @property {string} catalogAppId - A list of verticals which are in this cart separated by “ ,“:(stores app id, bookings app_id, ...)
     * @property {GUID} checkoutId - checkout_id
     * @property {boolean} hasZipCode - true if the destination was saved with zip code, else false
     * @property {number} numberOfAdditionalFees - number of all additional fees in the cart
     * @property {string} shippingDestinationCountry - shipping destination country
     * @property {string} shippingDestinationState - shipping destination state
     **/
    /**
     * Name: Cart -> update was clicked in select your shipping destination popup SF. Evid: 125.
     * Event description: When a visitor clicks on one of the options in the shipping method dropdown on the cart page.
    
     * additionalFeesPrice - Type: numeric. Desc: INT, multiplied by 100 000 - sum of all additional fees price in cart
     *
     * appName - Type: string. Desc: app_name
     *
     * cartId - Type: guid. Desc: cart id
     *
     * cartType - Type: string. Desc: Digital/ Physical/ mixed (Digital &Physical)
     *
     * catalogAppId - Type: string. Desc: A list of verticals which are in this cart separated by “ ,“:(stores app id, bookings app_id, ...)
     *
     * checkoutId - Type: guid. Desc: checkout_id
     *
     * hasZipCode - Type: bool. Desc: true if the destination was saved with zip code, else false
     *
     * numberOfAdditionalFees - Type: numeric. Desc: number of all additional fees in the cart
     *
     * shippingDestinationCountry - Type: string. Desc: shipping destination country
     *
     * shippingDestinationState - Type: string. Desc: shipping destination state
     * @param {updateClickedInSelectYourShippingDestinationPopupSfParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.updateClickedInSelectYourShippingDestinationPopupSf = function(params) {
        return this.bi.log(__assign({
            evid: 125
        }, params));
    };
    /**
     * @typedef {Object} checkoutRedirectFromOoiCheckoutForDevParams
     * @property {GUID} checkoutId - The checkout_id won't sent when the reason is not fast flow
     * @property {string} reason - reason for the redirect (non-english, non-stores)
     **/
    /**
     * Name: Checkout -> Redirect from OOI Checkout (for dev). Evid: 718.
     * Event description: When UoU is redirected from the OOI checkout to the old Checkout (non-English/have bookings).
    
     * checkoutId - Type: guid. Desc: The checkout_id won't sent when the reason is not fast flow
     *
     * reason - Type: string. Desc: reason for the redirect (non-english, non-stores)
     * @param {checkoutRedirectFromOoiCheckoutForDevParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.checkoutRedirectFromOoiCheckoutForDev = function(params) {
        return this.bi.log(__assign({
            evid: 718
        }, params));
    };
    /**
     * @typedef {Object} cartMiniCartLoadedParams
     * @property {string} appName - app_name
     * @property {string} catalogAppId - A list of verticals which are in this cart separated by “ ,“:(stores app id, bookings app_id, ...)
     **/
    /**
     * Name: Cart -> Mini Cart loaded. Evid: 211.
     * Event description: Mini Cart loaded.
    
     * appName - Type: string. Desc: app_name
     *
     * catalogAppId - Type: string. Desc: A list of verticals which are in this cart separated by “ ,“:(stores app id, bookings app_id, ...)
     * @param {cartMiniCartLoadedParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.cartMiniCartLoaded = function(params) {
        return this.bi.log(__assign({
            evid: 211
        }, params));
    };
    /**
     * @typedef {Object} checkoutOoiDevsQaEventParams
     * @property {string} dataString - field with string to check
     **/
    /**
     * Name: Checkout OOI- devs QA event. Evid: 707.
     * Event description: this bi event is for the devs QA checks.
    
     * dataString - Type: string. Desc: field with string to check
     * @param {checkoutOoiDevsQaEventParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.checkoutOoiDevsQaEvent = function(params) {
        return this.bi.log(__assign({
            evid: 707
        }, params));
    };
    /**
     * @typedef {Object} clickOnEditCartParams
     * @property {number} additionalFeesPrice - INT, multiplied by 100 000 - sum of all additional fees price in order
     * @property {string} appName - null
     * @property {GUID} cartId - null
     * @property {string} cartType - null
     * @property {string} catalogAppId - A list of verticals which are in this order separated by “ ,“:(stores app id, bookings app_id, ...) .
     * @property {GUID} checkoutId - checkout_id
     * @property {string} itemType - List of distinct checkout.lineItems.itemType
     * @property {number} numberOfAdditionalFees - number of all additional fees in the order
     * @property {string} origin - null
     **/
    /**
     * Name: Checkout -> click on edit cart. Evid: 171.
     * Event description: click on edit cart button in checkout process.
    
     * additionalFeesPrice - Type: numeric. Desc: INT, multiplied by 100 000 - sum of all additional fees price in order
     *
     * appName - Type: string.
     *
     * cartId - Type: guid.
     *
     * cartType - Type: string.
     *
     * catalogAppId - Type: string. Desc: A list of verticals which are in this order separated by “ ,“:(stores app id, bookings app_id, ...) .
     *
     * checkoutId - Type: guid. Desc: checkout_id
     *
     * itemType - Type: string. Desc: List of distinct checkout.lineItems.itemType
     *
     * numberOfAdditionalFees - Type: numeric. Desc: number of all additional fees in the order
     *
     * origin - Type: string.
     * @param {clickOnEditCartParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.clickOnEditCart = function(params) {
        return this.bi.log(__assign({
            evid: 171
        }, params));
    };
    /**
     * @typedef {Object} membersAddressInCheckoutWasChangedParams
     * @property {number} additionalFeesPrice - INT, multiplied by 100 000 - sum of all additional fees price in order
     * @property {string} appName - app_name
     * @property {GUID} cartId - cart_id
     * @property {string} cartType - Digital/ Physical/ mixed (Digital &Physical)
     * @property {string} catalogAppId - A list of verticals which are in this order separated by “ ,“:(stores app id, bookings app_id, ...) .
     * @property {GUID} checkoutId - checkout_id
     * @property {string} itemType - List of distinct checkout.lineItems.itemType
     * @property {number} numberOfAdditionalFees - number of all additional fees in the order
     * @property {string} origin - addresses list / add address / edit address
     * @property {string} stage - which stage in the wishlist installation process
     **/
    /**
     * Name: members -> address in checkout was changed. Evid: 48.
     * Event description: when address was changed in the checkout.
    
     * additionalFeesPrice - Type: numeric. Desc: INT, multiplied by 100 000 - sum of all additional fees price in order
     *
     * appName - Type: string. Desc: app_name
     *
     * cartId - Type: guid. Desc: cart_id
     *
     * cartType - Type: string. Desc: Digital/ Physical/ mixed (Digital &Physical)
     *
     * catalogAppId - Type: string. Desc: A list of verticals which are in this order separated by “ ,“:(stores app id, bookings app_id, ...) .
     *
     * checkoutId - Type: guid. Desc: checkout_id
     *
     * itemType - Type: string. Desc: List of distinct checkout.lineItems.itemType
     *
     * numberOfAdditionalFees - Type: numeric. Desc: number of all additional fees in the order
     *
     * origin - Type: string. Desc: addresses list / add address / edit address
     *
     * stage - Type: string. Desc: which stage in the wishlist installation process
     * @param {membersAddressInCheckoutWasChangedParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.membersAddressInCheckoutWasChanged = function(params) {
        return this.bi.log(__assign({
            evid: 48
        }, params));
    };
    /**
     * @typedef {Object} oneAppStoreFrontClearCartSfParams
     * @property {string} cartId - cartId
     * @property {string} catalogAppId - Stores/bookings App id
     * @property {number} itemsCount - # of products in cart
     **/
    /**
     * Name: OneApp StoreFront -> Clear cart SF. Evid: 184.
     * Event description: OneApp StoreFront -> Clear cart SF.
    
     * cartId - Type: string. Desc: cartId
     *
     * catalogAppId - Type: string. Desc: Stores/bookings App id
     *
     * itemsCount - Type: numeric. Desc: # of products in cart
     * @param {oneAppStoreFrontClearCartSfParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.oneAppStoreFrontClearCartSf = function(params) {
        return this.bi.log(__assign({
            evid: 184
        }, params));
    };
    /**
     * @typedef {Object} checkoutMinimumOrderModalIsShownInCheckoutParams
     * @property {string} appName - null
     * @property {GUID} cartId - cart_id
     * @property {string} catalogAppId - A list of verticals which are in this order separated by “ ,“:(stores app id, bookings app_id, ...) .
     * @property {GUID} checkoutId - only in EP
     * @property {string} currency - the currency that was shown in the message
     * @property {number} diffLong - The diff between the relevant order value and the minimum order threshold  multiplied by 100,000
     * @property {boolean} hasPickup - has_pickup
     * @property {string} itemType - List of distinct checkout.lineItems.itemType
     * @property {number} minimumValueLong - the minimum order threshold multiplied by 100,000
     * @property {string} stage - the stage in the checkout the visitor was at when the modal was opened
     **/
    /**
     * Name: Checkout -> Minimum order modal is shown in checkout. Evid: 654.
     * Event description: Minimum order modal is shown in checkout.
    
     * appName - Type: string.
     *
     * cartId - Type: guid. Desc: cart_id
     *
     * catalogAppId - Type: string. Desc: A list of verticals which are in this order separated by “ ,“:(stores app id, bookings app_id, ...) .
     *
     * checkoutId - Type: guid. Desc: only in EP
     *
     * currency - Type: string. Desc: the currency that was shown in the message
     *
     * diffLong - Type: numeric. Desc: The diff between the relevant order value and the minimum order threshold  multiplied by 100,000
     *
     * hasPickup - Type: bool. Desc: has_pickup
     *
     * itemType - Type: string. Desc: List of distinct checkout.lineItems.itemType
     *
     * minimumValueLong - Type: numeric. Desc: the minimum order threshold multiplied by 100,000
     *
     * stage - Type: string. Desc: the stage in the checkout the visitor was at when the modal was opened
     * @param {checkoutMinimumOrderModalIsShownInCheckoutParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.checkoutMinimumOrderModalIsShownInCheckout = function(params) {
        return this.bi.log(__assign({
            evid: 654
        }, params));
    };
    /**
     * @typedef {Object} shippingAddressSetParams
     * @property {number} additionalFeesPrice - INT, multiplied by 100 000 - sum of all additional fees price in order
     * @property {string} appName - app_name
     * @property {GUID} cartId - cart_id
     * @property {string} cartType - Digital/ Physical/ mixed (Digital &Physical)
     * @property {string} catalogAppId - A list of verticals which are in this order separated by “ ,“:(stores app id, bookings app_id, ...) .
     * @property {GUID} checkoutId - checkout_id
     * @property {boolean} isChecked - is billing address the same as delivery address
     * @property {boolean} isFormValid - is form valid (all mandatory fields are compatible)
     * @property {boolean} isOwner - true if visitor is the site owner
     * @property {string} item_type - List of distinct checkout.lineItems.itemType
     * @property {number} numberOfAdditionalFees - number of all additional fees in the order
     * @property {GUID} owner_id - uuid of site owner
     **/
    /**
     * Name: Checkout -> Shipping address set. Evid: 161.
     * Event description: Shipping address set. since june 2019 is also sentt from OneApp (origin =OA StoreFront).
    
     * additionalFeesPrice - Type: numeric. Desc: INT, multiplied by 100 000 - sum of all additional fees price in order
     *
     * appName - Type: string. Desc: app_name
     *
     * cartId - Type: guid. Desc: cart_id
     *
     * cartType - Type: string. Desc: Digital/ Physical/ mixed (Digital &Physical)
     *
     * catalogAppId - Type: string. Desc: A list of verticals which are in this order separated by “ ,“:(stores app id, bookings app_id, ...) .
     *
     * checkoutId - Type: guid. Desc: checkout_id
     *
     * isChecked - Type: bool. Desc: is billing address the same as delivery address
     *
     * isFormValid - Type: bool. Desc: is form valid (all mandatory fields are compatible)
     *
     * isOwner - Type: bool. Desc: true if visitor is the site owner
     *
     * item_type - Type: string. Desc: List of distinct checkout.lineItems.itemType
     *
     * numberOfAdditionalFees - Type: numeric. Desc: number of all additional fees in the order
     *
     * owner_id - Type: guid. Desc: uuid of site owner
     * @param {shippingAddressSetParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.shippingAddressSet = function(params) {
        return this.bi.log(__assign({
            evid: 161
        }, params));
    };
    /**
     * @typedef {Object} saveNoteToSellerSfParams
     * @property {string} appName - app_name
     * @property {GUID} cartId - cart id
     * @property {string} catalogAppId - A list of verticals which are in this cart separated by “ ,“:(stores app id, bookings app_id, ...)
     * @property {GUID} checkoutId - checkout_id
     * @property {boolean} is_empty - is text field empty
     * @property {string} origin - origin
     **/
    /**
     * Name: Cart -> Save note to seller SF. Evid: 122.
     * Event description: buyer clicks on 'done' in add note to seller field in cart page. since june 2019 also sent from OA StoreFront (with origin).
    
     * appName - Type: string. Desc: app_name
     *
     * cartId - Type: guid. Desc: cart id
     *
     * catalogAppId - Type: string. Desc: A list of verticals which are in this cart separated by “ ,“:(stores app id, bookings app_id, ...)
     *
     * checkoutId - Type: guid. Desc: checkout_id
     *
     * is_empty - Type: bool. Desc: is text field empty
     *
     * origin - Type: string. Desc: origin
     * @param {saveNoteToSellerSfParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.saveNoteToSellerSf = function(params) {
        return this.bi.log(__assign({
            evid: 122
        }, params));
    };
    /**
     * @typedef {Object} viewCartPageSfParams
     * @property {number} additionalFeesPrice - INT, multiplied by 100 000 - sum of all additional fees price in cart
     * @property {string} appName - app_name
     * @property {GUID} cartId - cart id
     * @property {string} cartType - Digital/ Physical/ mixed (Digital &Physical)
     * @property {string} catalogAppId - A list of verticals which are in this cart separated by “ ,“:(stores app id, bookings app_id, ...)
     * @property {GUID} checkoutId - checkout_id
     * @property {string} checkoutType - in viewer / out of viewer
     * @property {number} itemsCount - number of items in the cart
     * @property {boolean} isContinueShopping - show continue shopping link in cart
     * @property {boolean} isDeliveryRates - show delivery rates in cart
     * @property {boolean} isFullWidth - is the full width setting in the cart on / off
     * @property {boolean} is_member - true is the visitor signed in as a member, false otherwise
     * @property {boolean} isMembersInstalled - true if members app installed on site, false otherwise
     * @property {boolean} is_note - show add a note to seller in cart
     * @property {boolean} isOwner - true for owner false for member. since june 2019
     * @property {boolean} isPickupAvailable - is pickup available
     * @property {boolean} is_promo_code - show/hide promo code (coupon) in the cart & checkout
     * @property {boolean} isShippingCalculated - is the shipping estimation is calculated
     * @property {boolean} isTaxCosts - show tax costs in cart
     * @property {boolean} is_with_ewallet_payment - does the store has an ewallet payment connected (and displaying in cart)
     * @property {boolean} is_with_offline_payment - does the store has an offline payment connected
     * @property {number} lineItemsCount - number of line items in cart
     * @property {number} num_of_paymet_providers - How many payment providers does the store has connected
     * @property {number} num_of_shipping - number of shipping choices presented to the visitor at the first time
     * @property {number} numberOfAdditionalFees - number of all additional fees in the cart
     * @property {string} origin - add to cart / mini cart / cart widget / checkout / 'eWallet redirect - cancel'
     * @property {GUID} owner_id - id of site's owner. since june 2019
     * @property {string} paymet_providers - array of payment providers connected to the store
     * @property {string} shippingReason - the reason why the shipping is not calculated (unknown = POS/digital cart)
     * @property {GUID} siteMemberId - member guid
     * @property {GUID} uuid - uuid
     * @property {string} viewMode - editor / site / preview
     * @property {GUID} visitorId - visitorId
     **/
    /**
     * Name: Cart -> view cart page SF. Evid: 124.
     * Event description: view cart page. since june 2019 also for OneApp Store front.
    
     * additionalFeesPrice - Type: numeric. Desc: INT, multiplied by 100 000 - sum of all additional fees price in cart
     *
     * appName - Type: string. Desc: app_name
     *
     * cartId - Type: guid. Desc: cart id
     *
     * cartType - Type: string. Desc: Digital/ Physical/ mixed (Digital &Physical)
     *
     * catalogAppId - Type: string. Desc: A list of verticals which are in this cart separated by “ ,“:(stores app id, bookings app_id, ...)
     *
     * checkoutId - Type: guid. Desc: checkout_id
     *
     * checkoutType - Type: string. Desc: in viewer / out of viewer
     *
     * itemsCount - Type: numeric. Desc: number of items in the cart
     *
     * isContinueShopping - Type: bool. Desc: show continue shopping link in cart
     *
     * isDeliveryRates - Type: bool. Desc: show delivery rates in cart
     *
     * isFullWidth - Type: bool. Desc: is the full width setting in the cart on / off
     *
     * is_member - Type: bool. Desc: true is the visitor signed in as a member, false otherwise
     *
     * isMembersInstalled - Type: bool. Desc: true if members app installed on site, false otherwise
     *
     * is_note - Type: bool. Desc: show add a note to seller in cart
     *
     * isOwner - Type: bool. Desc: true for owner false for member. since june 2019
     *
     * isPickupAvailable - Type: bool. Desc: is pickup available
     *
     * is_promo_code - Type: bool. Desc: show/hide promo code (coupon) in the cart & checkout
     *
     * isShippingCalculated - Type: bool. Desc: is the shipping estimation is calculated
     *
     * isTaxCosts - Type: bool. Desc: show tax costs in cart
     *
     * is_with_ewallet_payment - Type: bool. Desc: does the store has an ewallet payment connected (and displaying in cart)
     *
     * is_with_offline_payment - Type: bool. Desc: does the store has an offline payment connected
     *
     * lineItemsCount - Type: numeric. Desc: number of line items in cart
     *
     * num_of_paymet_providers - Type: numeric. Desc: How many payment providers does the store has connected
     *
     * num_of_shipping - Type: numeric. Desc: number of shipping choices presented to the visitor at the first time
     *
     * numberOfAdditionalFees - Type: numeric. Desc: number of all additional fees in the cart
     *
     * origin - Type: string. Desc: add to cart / mini cart / cart widget / checkout / 'eWallet redirect - cancel'
     *
     * owner_id - Type: guid. Desc: id of site's owner. since june 2019
     *
     * paymet_providers - Type: string. Desc: array of payment providers connected to the store
     *
     * shippingReason - Type: string. Desc: the reason why the shipping is not calculated (unknown = POS/digital cart)
     *
     * siteMemberId - Type: guid. Desc: member guid
     *
     * uuid - Type: guid. Desc: uuid
     *
     * viewMode - Type: string. Desc: editor / site / preview
     *
     * visitorId - Type: guid. Desc: visitorId
     * @param {viewCartPageSfParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.viewCartPageSf = function(params) {
        return this.bi.log(__assign({
            evid: 124
        }, params));
    };
    /**
     * @typedef {Object} ordersViewOrderDetailsPageSfParams
     * @property {string} appName - app_name
     * @property {string} cartType - Digital/ Physical/ mixed (Digital &Physical)
     * @property {string} contact_id - contact_id
     * @property {number} itemsCount - number of items in the order
     * @property {string} orderId - orderId
     * @property {string} origin - order_page
     * @property {GUID} site_member_id - member id
     **/
    /**
     * Name: Orders ->  view order_details page SF. Evid: 128.
     * Event description: view order details in order history page.
    
     * appName - Type: string. Desc: app_name
     *
     * cartType - Type: string. Desc: Digital/ Physical/ mixed (Digital &Physical)
     *
     * contact_id - Type: string. Desc: contact_id
     *
     * itemsCount - Type: numeric. Desc: number of items in the order
     *
     * orderId - Type: string. Desc: orderId
     *
     * origin - Type: string. Desc: order_page
     *
     * site_member_id - Type: guid. Desc: member id
     * @param {ordersViewOrderDetailsPageSfParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.ordersViewOrderDetailsPageSf = function(params) {
        return this.bi.log(__assign({
            evid: 128
        }, params));
    };
    /**
     * @typedef {Object} giftCardCheckoutClickApplyParams
     * @property {number} additionalFeesPrice - INT, multiplied by 100 000 - sum of all additional fees price in order
     * @property {string} appName - null
     * @property {GUID} cartId - cart id
     * @property {string} catalogAppId - A list of verticals which are in this order separated by “ ,“:(stores app id, bookings app_id, ...) .
     * @property {GUID} checkoutId - checkout_id
     * @property {boolean} isMember - true if visitor is member
     * @property {string} itemType - List of distinct checkout.lineItems.itemType
     * @property {number} numberOfAdditionalFees - number of all additional fees in the order
     **/
    /**
     * Name: gift card checkout -> click Apply. Evid: 529.
     * Event description: when visitor checks / unchecks the Gift Card checkbox in Payment stage of Checkout.
    
     * additionalFeesPrice - Type: numeric. Desc: INT, multiplied by 100 000 - sum of all additional fees price in order
     *
     * appName - Type: string.
     *
     * cartId - Type: guid. Desc: cart id
     *
     * catalogAppId - Type: string. Desc: A list of verticals which are in this order separated by “ ,“:(stores app id, bookings app_id, ...) .
     *
     * checkoutId - Type: guid. Desc: checkout_id
     *
     * isMember - Type: bool. Desc: true if visitor is member
     *
     * itemType - Type: string. Desc: List of distinct checkout.lineItems.itemType
     *
     * numberOfAdditionalFees - Type: numeric. Desc: number of all additional fees in the order
     * @param {giftCardCheckoutClickApplyParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.giftCardCheckoutClickApply = function(params) {
        return this.bi.log(__assign({
            evid: 529
        }, params));
    };
    /**
     * @typedef {Object} ordersViewOrderHistoryPageSfParams
     * @property {string} appName - app_name
     * @property {string} contact_id - contact_id
     * @property {number} itemsCount - number of orders in the page (for without orders it will be 0)
     * @property {string} origin - origin
     * @property {GUID} site_member_id - member id
     **/
    /**
     * Name: Orders -> view order_history page SF. Evid: 127.
     * Event description: view order history page (when it is with orders or without).
    
     * appName - Type: string. Desc: app_name
     *
     * contact_id - Type: string. Desc: contact_id
     *
     * itemsCount - Type: numeric. Desc: number of orders in the page (for without orders it will be 0)
     *
     * origin - Type: string. Desc: origin
     *
     * site_member_id - Type: guid. Desc: member id
     * @param {ordersViewOrderHistoryPageSfParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.ordersViewOrderHistoryPageSf = function(params) {
        return this.bi.log(__assign({
            evid: 127
        }, params));
    };
    /**
     * @typedef {Object} checkoutShowMerchantPaymentPopupSfParams
     * @property {string} appName - app_name
     * @property {string} mode - mode
     * @property {string} origin - where the modal pops up (cart / product page...)
     **/
    /**
     * Name: Checkout -> Show merchant payment popup SF. Evid: 164.
     * Event description: When the user connects to his site and tries to do checkout when the payment method doesn't define in the site's settings.
    
     * appName - Type: string. Desc: app_name
     *
     * mode - Type: string. Desc: mode
     *
     * origin - Type: string. Desc: where the modal pops up (cart / product page...)
     * @param {checkoutShowMerchantPaymentPopupSfParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.checkoutShowMerchantPaymentPopupSf = function(params) {
        return this.bi.log(__assign({
            evid: 164
        }, params));
    };
    /**
     * @typedef {Object} serverlessEventPlaygroundParams
     * @property {number} additionalFeesPrice - INT, multiplied by 100 000 - sum of all additional fees price in order
     * @property {string} appName - app_name
     * @property {GUID} cartId - cart_id
     * @property {string} catalogAppId - A list of verticals which are in this order separated by “ ,“:(stores app id, bookings app_id, ...) .
     * @property {GUID} checkoutId - checkout_id
     * @property {string} itemType - List of distinct checkout.lineItems.itemType
     * @property {number} numberOfAdditionalFees - number of all additional fees in the order
     * @property {string} paymentCategory - CreditCard/Ewallet
     * @property {string} paymentMethod - authorize-net/Stripe
     **/
    /**
     * Name: Checkout -> Select payment category cashier. Evid: 200.
     * Event description: Select payment category SF cashier - select radio button.
    
     * additionalFeesPrice - Type: numeric. Desc: INT, multiplied by 100 000 - sum of all additional fees price in order
     *
     * appName - Type: string. Desc: app_name
     *
     * cartId - Type: guid. Desc: cart_id
     *
     * catalogAppId - Type: string. Desc: A list of verticals which are in this order separated by “ ,“:(stores app id, bookings app_id, ...) .
     *
     * checkoutId - Type: guid. Desc: checkout_id
     *
     * itemType - Type: string. Desc: List of distinct checkout.lineItems.itemType
     *
     * numberOfAdditionalFees - Type: numeric. Desc: number of all additional fees in the order
     *
     * paymentCategory - Type: string. Desc: CreditCard/Ewallet
     *
     * paymentMethod - Type: string. Desc: authorize-net/Stripe
     * @param {serverlessEventPlaygroundParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.serverlessEventPlayground = function(params) {
        return this.bi.log(__assign({
            evid: 200
        }, params));
    };
    /**
     * @typedef {Object} cartMinimumOrderMessageIsShownInCartParams
     * @property {string} appName - app_name
     * @property {boolean} buttonEnabled - true - if the button is enabled false -if button is disabled
     * @property {GUID} cartId - cart_id
     * @property {string} catalogAppId - A list of verticals which are in this cart separated by “ ,“:(stores app id, bookings app_id, ...)
     * @property {GUID} checkoutId - only in EP
     * @property {string} currency - the currency that was shown in the message
     * @property {number} diffLong - The diff between the relevant order value and the minimum order threshold multiplied by 10000
     * @property {number} minimumValueLong - the minimum order threshold multiplied by 10000
     **/
    /**
     * Name: Cart -> Minimum order message is shown in cart. Evid: 653.
     * Event description: Minimum order message is shown in cart.
    
     * appName - Type: string. Desc: app_name
     *
     * buttonEnabled - Type: bool. Desc: true - if the button is enabled false -if button is disabled
     *
     * cartId - Type: guid. Desc: cart_id
     *
     * catalogAppId - Type: string. Desc: A list of verticals which are in this cart separated by “ ,“:(stores app id, bookings app_id, ...)
     *
     * checkoutId - Type: guid. Desc: only in EP
     *
     * currency - Type: string. Desc: the currency that was shown in the message
     *
     * diffLong - Type: numeric. Desc: The diff between the relevant order value and the minimum order threshold multiplied by 10000
     *
     * minimumValueLong - Type: numeric. Desc: the minimum order threshold multiplied by 10000
     * @param {cartMinimumOrderMessageIsShownInCartParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.cartMinimumOrderMessageIsShownInCart = function(params) {
        return this.bi.log(__assign({
            evid: 653
        }, params));
    };
    /**
     * @typedef {Object} clickOnCheckoutParams
     * @property {number} additionalFeesPrice - INT, multiplied by 100 000 - sum of all additional fees price in cart
     * @property {string} appName - app_name
     * @property {GUID} cartId - cart_id
     * @property {string} cartType - Digital/ Physical/ mixed (Digital &Physical)
     * @property {string} catalogAppId - A list of verticals which are in this cart separated by “ ,“:(stores app id, bookings app_id, ...)
     * @property {GUID} checkoutId - checkout_id
     * @property {number} itemsCount - Numbers of items in cart
     * @property {boolean} isOwner - true if visitor is the site owner
     * @property {boolean} is_with_ewallet_payment - does the store has an ewallet payment connected (and displaying in cart)
     * @property {boolean} is_with_offline_payment - does the store has an offline payment connected
     * @property {number} num_of_paymet_providers - How many payment providers does the store has connected
     * @property {number} num_of_shipping - number of shipping choices presented to the visitor
     * @property {number} numberOfAdditionalFees - number of all additional fees in the cart
     * @property {string} orig_shipping_method - current shipping method in cart page (free shipping/ Flat rate/ rate by weight/ etc...)
     * @property {string} origin - origin
     * @property {GUID} owner_id - uuid of site owner
     * @property {string} paymet_providers - array of payment providers connected to the store
     * @property {string} productsList - json containing all product guids for products in the cart
     * @property {string} shippingMethodType - shipping /store pickup / none
     **/
    /**
     * Name: Cart -> Click on checkout. Evid: 114.
     * Event description: Click on checkout from Cart page. since june 2019 also sent from OneApp with origin = 'OA StoreFront'.
    
     * additionalFeesPrice - Type: numeric. Desc: INT, multiplied by 100 000 - sum of all additional fees price in cart
     *
     * appName - Type: string. Desc: app_name
     *
     * cartId - Type: guid. Desc: cart_id
     *
     * cartType - Type: string. Desc: Digital/ Physical/ mixed (Digital &Physical)
     *
     * catalogAppId - Type: string. Desc: A list of verticals which are in this cart separated by “ ,“:(stores app id, bookings app_id, ...)
     *
     * checkoutId - Type: guid. Desc: checkout_id
     *
     * itemsCount - Type: numeric. Desc: Numbers of items in cart
     *
     * isOwner - Type: bool. Desc: true if visitor is the site owner
     *
     * is_with_ewallet_payment - Type: bool. Desc: does the store has an ewallet payment connected (and displaying in cart)
     *
     * is_with_offline_payment - Type: bool. Desc: does the store has an offline payment connected
     *
     * num_of_paymet_providers - Type: numeric. Desc: How many payment providers does the store has connected
     *
     * num_of_shipping - Type: numeric. Desc: number of shipping choices presented to the visitor
     *
     * numberOfAdditionalFees - Type: numeric. Desc: number of all additional fees in the cart
     *
     * orig_shipping_method - Type: string. Desc: current shipping method in cart page (free shipping/ Flat rate/ rate by weight/ etc...)
     *
     * origin - Type: string. Desc: origin
     *
     * owner_id - Type: guid. Desc: uuid of site owner
     *
     * paymet_providers - Type: string. Desc: array of payment providers connected to the store
     *
     * productsList - Type: string. Desc: json containing all product guids for products in the cart
     *
     * shippingMethodType - Type: string. Desc: shipping /store pickup / none
     * @param {clickOnCheckoutParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.clickOnCheckout = function(params) {
        return this.bi.log(__assign({
            evid: 114
        }, params));
    };
    /**
     * @typedef {Object} removeACouponParams
     * @property {number} additionalFeesPrice - INT, multiplied by 100 000 - sum of all additional fees price in cart/order
     * @property {string} appName - null
     * @property {GUID} cartId - cart_id
     * @property {string} catalogAppId - A list of verticals which are in this order separated by “ ,“:(stores app id, bookings app_id, ...) .
     * @property {GUID} checkoutId - checkout_id
     * @property {string} couponCode - null
     * @property {string} couponId - coupon_id
     * @property {boolean} isMember - null
     * @property {boolean} isOwner - true if visitor is the site owner
     * @property {string} itemType - List of distinct checkout.lineItems.itemType
     * @property {number} numberOfAdditionalFees - number of all additional fees in the cart/order
     * @property {string} origin - null
     * @property {GUID} owner_id - uuid of site owner
     **/
    /**
     * Name: Checkout > Remove a coupon. Evid: 118.
    
    
     * additionalFeesPrice - Type: numeric. Desc: INT, multiplied by 100 000 - sum of all additional fees price in cart/order
     *
     * appName - Type: string.
     *
     * cartId - Type: guid. Desc: cart_id
     *
     * catalogAppId - Type: string. Desc: A list of verticals which are in this order separated by “ ,“:(stores app id, bookings app_id, ...) .
     *
     * checkoutId - Type: guid. Desc: checkout_id
     *
     * couponCode - Type: string.
     *
     * couponId - Type: string. Desc: coupon_id
     *
     * isMember - Type: bool.
     *
     * isOwner - Type: bool. Desc: true if visitor is the site owner
     *
     * itemType - Type: string. Desc: List of distinct checkout.lineItems.itemType
     *
     * numberOfAdditionalFees - Type: numeric. Desc: number of all additional fees in the cart/order
     *
     * origin - Type: string.
     *
     * owner_id - Type: guid. Desc: uuid of site owner
     * @param {removeACouponParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.removeACoupon = function(params) {
        return this.bi.log(__assign({
            evid: 118
        }, params));
    };
    /**
     * @typedef {Object} checkoutPageLoadParams
     * @property {number} additionalFeesPrice - INT, multiplied by 100 000 - sum of all additional fees price in order
     * @property {string} appName - app_name
     * @property {string} buyerLanguage - buyer Language
     * @property {GUID} cartId - cart_id
     * @property {string} cartType - Digital/ Physical/ mixed (Digital &Physical)
     * @property {string} catalogAppId - A list of verticals which are in this order separated by “ ,“:(stores app id, bookings app_id, ...) .
     * @property {string} channelType - what is the channel type
     * @property {GUID} checkoutId - checkout_id
     * @property {string} checkoutType - in viewer / out of viewer
     * @property {string} contactId - Buyer's contact ID. take from: Checkout.Chekout object.buyerInfo.contactId
     * @property {string} customFieldsTitle - title of custom field (can be a list if there is more than one field
     * @property {number} dintinctNumItems - count distinct item_id
     * @property {string} dintinctNumItemsPerCatalog - Json - sum of total count distinct item_id per catalog - example: {“stores”: 2, “bookings”: 3}
     * @property {string} first_stage - first stage open in checkout page
     * @property {string} flowType - 'quick flow' / 'full flow'
     * @property {boolean} isBuyNowPayLaterOption - is buy now pay later option exist
     * @property {boolean} isBuyerNote - does a buyes note exist
     * @property {boolean} isCalculationErrors - does calculation errors exist
     * @property {boolean} isDiscountPriceSummary - does discount exist in price summary
     * @property {boolean} isGiftCard - does gift card is available in the checkout
     * @property {boolean} is_member - true if the visitor signed in as a member, false otherwise
     * @property {boolean} isOwner - true if visitor is the site owner
     * @property {boolean} isPolicy - has policies in checkout
     * @property {boolean} is_promo_code - is promo code (coupon) option visible in the cart & checkout
     * @property {boolean} isShippingPriceSummary - does shipping exist in price summary
     * @property {boolean} isTaxPriceSummary - does tax exist in price summary
     * @property {boolean} is_with_ewallet_payment - does the store has an ewallet payment connected
     * @property {boolean} is_with_offline_payment - does the store has an offline payment connected
     * @property {string} itemType - List of distinct checkout.lineItems.itemType
     * @property {number} itemsQuantity - sum of total items quantity
     * @property {string} itemsQuantityPerCatalog - Json - sum of total items quantity per catalog - example: {“stores”: 9, “bookings”: 7}
     * @property {number} numLineItems - total number of line items
     * @property {string} numLineItemsPerCatalog - Json - number of line items per catalog - example: {“stores”: 3, “bookings”: 4}
     * @property {number} num_of_paymet_providers - How many payment providers does the site has connected
     * @property {number} num_of_shipping - number of shipping choices presented to the visitor
     * @property {number} numberOfAdditionalFees - number of all additional fees in the order
     * @property {string} origin - the component / page that the visitor came from to the checkout, like product page, cart page, etc.
     * @property {string} originType - the type of flow that lead to the checkout, like buy now, paypal, etc.
     * @property {GUID} owner_id - uuid of site owner
     * @property {string} paymentProviders - array of payment providers connected to the site
     * @property {string} paymet_providers - array of payment providers connected to the site
     * @property {boolean} savedAddress - true if the member has saved address
     * @property {string} selectedCarrierServiceOption - Taken from: Checkout.Chekout object.Shipping Info.selectedCarrierServiceOption
     * @property {string} selectedDeliveryOption - what was the selected delivery option.
     * @property {string} shippingCity - buyer city when viewing the checkout.
     * @property {string} shippingCountry - buyer country code when viewing the checkout
     * @property {string} shippingMethodType - what are the shipping option that are presented(shipping /store pickup / none)
     * @property {string} siteLanguage - site Language
     **/
    /**
     * Name: Checkout -> Checkout page load. Evid: 36.
     * Event description: this event indicates witch "checkout page" was presented to the user. there are 6 types that depends on: 1.cart_type : Digital/ Physical/ mixed (Digital &Physical)  2. shipping method : shipping /store pickup / non. 3. flow_type: quick / full.
    
     * additionalFeesPrice - Type: numeric. Desc: INT, multiplied by 100 000 - sum of all additional fees price in order
     *
     * appName - Type: string. Desc: app_name
     *
     * buyerLanguage - Type: string. Desc: buyer Language
     *
     * cartId - Type: guid. Desc: cart_id
     *
     * cartType - Type: string. Desc: Digital/ Physical/ mixed (Digital &Physical)
     *
     * catalogAppId - Type: string. Desc: A list of verticals which are in this order separated by “ ,“:(stores app id, bookings app_id, ...) .
     *
     * channelType - Type: string. Desc: what is the channel type
     *
     * checkoutId - Type: guid. Desc: checkout_id
     *
     * checkoutType - Type: string. Desc: in viewer / out of viewer
     *
     * contactId - Type: string. Desc: Buyer's contact ID. take from: Checkout.Chekout object.buyerInfo.contactId
     *
     * customFieldsTitle - Type: string. Desc: title of custom field (can be a list if there is more than one field
     *
     * dintinctNumItems - Type: numeric. Desc: count distinct item_id
     *
     * dintinctNumItemsPerCatalog - Type: string. Desc: Json - sum of total count distinct item_id per catalog - example: {“stores”: 2, “bookings”: 3}
     *
     * first_stage - Type: string. Desc: first stage open in checkout page
     *
     * flowType - Type: string. Desc: 'quick flow' / 'full flow'
     *
     * isBuyNowPayLaterOption - Type: bool. Desc: is buy now pay later option exist
     *
     * isBuyerNote - Type: bool. Desc: does a buyes note exist
     *
     * isCalculationErrors - Type: bool. Desc: does calculation errors exist
     *
     * isDiscountPriceSummary - Type: bool. Desc: does discount exist in price summary
     *
     * isGiftCard - Type: bool. Desc: does gift card is available in the checkout
     *
     * is_member - Type: bool. Desc: true if the visitor signed in as a member, false otherwise
     *
     * isOwner - Type: bool. Desc: true if visitor is the site owner
     *
     * isPolicy - Type: bool. Desc: has policies in checkout
     *
     * is_promo_code - Type: bool. Desc: is promo code (coupon) option visible in the cart & checkout
     *
     * isShippingPriceSummary - Type: bool. Desc: does shipping exist in price summary
     *
     * isTaxPriceSummary - Type: bool. Desc: does tax exist in price summary
     *
     * is_with_ewallet_payment - Type: bool. Desc: does the store has an ewallet payment connected
     *
     * is_with_offline_payment - Type: bool. Desc: does the store has an offline payment connected
     *
     * itemType - Type: string. Desc: List of distinct checkout.lineItems.itemType
     *
     * itemsQuantity - Type: numeric. Desc: sum of total items quantity
     *
     * itemsQuantityPerCatalog - Type: string. Desc: Json - sum of total items quantity per catalog - example: {“stores”: 9, “bookings”: 7}
     *
     * numLineItems - Type: numeric. Desc: total number of line items
     *
     * numLineItemsPerCatalog - Type: string. Desc: Json - number of line items per catalog - example: {“stores”: 3, “bookings”: 4}
     *
     * num_of_paymet_providers - Type: numeric. Desc: How many payment providers does the site has connected
     *
     * num_of_shipping - Type: numeric. Desc: number of shipping choices presented to the visitor
     *
     * numberOfAdditionalFees - Type: numeric. Desc: number of all additional fees in the order
     *
     * origin - Type: string. Desc: the component / page that the visitor came from to the checkout, like product page, cart page, etc.
     *
     * originType - Type: string. Desc: the type of flow that lead to the checkout, like buy now, paypal, etc.
     *
     * owner_id - Type: guid. Desc: uuid of site owner
     *
     * paymentProviders - Type: string. Desc: array of payment providers connected to the site
     *
     * paymet_providers - Type: string. Desc: array of payment providers connected to the site
     *
     * savedAddress - Type: bool. Desc: true if the member has saved address
     *
     * selectedCarrierServiceOption - Type: string. Desc: Taken from: Checkout.Chekout object.Shipping Info.selectedCarrierServiceOption
     *
     * selectedDeliveryOption - Type: string. Desc: what was the selected delivery option.
     *
     * shippingCity - Type: string. Desc: buyer city when viewing the checkout.
     *
     * shippingCountry - Type: string. Desc: buyer country code when viewing the checkout
     *
     * shippingMethodType - Type: string. Desc: what are the shipping option that are presented(shipping /store pickup / none)
     *
     * siteLanguage - Type: string. Desc: site Language
     * @param {checkoutPageLoadParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.checkoutPageLoad = function(params) {
        return this.bi.log(__assign({
            evid: 36
        }, params));
    };
    /**
     * @typedef {Object} clickLogoutInCheckoutParams
     * @property {number} additionalFeesPrice - INT, multiplied by 100 000 - sum of all additional fees price in order
     * @property {string} appName - app_name
     * @property {GUID} cartId - cart_id
     * @property {string} cartType - Digital/ Physical/ mixed (Digital &Physical)
     * @property {string} catalogAppId - A list of verticals which are in this order separated by “ ,“:(stores app id, bookings app_id, ...) .
     * @property {GUID} checkoutId - checkout_id
     * @property {string} flowType - 'quick flow' / 'full flow'
     * @property {boolean} is_member - true if the visitor signed in as a member, false otherwise
     * @property {string} itemType - List of distinct checkout.lineItems.itemType
     * @property {number} numberOfAdditionalFees - number of all additional fees in the order
     * @property {GUID} owner_id - null
     * @property {boolean} savedAddress - true if the member has saved address
     **/
    /**
     * Name: Checkout -> click logout in checkout. Evid: 601.
     * Event description: when site member clicks to logout in checkout, opening logout modal.
    
     * additionalFeesPrice - Type: numeric. Desc: INT, multiplied by 100 000 - sum of all additional fees price in order
     *
     * appName - Type: string. Desc: app_name
     *
     * cartId - Type: guid. Desc: cart_id
     *
     * cartType - Type: string. Desc: Digital/ Physical/ mixed (Digital &Physical)
     *
     * catalogAppId - Type: string. Desc: A list of verticals which are in this order separated by “ ,“:(stores app id, bookings app_id, ...) .
     *
     * checkoutId - Type: guid. Desc: checkout_id
     *
     * flowType - Type: string. Desc: 'quick flow' / 'full flow'
     *
     * is_member - Type: bool. Desc: true if the visitor signed in as a member, false otherwise
     *
     * itemType - Type: string. Desc: List of distinct checkout.lineItems.itemType
     *
     * numberOfAdditionalFees - Type: numeric. Desc: number of all additional fees in the order
     *
     * owner_id - Type: guid.
     *
     * savedAddress - Type: bool. Desc: true if the member has saved address
     * @param {clickLogoutInCheckoutParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.clickLogoutInCheckout = function(params) {
        return this.bi.log(__assign({
            evid: 601
        }, params));
    };
    /**
     * @typedef {Object} thankYouPageClickOnLinkOnLineItemParams
     * @property {string} appName - app_name
     * @property {GUID} cartId - cart_id
     * @property {string} catalogAppId - A list of verticals which are in this order separated by “ ,“:(stores app id, bookings app_id, ...) .
     * @property {string} catalogItemId - order.lineItems.catalogReference.catalogItemId
     * @property {string} checkoutId - Order.checkoutId
     * @property {string} itemType - Order.lineItems.itemType
     * @property {string} actionName - Action name (download/print/add to calendar..)
     * @property {string} orderId - orderId
     **/
    /**
     * Name: Thank you page -> click on link on line item. Evid: 175.
     * Event description: When the buyer clicks on one of the item’s links on Thank you page.
    
     * appName - Type: string. Desc: app_name
     *
     * cartId - Type: guid. Desc: cart_id
     *
     * catalogAppId - Type: string. Desc: A list of verticals which are in this order separated by “ ,“:(stores app id, bookings app_id, ...) .
     *
     * catalogItemId - Type: string. Desc: order.lineItems.catalogReference.catalogItemId
     *
     * checkoutId - Type: string. Desc: Order.checkoutId
     *
     * itemType - Type: string. Desc: Order.lineItems.itemType
     *
     * actionName - Type: string. Desc: Action name (download/print/add to calendar..)
     *
     * orderId - Type: string. Desc: orderId
     * @param {thankYouPageClickOnLinkOnLineItemParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.thankYouPageClickOnLinkOnLineItem = function(params) {
        return this.bi.log(__assign({
            evid: 175
        }, params));
    };
    /**
     * @typedef {Object} storesScreenRenderedOaParams
     * @property {string} catalogAppId - A list of verticals which are in this order separated by “ ,“:(stores app id, bookings app_id, ...)
     * @property {boolean} hasPaymentMethod - for orders screen - true if user has at least one payment method connected
     * @property {boolean} isOwner - true for merchant, false for member
     * @property {boolean} isPremium - for orders screen. true if user is premium (and do not see a bunner to upgrade)
     * @property {string} origin - merchantView / memberView / oneAppDashboard
     * @property {GUID} owner_id - id of site's owner
     * @property {string} pageName - current rendered page (products, orders, product, product_new, order, dashboard, settings, shipping..., tax...)/ cannot_sell / view_store /local delivery / local delivery areas
     * @property {string} paymentStatus - paymentStatus
     * @property {string} previousPage - where the user came from (stores_home - for tabs in StoresHome, previous page_name for others)
     * @property {GUID} id - order id
     * @property {string} state - full/empty/filtered
     **/
    /**
     * Name: Stores screen rendered OA. Evid: 212.
     * Event description: when specific stores screen(product_list, order_list, product, product_new, order) was rendered OneApp. is not sent for rendering coupons.
    
     * catalogAppId - Type: string. Desc: A list of verticals which are in this order separated by “ ,“:(stores app id, bookings app_id, ...)
     *
     * hasPaymentMethod - Type: bool. Desc: for orders screen - true if user has at least one payment method connected
     *
     * isOwner - Type: bool. Desc: true for merchant, false for member
     *
     * isPremium - Type: bool. Desc: for orders screen. true if user is premium (and do not see a bunner to upgrade)
     *
     * origin - Type: string. Desc: merchantView / memberView / oneAppDashboard
     *
     * owner_id - Type: guid. Desc: id of site's owner
     *
     * pageName - Type: string. Desc: current rendered page (products, orders, product, product_new, order, dashboard, settings, shipping..., tax...)/ cannot_sell / view_store /local delivery / local delivery areas
     *
     * paymentStatus - Type: string. Desc: paymentStatus
     *
     * previousPage - Type: string. Desc: where the user came from (stores_home - for tabs in StoresHome, previous page_name for others)
     *
     * id - Type: guid. Desc: order id
     *
     * state - Type: string. Desc: full/empty/filtered
     * @param {storesScreenRenderedOaParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.storesScreenRenderedOa = function(params) {
        return this.bi.log(__assign({
            evid: 212
        }, params));
    };
    /**
     * @typedef {Object} clickOnContinueShoppingFromCartParams
     * @property {number} additionalFeesPrice - number of all additional fees in the order
     * @property {string} appName - app_name
     * @property {GUID} cartId - cart_id
     * @property {string} catalogAppId - A list of verticals which are in this order separated by “ ,“:(stores app id, bookings app_id, ...) .
     * @property {GUID} checkoutId - checkout_id
     * @property {string} itemType - List of distinct checkout.lineItems.itemType
     * @property {number} numberOfAdditionalFees - number of all additional fees in the order
     * @property {string} origin - from cart/checkout page
     **/
    /**
     * Name: Checkout -> Click on continue shopping from checkout/cart. Evid: 120.
     * Event description: Click on continue shopping from checkout/cart.
    
     * additionalFeesPrice - Type: numeric. Desc: number of all additional fees in the order
     *
     * appName - Type: string. Desc: app_name
     *
     * cartId - Type: guid. Desc: cart_id
     *
     * catalogAppId - Type: string. Desc: A list of verticals which are in this order separated by “ ,“:(stores app id, bookings app_id, ...) .
     *
     * checkoutId - Type: guid. Desc: checkout_id
     *
     * itemType - Type: string. Desc: List of distinct checkout.lineItems.itemType
     *
     * numberOfAdditionalFees - Type: numeric. Desc: number of all additional fees in the order
     *
     * origin - Type: string. Desc: from cart/checkout page
     * @param {clickOnContinueShoppingFromCartParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.clickOnContinueShoppingFromCart = function(params) {
        return this.bi.log(__assign({
            evid: 120
        }, params));
    };
    /**
     * @typedef {Object} cartCartIconLoadedParams
     * @property {string} appName - app_name
     * @property {string} catalogAppId - A list of verticals which are in this cart separated by “ ,“:(stores app id, bookings app_id, ...)
     * @property {boolean} isMobileFriendly - true if mobile friendly, false otherwise
     * @property {string} navigationClick - mini cart / cart page
     **/
    /**
     * Name: Cart -> Cart Icon Loaded. Evid: 546.
     * Event description: when user clicks on tabs inside orders / products widget in OneApp dashboard.
    
     * appName - Type: string. Desc: app_name
     *
     * catalogAppId - Type: string. Desc: A list of verticals which are in this cart separated by “ ,“:(stores app id, bookings app_id, ...)
     *
     * isMobileFriendly - Type: bool. Desc: true if mobile friendly, false otherwise
     *
     * navigationClick - Type: string. Desc: mini cart / cart page
     * @param {cartCartIconLoadedParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.cartCartIconLoaded = function(params) {
        return this.bi.log(__assign({
            evid: 546
        }, params));
    };
    /**
     * @typedef {Object} cartShowMerchantShippingPopupParams
     * @property {string} appName - app_name
     * @property {string} catalogAppId - A list of verticals which are in this cart separated by “ ,“:(stores app id, bookings app_id, ...)
     * @property {string} mode - mode
     * @property {string} origin - where the modal pops up (cart / product page...)
     * @property {string} type - merchant pop-up / buyer pop-up
     **/
    /**
     * Name: Cart -> Show merchant shipping popup. Evid: 173.
     * Event description: Show shipping popup - no shipping rule for destination.
    
     * appName - Type: string. Desc: app_name
     *
     * catalogAppId - Type: string. Desc: A list of verticals which are in this cart separated by “ ,“:(stores app id, bookings app_id, ...)
     *
     * mode - Type: string. Desc: mode
     *
     * origin - Type: string. Desc: where the modal pops up (cart / product page...)
     *
     * type - Type: string. Desc: merchant pop-up / buyer pop-up
     * @param {cartShowMerchantShippingPopupParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.cartShowMerchantShippingPopup = function(params) {
        return this.bi.log(__assign({
            evid: 173
        }, params));
    };
    /**
     * @typedef {Object} clickPlaceOrderParams
     * @property {number} additionalFeesPrice - INT, multiplied by 100 000 - sum of all additional fees price in order
     * @property {string} appName - app_name
     * @property {string} buyerLanguage - buyer Language
     * @property {GUID} cartId - cart_id
     * @property {string} cartType - null
     * @property {string} catalogAppId - catalog_app_id
     * @property {string} channelType - what is the channel type
     * @property {GUID} checkoutId - checkout_id
     * @property {string} checkoutType - in viewer / out of viewer
     * @property {string} contactId - Buyer's contact ID. taken from: Checkout.Chekout object.buyerInfo.contactId
     * @property {string} couponCode - coupon_code
     * @property {boolean} customFieldMandatory - true - if custom field was mandatory on checkout
     * @property {string} customFieldsTitle - title of custom field (can be a list if there is more than one field
     * @property {number} dintinctNumItems - count distinct item_id
     * @property {string} distinctNumItemsPerCatalog - Json - sum of total count distinct item_id per catalog - example: {“stores”: 2, “bookings”: 3}
     * @property {string} first_stage - first stage open in checkout page
     * @property {string} flowType - 'quick flow' / 'full flow'
     * @property {string} giftCardCode - null
     * @property {string} giftCardId - gift_card_id
     * @property {boolean} hasCustomField - null
     * @property {boolean} hasPaymentMethod - true / false
     * @property {boolean} isBuyNowPayLaterOption - is buy now pay later option exist
     * @property {boolean} isBuyerNote - does a buyes note exist
     * @property {boolean} isCalculationErrors - does calculation errors exist
     * @property {boolean} isCouponPriceSummary - does coupon exist in price summary
     * @property {boolean} isDiscountPriceSummary - does discount (any kind of discount)  exist in price summary
     * @property {boolean} isDiscountRulePriceSummary - does discount rule exist in price summary
     * @property {boolean} isGiftCard - does gift card is available in the checkout
     * @property {boolean} is_member - null
     * @property {boolean} isOwner - true if visitor is the site owner
     * @property {boolean} isPolicy - has policies in checkout
     * @property {boolean} isPremium - null
     * @property {boolean} is_promo_code - is promo code (coupon) option visible in the cart & checkout
     * @property {boolean} isShippingPriceSummary - does shipping exist in price summary
     * @property {boolean} isTaxPriceSummary - does tax exist in price summary
     * @property {boolean} is_with_ewallet_payment - does the site has an ewallet payment connected
     * @property {boolean} is_with_offline_payment - does the site has an offline payment connected
     * @property {string} itemType - List of distinct checkout.lineItems.itemType
     * @property {number} itemsQuantity - sum of total items quantity
     * @property {string} itemsQuantityPerCatalog - Json - sum of total items quantity per catalog - example: {“stores”: 9, “bookings”: 7}
     * @property {string} numLineItemsPerCatalog - Json - number of line items per catalog - example: {“stores”: 3, “bookings”: 4}
     * @property {number} numOfLineItems - number of line items (# of products) in cart included the product just added
     * @property {number} num_of_paymet_providers - How many payment providers does the site has connected
     * @property {number} num_of_shipping - number of shipping choices presented to the visitor
     * @property {number} numberOfAdditionalFees - number of all additional fees in the order
     * @property {string} origin - the component / page that the visitor came from to the checkout, like product page, cart page, etc.
     * @property {string} originType - the type of flow that lead to the checkout, like buy now, paypal, etc.
     * @property {GUID} owner_id - null
     * @property {string} paymentMethod - authorize-net/Stripe
     * @property {string} paymet_providers - array of payment providers connected to the store site
     * @property {boolean} savedAddress - true if the member has saved address
     * @property {string} selectedCarrierServiceOption - Take from: Checkout.Chekout object.Shipping Info.selectedCarrierServiceOption
     * @property {string} selectedDeliveryOption - what was the selected delivery option
     * @property {string} shippingCity - buyer city. Take from: Checkout.Chekout object.Shipping Info. shipping destenation.address.city
     * @property {string} shippingCountry - buyer country code. Take from: Checkout.Chekout object.Shipping Info. shipping destenation.address.country
     * @property {string} shippingMethodType - what was the selected shipping option (shipping /store pickup / none)
     * @property {string} siteLanguage - site Language
     * @property {GUID} siteMemberId - null
     **/
    /**
     * Name: Checkout -> Click Place order. Evid: 168.
     * Event description: click on place order (client event). since june 2019 also from OneApp (leads to cashier screen to choose payment method and pay).
    
     * additionalFeesPrice - Type: numeric. Desc: INT, multiplied by 100 000 - sum of all additional fees price in order
     *
     * appName - Type: string. Desc: app_name
     *
     * buyerLanguage - Type: string. Desc: buyer Language
     *
     * cartId - Type: guid. Desc: cart_id
     *
     * cartType - Type: string.
     *
     * catalogAppId - Type: string. Desc: catalog_app_id
     *
     * channelType - Type: string. Desc: what is the channel type
     *
     * checkoutId - Type: guid. Desc: checkout_id
     *
     * checkoutType - Type: string. Desc: in viewer / out of viewer
     *
     * contactId - Type: string. Desc: Buyer's contact ID. taken from: Checkout.Chekout object.buyerInfo.contactId
     *
     * couponCode - Type: string. Desc: coupon_code
     *
     * customFieldMandatory - Type: bool. Desc: true - if custom field was mandatory on checkout
     *
     * customFieldsTitle - Type: string. Desc: title of custom field (can be a list if there is more than one field
     *
     * dintinctNumItems - Type: numeric. Desc: count distinct item_id
     *
     * distinctNumItemsPerCatalog - Type: string. Desc: Json - sum of total count distinct item_id per catalog - example: {“stores”: 2, “bookings”: 3}
     *
     * first_stage - Type: string. Desc: first stage open in checkout page
     *
     * flowType - Type: string. Desc: 'quick flow' / 'full flow'
     *
     * giftCardCode - Type: string.
     *
     * giftCardId - Type: string. Desc: gift_card_id
     *
     * hasCustomField - Type: bool.
     *
     * hasPaymentMethod - Type: bool. Desc: true / false
     *
     * isBuyNowPayLaterOption - Type: bool. Desc: is buy now pay later option exist
     *
     * isBuyerNote - Type: bool. Desc: does a buyes note exist
     *
     * isCalculationErrors - Type: bool. Desc: does calculation errors exist
     *
     * isCouponPriceSummary - Type: bool. Desc: does coupon exist in price summary
     *
     * isDiscountPriceSummary - Type: bool. Desc: does discount (any kind of discount)  exist in price summary
     *
     * isDiscountRulePriceSummary - Type: bool. Desc: does discount rule exist in price summary
     *
     * isGiftCard - Type: bool. Desc: does gift card is available in the checkout
     *
     * is_member - Type: bool.
     *
     * isOwner - Type: bool. Desc: true if visitor is the site owner
     *
     * isPolicy - Type: bool. Desc: has policies in checkout
     *
     * isPremium - Type: bool.
     *
     * is_promo_code - Type: bool. Desc: is promo code (coupon) option visible in the cart & checkout
     *
     * isShippingPriceSummary - Type: bool. Desc: does shipping exist in price summary
     *
     * isTaxPriceSummary - Type: bool. Desc: does tax exist in price summary
     *
     * is_with_ewallet_payment - Type: bool. Desc: does the site has an ewallet payment connected
     *
     * is_with_offline_payment - Type: bool. Desc: does the site has an offline payment connected
     *
     * itemType - Type: string. Desc: List of distinct checkout.lineItems.itemType
     *
     * itemsQuantity - Type: numeric. Desc: sum of total items quantity
     *
     * itemsQuantityPerCatalog - Type: string. Desc: Json - sum of total items quantity per catalog - example: {“stores”: 9, “bookings”: 7}
     *
     * numLineItemsPerCatalog - Type: string. Desc: Json - number of line items per catalog - example: {“stores”: 3, “bookings”: 4}
     *
     * numOfLineItems - Type: numeric. Desc: number of line items (# of products) in cart included the product just added
     *
     * num_of_paymet_providers - Type: numeric. Desc: How many payment providers does the site has connected
     *
     * num_of_shipping - Type: numeric. Desc: number of shipping choices presented to the visitor
     *
     * numberOfAdditionalFees - Type: numeric. Desc: number of all additional fees in the order
     *
     * origin - Type: string. Desc: the component / page that the visitor came from to the checkout, like product page, cart page, etc.
     *
     * originType - Type: string. Desc: the type of flow that lead to the checkout, like buy now, paypal, etc.
     *
     * owner_id - Type: guid.
     *
     * paymentMethod - Type: string. Desc: authorize-net/Stripe
     *
     * paymet_providers - Type: string. Desc: array of payment providers connected to the store site
     *
     * savedAddress - Type: bool. Desc: true if the member has saved address
     *
     * selectedCarrierServiceOption - Type: string. Desc: Take from: Checkout.Chekout object.Shipping Info.selectedCarrierServiceOption
     *
     * selectedDeliveryOption - Type: string. Desc: what was the selected delivery option
     *
     * shippingCity - Type: string. Desc: buyer city. Take from: Checkout.Chekout object.Shipping Info. shipping destenation.address.city
     *
     * shippingCountry - Type: string. Desc: buyer country code. Take from: Checkout.Chekout object.Shipping Info. shipping destenation.address.country
     *
     * shippingMethodType - Type: string. Desc: what was the selected shipping option (shipping /store pickup / none)
     *
     * siteLanguage - Type: string. Desc: site Language
     *
     * siteMemberId - Type: guid.
     * @param {clickPlaceOrderParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.clickPlaceOrder = function(params) {
        return this.bi.log(__assign({
            evid: 168
        }, params));
    };
    /**
     * @typedef {Object} giftCardCheckoutClickOnCheckboxParams
     * @property {number} additionalFeesPrice - INT, multiplied by 100 000 - sum of all additional fees price in order
     * @property {string} appName - null
     * @property {GUID} cartId - cart_id
     * @property {string} catalogAppId - A list of verticals which are in this order separated by “ ,“:(stores app id, bookings app_id, ...) .
     * @property {GUID} checkoutId - checkout_id
     * @property {boolean} isMember - true if visitor is member
     * @property {string} itemType - List of distinct checkout.lineItems.itemType
     * @property {number} numberOfAdditionalFees - number of all additional fees in the order
     * @property {string} value - behavior type. in the old checkout - unchecked/check. in the new checkout - null (no checkbox action)
     **/
    /**
     * Name: gift card checkout -> click on checkbox / Click on "Redeem a Gift Card". Evid: 527.
     * Event description: in the old checkout - when a visitor checks / unchecks the Gift Card checkbox in the Payment stage. in the new checkout (out of Iframe) -  when a visitor clicks on "Redeem a gift card" (first step of applying gift card). Notice - the old flow have both the opinion to check/uncheck gift card. the new only have click to open the flow (without closing)..
    
     * additionalFeesPrice - Type: numeric. Desc: INT, multiplied by 100 000 - sum of all additional fees price in order
     *
     * appName - Type: string.
     *
     * cartId - Type: guid. Desc: cart_id
     *
     * catalogAppId - Type: string. Desc: A list of verticals which are in this order separated by “ ,“:(stores app id, bookings app_id, ...) .
     *
     * checkoutId - Type: guid. Desc: checkout_id
     *
     * isMember - Type: bool. Desc: true if visitor is member
     *
     * itemType - Type: string. Desc: List of distinct checkout.lineItems.itemType
     *
     * numberOfAdditionalFees - Type: numeric. Desc: number of all additional fees in the order
     *
     * value - Type: string. Desc: behavior type. in the old checkout - unchecked/check. in the new checkout - null (no checkbox action)
     * @param {giftCardCheckoutClickOnCheckboxParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.giftCardCheckoutClickOnCheckbox = function(params) {
        return this.bi.log(__assign({
            evid: 527
        }, params));
    };
    /**
     * @typedef {Object} couponAppliedParams
     * @property {string} appName - null
     * @property {GUID} cartId - null
     * @property {string} catalogAppId - A list of verticals which are in this order separated by “ ,“:(stores app id, bookings app_id, ...) .
     * @property {GUID} checkoutId - checkout_id
     * @property {string} name - null
     * @property {string} couponCode - null
     * @property {string} couponId - null
     * @property {boolean} isMember - null
     * @property {boolean} isOwner - null
     * @property {string} itemType - List of distinct checkout.lineItems.itemType
     * @property {string} origin - null
     * @property {GUID} owner_id - null
     * @property {number} total_long - null
     * @property {string} type - null
     **/
    /**
     * Name: Checkout -> Coupon applied. Evid: 119.
    
    
     * appName - Type: string.
     *
     * cartId - Type: guid.
     *
     * catalogAppId - Type: string. Desc: A list of verticals which are in this order separated by “ ,“:(stores app id, bookings app_id, ...) .
     *
     * checkoutId - Type: guid. Desc: checkout_id
     *
     * name - Type: string.
     *
     * couponCode - Type: string.
     *
     * couponId - Type: string.
     *
     * isMember - Type: bool.
     *
     * isOwner - Type: bool.
     *
     * itemType - Type: string. Desc: List of distinct checkout.lineItems.itemType
     *
     * origin - Type: string.
     *
     * owner_id - Type: guid.
     *
     * total_long - Type: numeric.
     *
     * type - Type: string.
     * @param {couponAppliedParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.couponApplied = function(params) {
        return this.bi.log(__assign({
            evid: 119
        }, params));
    };
    /**
     * @typedef {Object} clickOnReturnToCheckoutInLogoutModalParams
     * @property {number} additionalFeesPrice - INT, multiplied by 100 000 - sum of all additional fees price in order
     * @property {string} appName - null
     * @property {GUID} cartId - null
     * @property {string} cartType - Digital/ Physical/ mixed (Digital &Physical)
     * @property {string} catalogAppId - A list of verticals which are in this order separated by “ ,“:(stores app id, bookings app_id, ...) .
     * @property {GUID} checkoutId - checkout_id
     * @property {string} flowType - 'quick flow' / 'full flow'
     * @property {boolean} is_member - true if the visitor signed in as a member, false otherwise
     * @property {string} itemType - List of distinct checkout.lineItems.itemType
     * @property {number} numberOfAdditionalFees - number of all additional fees in the order
     * @property {boolean} savedAddress - true if the member has saved address
     * @property {GUID} siteMemberId - member id
     **/
    /**
     * Name: Checkout -> Click on return to checkout in logout modal. Evid: 603.
     * Event description: buyer clicks on "return to checkout" or X in logout modal in checkout to close it.
    
     * additionalFeesPrice - Type: numeric. Desc: INT, multiplied by 100 000 - sum of all additional fees price in order
     *
     * appName - Type: string.
     *
     * cartId - Type: guid.
     *
     * cartType - Type: string. Desc: Digital/ Physical/ mixed (Digital &Physical)
     *
     * catalogAppId - Type: string. Desc: A list of verticals which are in this order separated by “ ,“:(stores app id, bookings app_id, ...) .
     *
     * checkoutId - Type: guid. Desc: checkout_id
     *
     * flowType - Type: string. Desc: 'quick flow' / 'full flow'
     *
     * is_member - Type: bool. Desc: true if the visitor signed in as a member, false otherwise
     *
     * itemType - Type: string. Desc: List of distinct checkout.lineItems.itemType
     *
     * numberOfAdditionalFees - Type: numeric. Desc: number of all additional fees in the order
     *
     * savedAddress - Type: bool. Desc: true if the member has saved address
     *
     * siteMemberId - Type: guid. Desc: member id
     * @param {clickOnReturnToCheckoutInLogoutModalParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.clickOnReturnToCheckoutInLogoutModal = function(params) {
        return this.bi.log(__assign({
            evid: 603
        }, params));
    };
    /**
     * @typedef {Object} deliveryMethodSetParams
     * @property {number} additionalFeesPrice - INT, multiplied by 100 000 - sum of all additional fees price in order
     * @property {string} appName - app_name
     * @property {GUID} cartId - cart_id
     * @property {string} cartType - Digital/ Physical/ mixed (Digital &Physical)
     * @property {string} catalogAppId - A list of verticals which are in this order separated by “ ,“:(stores app id, bookings app_id, ...) .
     * @property {GUID} checkoutId - checkout_id
     * @property {number} optionscount - number of payment options
     * @property {number} selectedoptionindex - index of selected option
     * @property {boolean} isOwner - true if visitor is the site owner
     * @property {string} itemType - List of distinct checkout.lineItems.itemType
     * @property {string} methodType - pickup/non-pickup
     * @property {number} numberOfAdditionalFees - number of all additional fees in the order
     * @property {string} orig_shipping_method - current shipping method in cart page (free shipping/ Flat rate/ rate by weight/ etc...)
     * @property {GUID} owner_id - uuid of site owner
     * @property {string} shippingRuleOptions - all the shipping types presented in the modal
     * @property {string} selectedoptiontype - type of option selected
     **/
    /**
     * Name: Checkout -> Delivery method set. Evid: 163.
     * Event description: Click on continue to payment (on web) since June 2019 also sent from OneApp (leads to "Review Order" (placeOrder) screen).
    
     * additionalFeesPrice - Type: numeric. Desc: INT, multiplied by 100 000 - sum of all additional fees price in order
     *
     * appName - Type: string. Desc: app_name
     *
     * cartId - Type: guid. Desc: cart_id
     *
     * cartType - Type: string. Desc: Digital/ Physical/ mixed (Digital &Physical)
     *
     * catalogAppId - Type: string. Desc: A list of verticals which are in this order separated by “ ,“:(stores app id, bookings app_id, ...) .
     *
     * checkoutId - Type: guid. Desc: checkout_id
     *
     * optionscount - Type: numeric. Desc: number of payment options
     *
     * selectedoptionindex - Type: numeric. Desc: index of selected option
     *
     * isOwner - Type: bool. Desc: true if visitor is the site owner
     *
     * itemType - Type: string. Desc: List of distinct checkout.lineItems.itemType
     *
     * methodType - Type: string. Desc: pickup/non-pickup
     *
     * numberOfAdditionalFees - Type: numeric. Desc: number of all additional fees in the order
     *
     * orig_shipping_method - Type: string. Desc: current shipping method in cart page (free shipping/ Flat rate/ rate by weight/ etc...)
     *
     * owner_id - Type: guid. Desc: uuid of site owner
     *
     * shippingRuleOptions - Type: string. Desc: all the shipping types presented in the modal
     *
     * selectedoptiontype - Type: string. Desc: type of option selected
     * @param {deliveryMethodSetParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.deliveryMethodSet = function(params) {
        return this.bi.log(__assign({
            evid: 163
        }, params));
    };
    /**
     * @typedef {Object} clickApplyCouponParams
     * @property {number} additionalFeesPrice - INT, multiplied by 100 000 - sum of all additional fees price in cart/order
     * @property {string} appName - app_name
     * @property {GUID} cartId - cart_id
     * @property {string} catalogAppId - A list of verticals which are in this order separated by “ ,“:(stores app id, bookings app_id, ...) .
     * @property {GUID} checkoutId - checkout_id
     * @property {string} couponCode - coupon_code
     * @property {boolean} isMember - true if visitor is member
     * @property {boolean} isOwner - true if visitor is the site owner
     * @property {string} itemType - List of distinct checkout.lineItems.itemType
     * @property {number} numberOfAdditionalFees - number of all additional fees in the cart/order
     * @property {string} origin - shopping cart / checkout
     * @property {GUID} owner_id - uuid of site owner
     **/
    /**
     * Name: Checkout > Click 'Apply' Coupon. Evid: 112.
     * Event description: after entering promo code click on Apply. since june 2019 can be sent also from OA StoreFront.
    
     * additionalFeesPrice - Type: numeric. Desc: INT, multiplied by 100 000 - sum of all additional fees price in cart/order
     *
     * appName - Type: string. Desc: app_name
     *
     * cartId - Type: guid. Desc: cart_id
     *
     * catalogAppId - Type: string. Desc: A list of verticals which are in this order separated by “ ,“:(stores app id, bookings app_id, ...) .
     *
     * checkoutId - Type: guid. Desc: checkout_id
     *
     * couponCode - Type: string. Desc: coupon_code
     *
     * isMember - Type: bool. Desc: true if visitor is member
     *
     * isOwner - Type: bool. Desc: true if visitor is the site owner
     *
     * itemType - Type: string. Desc: List of distinct checkout.lineItems.itemType
     *
     * numberOfAdditionalFees - Type: numeric. Desc: number of all additional fees in the cart/order
     *
     * origin - Type: string. Desc: shopping cart / checkout
     *
     * owner_id - Type: guid. Desc: uuid of site owner
     * @param {clickApplyCouponParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.clickApplyCoupon = function(params) {
        return this.bi.log(__assign({
            evid: 112
        }, params));
    };
    /**
     * @typedef {Object} giftCardCheckoutCodeAppliedParams
     * @property {number} additionalFeesPrice - INT, multiplied by 100 000 - sum of all additional fees price in order
     * @property {string} appName - null
     * @property {GUID} cartId - cart id
     * @property {string} catalogAppId - List of distinct checkout.lineItems.itemType
     * @property {GUID} checkoutId - checkout_id
     * @property {string} giftCardId - gift_card_id
     * @property {boolean} isCartPaidOnlyWithGiftCard - True if payments options are hidden due to gift card fully cover the payment (with coupon or without)
     * @property {boolean} isMember - true if visitor is member
     * @property {string} itemType - A list of verticals which are in this order separated by “ ,“:(stores app id, bookings app_id, ...) .
     * @property {number} numberOfAdditionalFees - number of all additional fees in the order
     **/
    /**
     * Name: gift card checkout -> code applied. Evid: 535.
     * Event description: when Gift Card Code was successfully applied in Payment stage of Checkout.
    
     * additionalFeesPrice - Type: numeric. Desc: INT, multiplied by 100 000 - sum of all additional fees price in order
     *
     * appName - Type: string.
     *
     * cartId - Type: guid. Desc: cart id
     *
     * catalogAppId - Type: string. Desc: List of distinct checkout.lineItems.itemType
     *
     * checkoutId - Type: guid. Desc: checkout_id
     *
     * giftCardId - Type: string. Desc: gift_card_id
     *
     * isCartPaidOnlyWithGiftCard - Type: bool. Desc: True if payments options are hidden due to gift card fully cover the payment (with coupon or without)
     *
     * isMember - Type: bool. Desc: true if visitor is member
     *
     * itemType - Type: string. Desc: A list of verticals which are in this order separated by “ ,“:(stores app id, bookings app_id, ...) .
     *
     * numberOfAdditionalFees - Type: numeric. Desc: number of all additional fees in the order
     * @param {giftCardCheckoutCodeAppliedParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.giftCardCheckoutCodeApplied = function(params) {
        return this.bi.log(__assign({
            evid: 535
        }, params));
    };
    /**
     * @typedef {Object} bisRequestIsAlreadyCreatedErrorParams
     * @property {GUID} appId - the app Id of the catalog
     * @property {string} catalogAppId - catalog app id
     * @property {GUID} catalogInstanceId - In case of stores (store_id)
     * @property {string} catalogItemId - The guid of the requested item (product_guid / service_id..)
     * @property {string} options - map of strings of the options chosen in the requested item
     **/
    /**
     * Name: BIS - Request is already created error. Evid: 27.
     * Event description: When a user clicks the submit button after a request is already made. and he gets an error for it.
    
     * appId - Type: guid. Desc: the app Id of the catalog
     *
     * catalogAppId - Type: string. Desc: catalog app id
     *
     * catalogInstanceId - Type: guid. Desc: In case of stores (store_id)
     *
     * catalogItemId - Type: string. Desc: The guid of the requested item (product_guid / service_id..)
     *
     * options - Type: string. Desc: map of strings of the options chosen in the requested item
     * @param {bisRequestIsAlreadyCreatedErrorParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bisRequestIsAlreadyCreatedError = function(params) {
        return this.bi.log(__assign({
            evid: 27
        }, params));
    };
    /**
     * @typedef {Object} removedProductFromCartSfParams
     * @property {number} additionalFeesPrice - INT, multiplied by 100 000 - sum of all additional fees price in cart
     * @property {string} appName - app_name
     * @property {GUID} cartId - cart id
     * @property {string} catalogAppId - A list of verticals which are in this cart separated by “ ,“:(stores app id, bookings app_id, ...)
     * @property {GUID} checkoutId - checkout_id
     * @property {number} itemsCount - origin
     * @property {number} numberOfAdditionalFees - number of all additional fees in the cart
     * @property {string} origin - number of items in the cart
     * @property {GUID} owner_id - id of site's owner. since june 2019
     * @property {string} productId - product_id
     * @property {string} productType - digital / physical
     **/
    /**
     * Name: Cart -> Removed product from cart SF. Evid: 115.
     * Event description: Removed product from cart SF. since june 2019 also for OneApp StoreFront (member view).
    
     * additionalFeesPrice - Type: numeric. Desc: INT, multiplied by 100 000 - sum of all additional fees price in cart
     *
     * appName - Type: string. Desc: app_name
     *
     * cartId - Type: guid. Desc: cart id
     *
     * catalogAppId - Type: string. Desc: A list of verticals which are in this cart separated by “ ,“:(stores app id, bookings app_id, ...)
     *
     * checkoutId - Type: guid. Desc: checkout_id
     *
     * itemsCount - Type: numeric. Desc: origin
     *
     * numberOfAdditionalFees - Type: numeric. Desc: number of all additional fees in the cart
     *
     * origin - Type: string. Desc: number of items in the cart
     *
     * owner_id - Type: guid. Desc: id of site's owner. since june 2019
     *
     * productId - Type: string. Desc: product_id
     *
     * productType - Type: string. Desc: digital / physical
     * @param {removedProductFromCartSfParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.removedProductFromCartSf = function(params) {
        return this.bi.log(__assign({
            evid: 115
        }, params));
    };
    /**
     * @typedef {Object} checkoutClickOnCallToActionInMerchantPopUpSfParams
     * @property {string} appName - app_name
     * @property {string} notificationType - payments/upgrade/shipping
     * @property {string} type - merchant pop-up / buyer pop-up
     **/
    /**
     * Name: Checkout -> click on call to action in merchant pop-up SF. Evid: 169.
     * Event description: click on call to action (upgrade / set payment) in merchant pop-up.
    
     * appName - Type: string. Desc: app_name
     *
     * notificationType - Type: string. Desc: payments/upgrade/shipping
     *
     * type - Type: string. Desc: merchant pop-up / buyer pop-up
     * @param {checkoutClickOnCallToActionInMerchantPopUpSfParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.checkoutClickOnCallToActionInMerchantPopUpSf = function(params) {
        return this.bi.log(__assign({
            evid: 169
        }, params));
    };
    /**
     * @typedef {Object} ordersClickInOrderHistoryPageSfParams
     * @property {string} appName - app_name
     * @property {string} click_type - go_shopping / track_order / download / view_invoice
     * @property {string} contact_id - contact_id
     * @property {string} orderId - orderId
     * @property {string} origin - order_history_page / order_details_page
     * @property {string} productId - only for click on "Track item" in order details page
     * @property {GUID} site_member_id - member id
     **/
    /**
     * Name: Orders -> click in order_history page  SF. Evid: 129.
     * Event description: UoU clicks that are coming from the order_history page.
    
     * appName - Type: string. Desc: app_name
     *
     * click_type - Type: string. Desc: go_shopping / track_order / download / view_invoice
     *
     * contact_id - Type: string. Desc: contact_id
     *
     * orderId - Type: string. Desc: orderId
     *
     * origin - Type: string. Desc: order_history_page / order_details_page
     *
     * productId - Type: string. Desc: only for click on "Track item" in order details page
     *
     * site_member_id - Type: guid. Desc: member id
     * @param {ordersClickInOrderHistoryPageSfParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.ordersClickInOrderHistoryPageSf = function(params) {
        return this.bi.log(__assign({
            evid: 129
        }, params));
    };
    /**
     * @typedef {Object} deleteNoteToSellerSfParams
     * @property {string} appName - app_name
     * @property {GUID} cartId - cart id
     * @property {string} catalogAppId - A list of verticals which are in this cart separated by “ ,“:(stores app id, bookings app_id, ...)
     * @property {GUID} checkoutId - checkout_id
     **/
    /**
     * Name: Cart -> Delete note to seller SF. Evid: 123.
     * Event description: buyer clicks on 'delete note to seller' in cart page.
    
     * appName - Type: string. Desc: app_name
     *
     * cartId - Type: guid. Desc: cart id
     *
     * catalogAppId - Type: string. Desc: A list of verticals which are in this cart separated by “ ,“:(stores app id, bookings app_id, ...)
     *
     * checkoutId - Type: guid. Desc: checkout_id
     * @param {deleteNoteToSellerSfParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.deleteNoteToSellerSf = function(params) {
        return this.bi.log(__assign({
            evid: 123
        }, params));
    };
    /**
     * @typedef {Object} clickOnShippingDestinationInCartPageSfParams
     * @property {string} appName - app_name
     * @property {GUID} cartId - null
     * @property {string} cartType - Digital/ Physical/ mixed (Digital &Physical)
     * @property {string} catalogAppId - A list of verticals which are in this cart separated by “ ,“:(stores app id, bookings app_id, ...)
     * @property {GUID} checkoutId - null
     * @property {string} shippingDestinationCountry - null
     * @property {string} shippingDestinationState - shipping destination state
     **/
    /**
     * Name: Cart -> Click on shipping destination in page SF. Evid: 223.
    
    
     * appName - Type: string. Desc: app_name
     *
     * cartId - Type: guid.
     *
     * cartType - Type: string. Desc: Digital/ Physical/ mixed (Digital &Physical)
     *
     * catalogAppId - Type: string. Desc: A list of verticals which are in this cart separated by “ ,“:(stores app id, bookings app_id, ...)
     *
     * checkoutId - Type: guid.
     *
     * shippingDestinationCountry - Type: string.
     *
     * shippingDestinationState - Type: string. Desc: shipping destination state
     * @param {clickOnShippingDestinationInCartPageSfParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.clickOnShippingDestinationInCartPageSf = function(params) {
        return this.bi.log(__assign({
            evid: 223
        }, params));
    };
    /**
     * @typedef {Object} membersClickChangeInCheckoutStagesParams
     * @property {number} additionalFeesPrice - INT, multiplied by 100 000 - sum of all additional fees price in order
     * @property {string} appName - app_name
     * @property {GUID} cartId - cart_id
     * @property {string} cartType - Digital/ Physical/ mixed (Digital &Physical)
     * @property {string} catalogAppId - A list of verticals which are in this order separated by “ ,“:(stores app id, bookings app_id, ...) .
     * @property {GUID} checkoutId - checkout_id
     * @property {string} itemType - List of distinct checkout.lineItems.itemType
     * @property {number} numberOfAdditionalFees - number of all additional fees in the order
     * @property {string} stage - which stage in the wishlist installation process
     **/
    /**
     * Name: members -> click 'change' in checkout stages. Evid: 46.
     * Event description: click to 'change' autofill info in the checkout process.
    
     * additionalFeesPrice - Type: numeric. Desc: INT, multiplied by 100 000 - sum of all additional fees price in order
     *
     * appName - Type: string. Desc: app_name
     *
     * cartId - Type: guid. Desc: cart_id
     *
     * cartType - Type: string. Desc: Digital/ Physical/ mixed (Digital &Physical)
     *
     * catalogAppId - Type: string. Desc: A list of verticals which are in this order separated by “ ,“:(stores app id, bookings app_id, ...) .
     *
     * checkoutId - Type: guid. Desc: checkout_id
     *
     * itemType - Type: string. Desc: List of distinct checkout.lineItems.itemType
     *
     * numberOfAdditionalFees - Type: numeric. Desc: number of all additional fees in the order
     *
     * stage - Type: string. Desc: which stage in the wishlist installation process
     * @param {membersClickChangeInCheckoutStagesParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.membersClickChangeInCheckoutStages = function(params) {
        return this.bi.log(__assign({
            evid: 46
        }, params));
    };
    /**
     * @typedef {Object} clickOnCheckoutWithEWalletParams
     * @property {number} additionalFeesPrice - INT, multiplied by 100 000 - sum of all additional fees price in cart
     * @property {string} appName - app_name
     * @property {GUID} cartId - null
     * @property {string} cartType - Digital/ Physical/ mixed (Digital &Physical)
     * @property {string} catalogAppId - A list of verticals which are in this cart separated by “ ,“:(stores app id, bookings app_id, ...)
     * @property {GUID} checkoutId - checkout_id
     * @property {number} itemsCount - Numbers of items in cart
     * @property {boolean} is_with_ewallet_payment - does the store has an ewallet payment connected (and displaying in cart)
     * @property {boolean} is_with_offline_payment - does the store has an offline payment connected
     * @property {number} num_of_paymet_providers - How many payment providers does the store has connected
     * @property {number} num_of_shipping - number of shipping choices presented to the visitor
     * @property {number} numberOfAdditionalFees - number of all additional fees in the cart
     * @property {string} orig_shipping_method - current shipping method in cart page (free shipping/ Flat rate/ rate by weight/ etc...)
     * @property {string} origin - origin
     * @property {string} paymet_providers - array of payment providers connected to the store
     * @property {string} productsList - json containing all product guids for products in the cart
     * @property {string} shippingMethodType - shipping /store pickup / none
     * @property {string} type - button / tooltip / banner
     **/
    /**
     * Name: Cart -> Click on checkout with e-wallet. Evid: 113.
     * Event description: buyer clicks on checkout with e-wallwt in cart page.
    
     * additionalFeesPrice - Type: numeric. Desc: INT, multiplied by 100 000 - sum of all additional fees price in cart
     *
     * appName - Type: string. Desc: app_name
     *
     * cartId - Type: guid.
     *
     * cartType - Type: string. Desc: Digital/ Physical/ mixed (Digital &Physical)
     *
     * catalogAppId - Type: string. Desc: A list of verticals which are in this cart separated by “ ,“:(stores app id, bookings app_id, ...)
     *
     * checkoutId - Type: guid. Desc: checkout_id
     *
     * itemsCount - Type: numeric. Desc: Numbers of items in cart
     *
     * is_with_ewallet_payment - Type: bool. Desc: does the store has an ewallet payment connected (and displaying in cart)
     *
     * is_with_offline_payment - Type: bool. Desc: does the store has an offline payment connected
     *
     * num_of_paymet_providers - Type: numeric. Desc: How many payment providers does the store has connected
     *
     * num_of_shipping - Type: numeric. Desc: number of shipping choices presented to the visitor
     *
     * numberOfAdditionalFees - Type: numeric. Desc: number of all additional fees in the cart
     *
     * orig_shipping_method - Type: string. Desc: current shipping method in cart page (free shipping/ Flat rate/ rate by weight/ etc...)
     *
     * origin - Type: string. Desc: origin
     *
     * paymet_providers - Type: string. Desc: array of payment providers connected to the store
     *
     * productsList - Type: string. Desc: json containing all product guids for products in the cart
     *
     * shippingMethodType - Type: string. Desc: shipping /store pickup / none
     *
     * type - Type: string. Desc: button / tooltip / banner
     * @param {clickOnCheckoutWithEWalletParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.clickOnCheckoutWithEWallet = function(params) {
        return this.bi.log(__assign({
            evid: 113
        }, params));
    };
    /**
     * @typedef {Object} checkoutErrorTrackingForDevelopersParams
     * @property {string} data - data
     * @property {string} error - error
     **/
    /**
     * Name: Checkout -> Error tracking for developers. Evid: 713.
     * Event description: Debug for developers.
    
     * data - Type: string. Desc: data
     *
     * error - Type: string. Desc: error
     * @param {checkoutErrorTrackingForDevelopersParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.checkoutErrorTrackingForDevelopers = function(params) {
        return this.bi.log(__assign({
            evid: 713
        }, params));
    };
    /**
     * @typedef {Object} giftCardCheckoutRemoveCodeParams
     * @property {number} additionalFeesPrice - INT, multiplied by 100 000 - sum of all additional fees price in order
     * @property {string} appName - null
     * @property {GUID} cartId - null
     * @property {string} catalogAppId - A list of verticals which are in this order separated by “ ,“:(stores app id, bookings app_id, ...) .
     * @property {GUID} checkoutId - checkout_id
     * @property {string} giftCardId - null
     * @property {boolean} isMember - true if visitor is member
     * @property {string} itemType - List of distinct checkout.lineItems.itemType
     * @property {number} numberOfAdditionalFees - number of all additional fees in the order
     **/
    /**
     * Name: gift card checkout -> remove Code. Evid: 536.
     * Event description: when visitor clicks "remove" after applying Gift Card Codein Payment stage of Checkout.
    
     * additionalFeesPrice - Type: numeric. Desc: INT, multiplied by 100 000 - sum of all additional fees price in order
     *
     * appName - Type: string.
     *
     * cartId - Type: guid.
     *
     * catalogAppId - Type: string. Desc: A list of verticals which are in this order separated by “ ,“:(stores app id, bookings app_id, ...) .
     *
     * checkoutId - Type: guid. Desc: checkout_id
     *
     * giftCardId - Type: string.
     *
     * isMember - Type: bool. Desc: true if visitor is member
     *
     * itemType - Type: string. Desc: List of distinct checkout.lineItems.itemType
     *
     * numberOfAdditionalFees - Type: numeric. Desc: number of all additional fees in the order
     * @param {giftCardCheckoutRemoveCodeParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.giftCardCheckoutRemoveCode = function(params) {
        return this.bi.log(__assign({
            evid: 536
        }, params));
    };
    /**
     * @typedef {Object} checkoutClickOnContinueInCheckoutProcessParams
     * @property {string} appName - app_name
     * @property {GUID} cartId - cart_id
     * @property {string} catalogAppId - A list of verticals which are in this order separated by “ ,“:(stores app id, bookings app_id, ...) .
     * @property {GUID} checkoutId - checkout_id
     * @property {boolean} isOwner - true if visitor is the site owner
     * @property {string} itemType - List of distinct checkout.lineItems.itemType
     * @property {GUID} owner_id - uuid of site owner
     * @property {string} previousStage - the closed stage - payment / shippingDetails / deliveryMethod / payment-method / pickupDetails / shipping-method / customerDetails
     * @property {string} stage - which stage in the wishlist installation process
     **/
    /**
     * Name: Checkout -> click on ‘continue’ in checkout process. Evid: 29.
     * Event description: When the user clicks on “continue”  on a specific stage in checkout process.
    
     * appName - Type: string. Desc: app_name
     *
     * cartId - Type: guid. Desc: cart_id
     *
     * catalogAppId - Type: string. Desc: A list of verticals which are in this order separated by “ ,“:(stores app id, bookings app_id, ...) .
     *
     * checkoutId - Type: guid. Desc: checkout_id
     *
     * isOwner - Type: bool. Desc: true if visitor is the site owner
     *
     * itemType - Type: string. Desc: List of distinct checkout.lineItems.itemType
     *
     * owner_id - Type: guid. Desc: uuid of site owner
     *
     * previousStage - Type: string. Desc: the closed stage - payment / shippingDetails / deliveryMethod / payment-method / pickupDetails / shipping-method / customerDetails
     *
     * stage - Type: string. Desc: which stage in the wishlist installation process
     * @param {checkoutClickOnContinueInCheckoutProcessParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.checkoutClickOnContinueInCheckoutProcess = function(params) {
        return this.bi.log(__assign({
            evid: 29
        }, params));
    };
    /**
     * @typedef {Object} checkoutClickOnCheckoutPoliciesParams
     * @property {string} catalogAppId - A list of verticals which are in this order separated by “ ,“:(stores app id, bookings app_id, ...) .
     * @property {GUID} checkoutId - checkout_id
     * @property {string} linkLocation - the location of the link. The options are: footer / form
     * @property {string} policyType - on which policy the user clicked. The options: terms and conditions / privacy policy / return policy / digital item policy / contact us / custom policy
     **/
    /**
     * Name: Checkout -> click on checkout policies. Evid: 712.
     * Event description: When the user clicks on one of the checkout policies.
    
     * catalogAppId - Type: string. Desc: A list of verticals which are in this order separated by “ ,“:(stores app id, bookings app_id, ...) .
     *
     * checkoutId - Type: guid. Desc: checkout_id
     *
     * linkLocation - Type: string. Desc: the location of the link. The options are: footer / form
     *
     * policyType - Type: string. Desc: on which policy the user clicked. The options: terms and conditions / privacy policy / return policy / digital item policy / contact us / custom policy
     * @param {checkoutClickOnCheckoutPoliciesParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.checkoutClickOnCheckoutPolicies = function(params) {
        return this.bi.log(__assign({
            evid: 712
        }, params));
    };
    /**
     * @typedef {Object} clickToViewCartPageParams
     * @property {string} appName - null
     * @property {GUID} cartId - null
     * @property {string} cartType - null
     * @property {string} catalogAppId - A list of verticals which are in this cart separated by “ ,“:(stores app id, bookings app_id, ...)
     * @property {GUID} checkoutId - checkout_id
     * @property {number} itemsCount - null
     * @property {boolean} isNavigateCart - null
     * @property {string} origin - null
     * @property {GUID} owner_id - null
     * @property {string} viewMode - null
     **/
    /**
     * Name: Cart -> Click to view cart page. Evid: 130.
     * Event description: click to view cart page. since june 2019 also for OneApp Store front.
    
     * appName - Type: string.
     *
     * cartId - Type: guid.
     *
     * cartType - Type: string.
     *
     * catalogAppId - Type: string. Desc: A list of verticals which are in this cart separated by “ ,“:(stores app id, bookings app_id, ...)
     *
     * checkoutId - Type: guid. Desc: checkout_id
     *
     * itemsCount - Type: numeric.
     *
     * isNavigateCart - Type: bool.
     *
     * origin - Type: string.
     *
     * owner_id - Type: guid.
     *
     * viewMode - Type: string.
     * @param {clickToViewCartPageParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.clickToViewCartPage = function(params) {
        return this.bi.log(__assign({
            evid: 130
        }, params));
    };
    /**
     * @typedef {Object} checkoutErrorWhenApplyingAGiftCardParams
     * @property {string} appName - app name
     * @property {GUID} cartId - cart_id
     * @property {string} catalogAppId - A list of verticals which are in this order separated by “ ,“:(stores app id, bookings app_id, ...) .
     * @property {GUID} checkoutId - checkout_id
     * @property {string} errorCode - error code
     * @property {boolean} isMember - is_member
     * @property {string} itemType - List of distinct checkout.lineItems.itemType
     **/
    /**
     * Name: Checkout -> Error when applying a Gift Card. Evid: 717.
     * Event description: when a uou has an error while applying gift card in the checkout.
    (Only for the OOO checkout, for the old checkout data - check 130:24).
    
     * appName - Type: string. Desc: app name
     *
     * cartId - Type: guid. Desc: cart_id
     *
     * catalogAppId - Type: string. Desc: A list of verticals which are in this order separated by “ ,“:(stores app id, bookings app_id, ...) .
     *
     * checkoutId - Type: guid. Desc: checkout_id
     *
     * errorCode - Type: string. Desc: error code
     *
     * isMember - Type: bool. Desc: is_member
     *
     * itemType - Type: string. Desc: List of distinct checkout.lineItems.itemType
     * @param {checkoutErrorWhenApplyingAGiftCardParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.checkoutErrorWhenApplyingAGiftCard = function(params) {
        return this.bi.log(__assign({
            evid: 717
        }, params));
    };
    /**
    * @typedef {Object} checkoutLoadingCheckoutPageFailForDevParams
    
    **/
    /**
     * Name: Checkout -> Loading checkout page fail (for dev). Evid: 719.
     * Event description: when the checkout is corrupted.
    
    
     * @param {checkoutLoadingCheckoutPageFailForDevParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.checkoutLoadingCheckoutPageFailForDev = function(params) {
        return this.bi.log(__assign({
            evid: 719
        }, params));
    };
    /**
     * @typedef {Object} clickToViewProductFromCartPageOaParams
     * @property {string} cartId - cartId
     * @property {string} catalogAppId - Stores/bookings App id
     * @property {string} catalogItemId - productId in case of Stores, Bookingid in case od bookings
     * @property {boolean} hasOptions - has_options
     * @property {string} itemType - productType in case of Stores
     * @property {string} origin - catalog_OA / cart_OA (from OneApp Stores front) / quick-view
     **/
    /**
     * Name: Cart -> Click to View product (from cart page)  OA. Evid: 706.
     * Event description: Click to View product (from cart page)  OA.
    
     * cartId - Type: string. Desc: cartId
     *
     * catalogAppId - Type: string. Desc: Stores/bookings App id
     *
     * catalogItemId - Type: string. Desc: productId in case of Stores, Bookingid in case od bookings
     *
     * hasOptions - Type: bool. Desc: has_options
     *
     * itemType - Type: string. Desc: productType in case of Stores
     *
     * origin - Type: string. Desc: catalog_OA / cart_OA (from OneApp Stores front) / quick-view
     * @param {clickToViewProductFromCartPageOaParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.clickToViewProductFromCartPageOa = function(params) {
        return this.bi.log(__assign({
            evid: 706
        }, params));
    };
    /**
     * @typedef {Object} bisClickOnNotifyMeButtonToOpenModalParams
     * @property {GUID} appId - the app Id of the catalog
     * @property {string} catalogAppId - catalog app id
     * @property {GUID} catalogInstanceId - In case of stores (store_id)
     * @property {string} catalogItemId - The guid of the requested item (product_guid / service_id..)
     * @property {boolean} eligible - true (all options selected/no options ->eligible  to open modal) false (not all the options are selected - not eligible - shows error)
     * @property {string} option - map of strings of the options chosen in the requested item
     * @property {string} origin - product page / quick view / gallery
     **/
    /**
     * Name: BIS - Click on notify me button to open modal. Evid: 25.
     * Event description: When a user clicks on notify me button to open modal.
    if eligible = true, then the modal should open
    if eligible = false, then the button is disabled and the user will get an error..
    
     * appId - Type: guid. Desc: the app Id of the catalog
     *
     * catalogAppId - Type: string. Desc: catalog app id
     *
     * catalogInstanceId - Type: guid. Desc: In case of stores (store_id)
     *
     * catalogItemId - Type: string. Desc: The guid of the requested item (product_guid / service_id..)
     *
     * eligible - Type: bool. Desc: true (all options selected/no options ->eligible  to open modal) false (not all the options are selected - not eligible - shows error)
     *
     * option - Type: string. Desc: map of strings of the options chosen in the requested item
     *
     * origin - Type: string. Desc: product page / quick view / gallery
     * @param {bisClickOnNotifyMeButtonToOpenModalParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bisClickOnNotifyMeButtonToOpenModal = function(params) {
        return this.bi.log(__assign({
            evid: 25
        }, params));
    };
    /**
     * @typedef {Object} clickManageProductInCartOaStoreFrontParams
     * @property {string} cartId - cartId
     * @property {string} cartType - cartType
     * @property {string} catalogAppId - Stores/bookings App id
     * @property {string} productId - productId
     * @property {string} productType - productType
     **/
    /**
     * Name: Click Manage Product in cart OA StoreFront. Evid: 185.
     * Event description: Click Manage Product in cart OA StoreFront.
    
     * cartId - Type: string. Desc: cartId
     *
     * cartType - Type: string. Desc: cartType
     *
     * catalogAppId - Type: string. Desc: Stores/bookings App id
     *
     * productId - Type: string. Desc: productId
     *
     * productType - Type: string. Desc: productType
     * @param {clickManageProductInCartOaStoreFrontParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.clickManageProductInCartOaStoreFront = function(params) {
        return this.bi.log(__assign({
            evid: 185
        }, params));
    };
    /**
     * @typedef {Object} cartSelectShippingMethodFromTheDropdownInCartPageParams
     * @property {string} catalogAppId - A list of verticals which are in this cart separated by “ ,“:(stores app id, bookings app_id, ...)
     * @property {string} selected_shipping_method - the new shipping method that was selected from the dropdown in cart page (free shipping/ Flat rate/ rate by weight/ etc...)
     **/
    /**
     * Name: Cart -> Select shipping method from the dropdown in cart page. Evid: 222.
     * Event description: ***NOT IN USE*** doesnt send data also in src 10. When a visitor clicks on one of the options in the shipping method dropdown on the cart page.
    
     * catalogAppId - Type: string. Desc: A list of verticals which are in this cart separated by “ ,“:(stores app id, bookings app_id, ...)
     *
     * selected_shipping_method - Type: string. Desc: the new shipping method that was selected from the dropdown in cart page (free shipping/ Flat rate/ rate by weight/ etc...)
     * @param {cartSelectShippingMethodFromTheDropdownInCartPageParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.cartSelectShippingMethodFromTheDropdownInCartPage = function(params) {
        return this.bi.log(__assign({
            evid: 222
        }, params));
    };
    /**
     * @typedef {Object} clickContinueEWalletModalSfParams
     * @property {string} appName - app_name
     * @property {GUID} cartId - cart id
     * @property {string} cartType - Digital/ Physical/ mixed (Digital &Physical)
     * @property {string} catalogAppId - A list of verticals which are in this cart separated by “ ,“:(stores app id, bookings app_id, ...)
     * @property {GUID} checkoutId - checkout_id
     * @property {number} itemsCount - Numbers of items in cart
     * @property {number} num_of_paymet_providers - How many payment providers does the store has connected
     * @property {number} num_of_shipping - number of shipping choices presented to the visitor at the first time
     * @property {string} origin - origin
     * @property {string} paymet_providers - array of payment providers connected to the store
     * @property {string} productsList - json containing all product guids for products in the cart
     * @property {string} type - add / edit
     **/
    /**
     * Name: Checkout -> Click Continue e-wallet Modal SF. Evid: 225.
     * Event description: When a visitor clicks on ‘Continue’ in e-wallet Modal (after the click the visitor is supposed to view the checkout)..
    
     * appName - Type: string. Desc: app_name
     *
     * cartId - Type: guid. Desc: cart id
     *
     * cartType - Type: string. Desc: Digital/ Physical/ mixed (Digital &Physical)
     *
     * catalogAppId - Type: string. Desc: A list of verticals which are in this cart separated by “ ,“:(stores app id, bookings app_id, ...)
     *
     * checkoutId - Type: guid. Desc: checkout_id
     *
     * itemsCount - Type: numeric. Desc: Numbers of items in cart
     *
     * num_of_paymet_providers - Type: numeric. Desc: How many payment providers does the store has connected
     *
     * num_of_shipping - Type: numeric. Desc: number of shipping choices presented to the visitor at the first time
     *
     * origin - Type: string. Desc: origin
     *
     * paymet_providers - Type: string. Desc: array of payment providers connected to the store
     *
     * productsList - Type: string. Desc: json containing all product guids for products in the cart
     *
     * type - Type: string. Desc: add / edit
     * @param {clickContinueEWalletModalSfParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.clickContinueEWalletModalSf = function(params) {
        return this.bi.log(__assign({
            evid: 225
        }, params));
    };
    /**
     * @typedef {Object} logoutModalInCheckoutLoadedParams
     * @property {number} additionalFeesPrice - INT, multiplied by 100 000 - sum of all additional fees price in order
     * @property {string} appName - null
     * @property {GUID} cartId - cart_id
     * @property {string} cartType - null
     * @property {string} catalogAppId - A list of verticals which are in this order separated by “ ,“:(stores app id, bookings app_id, ...) .
     * @property {GUID} checkoutId - checkout_id
     * @property {string} flowType - 'quick flow' / 'full flow'
     * @property {boolean} is_member - null
     * @property {string} itemType - List of distinct checkout.lineItems.itemType
     * @property {number} numberOfAdditionalFees - number of all additional fees in the order
     * @property {boolean} savedAddress - true if the member has saved address
     **/
    /**
     * Name: Checkout -> logout modal in checkout loaded. Evid: 602.
     * Event description: logout modal loaded in checkout after member presses logout.
    
     * additionalFeesPrice - Type: numeric. Desc: INT, multiplied by 100 000 - sum of all additional fees price in order
     *
     * appName - Type: string.
     *
     * cartId - Type: guid. Desc: cart_id
     *
     * cartType - Type: string.
     *
     * catalogAppId - Type: string. Desc: A list of verticals which are in this order separated by “ ,“:(stores app id, bookings app_id, ...) .
     *
     * checkoutId - Type: guid. Desc: checkout_id
     *
     * flowType - Type: string. Desc: 'quick flow' / 'full flow'
     *
     * is_member - Type: bool.
     *
     * itemType - Type: string. Desc: List of distinct checkout.lineItems.itemType
     *
     * numberOfAdditionalFees - Type: numeric. Desc: number of all additional fees in the order
     *
     * savedAddress - Type: bool. Desc: true if the member has saved address
     * @param {logoutModalInCheckoutLoadedParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.logoutModalInCheckoutLoaded = function(params) {
        return this.bi.log(__assign({
            evid: 602
        }, params));
    };
    /**
     * @typedef {Object} cancelClickedInSelectYourShippingDestinationPopupSfParams
     * @property {string} appName - app_name
     * @property {GUID} cartId - null
     * @property {string} cartType - Digital/ Physical/ mixed (Digital &Physical)
     * @property {string} catalogAppId - A list of verticals which are in this cart separated by “ ,“:(stores app id, bookings app_id, ...)
     * @property {GUID} checkoutId - checkout_id
     **/
    /**
     * Name: Cart -> cancel clicked in select your shipping destination popup SF. Evid: 126.
     * Event description: in the cart page, when a user want to change is shipping address, to re calculate shipping cost estimation- cancel or x clicked.
    
     * appName - Type: string. Desc: app_name
     *
     * cartId - Type: guid.
     *
     * cartType - Type: string. Desc: Digital/ Physical/ mixed (Digital &Physical)
     *
     * catalogAppId - Type: string. Desc: A list of verticals which are in this cart separated by “ ,“:(stores app id, bookings app_id, ...)
     *
     * checkoutId - Type: guid. Desc: checkout_id
     * @param {cancelClickedInSelectYourShippingDestinationPopupSfParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.cancelClickedInSelectYourShippingDestinationPopupSf = function(params) {
        return this.bi.log(__assign({
            evid: 126
        }, params));
    };
    /**
     * @typedef {Object} cartViewMiniCartParams
     * @property {string} appName - app_name
     * @property {GUID} cartId - cart_id
     * @property {string} cartType - Digital/ Physical/ mixed (Digital &Physical)
     * @property {string} catalogAppId - A list of verticals which are in this cart separated by “ ,“:(stores app id, bookings app_id, ...)
     * @property {number} itemsCount - Numbers of items in cart
     * @property {boolean} is_member - true if the visitor signed in as a member, false otherwise
     * @property {boolean} isMembersInstalled - true if members app installed on site, false otherwise
     * @property {string} origin - cartIcon / addToCartButton
     * @property {string} priceBreakdown - list of displayed price breakdowns - tax, shipping, etc. NULL if not relevant
     * @property {GUID} siteMemberId - member id
     * @property {string} viewMode - editor / site / preview
     **/
    /**
     * Name: Cart -> view mini cart. Evid: 50.
     * Event description: view mini cart pop-up.
    
     * appName - Type: string. Desc: app_name
     *
     * cartId - Type: guid. Desc: cart_id
     *
     * cartType - Type: string. Desc: Digital/ Physical/ mixed (Digital &Physical)
     *
     * catalogAppId - Type: string. Desc: A list of verticals which are in this cart separated by “ ,“:(stores app id, bookings app_id, ...)
     *
     * itemsCount - Type: numeric. Desc: Numbers of items in cart
     *
     * is_member - Type: bool. Desc: true if the visitor signed in as a member, false otherwise
     *
     * isMembersInstalled - Type: bool. Desc: true if members app installed on site, false otherwise
     *
     * origin - Type: string. Desc: cartIcon / addToCartButton
     *
     * priceBreakdown - Type: string. Desc: list of displayed price breakdowns - tax, shipping, etc. NULL if not relevant
     *
     * siteMemberId - Type: guid. Desc: member id
     *
     * viewMode - Type: string. Desc: editor / site / preview
     * @param {cartViewMiniCartParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.cartViewMiniCart = function(params) {
        return this.bi.log(__assign({
            evid: 50
        }, params));
    };
    /**
     * @typedef {Object} errorWhenApplyingACouponParams
     * @property {string} appName - null
     * @property {GUID} cartId - null
     * @property {string} catalogAppId - A list of verticals which are in this order separated by “ ,“:(stores app id, bookings app_id, ...) .
     * @property {GUID} checkoutId - checkout_id
     * @property {string} couponCode - null
     * @property {string} errorCode - null
     * @property {boolean} isMember - null
     * @property {boolean} isOwner - null
     * @property {string} itemType - List of distinct checkout.lineItems.itemType
     * @property {string} origin - null
     * @property {GUID} owner_id - null
     **/
    /**
     * Name: Checkout -> Error when applying a coupon. Evid: 117.
    
    
     * appName - Type: string.
     *
     * cartId - Type: guid.
     *
     * catalogAppId - Type: string. Desc: A list of verticals which are in this order separated by “ ,“:(stores app id, bookings app_id, ...) .
     *
     * checkoutId - Type: guid. Desc: checkout_id
     *
     * couponCode - Type: string.
     *
     * errorCode - Type: string.
     *
     * isMember - Type: bool.
     *
     * isOwner - Type: bool.
     *
     * itemType - Type: string. Desc: List of distinct checkout.lineItems.itemType
     *
     * origin - Type: string.
     *
     * owner_id - Type: guid.
     * @param {errorWhenApplyingACouponParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.errorWhenApplyingACoupon = function(params) {
        return this.bi.log(__assign({
            evid: 117
        }, params));
    };
    /**
     * @typedef {Object} paymentDetailsCompletedParams
     * @property {number} additionalFeesPrice - INT, multiplied by 100 000 - sum of all additional fees price in order
     * @property {string} appName - app_name
     * @property {GUID} cartId - cart_id
     * @property {string} cartType - Digital/ Physical/ mixed (Digital &Physical)
     * @property {string} catalogAppId - A list of verticals which are in this order separated by “ ,“:(stores app id, bookings app_id, ...) .
     * @property {GUID} checkoutId - checkout_id
     * @property {number} optionscount - number of payment options
     * @property {number} selectedoptionindex - index of selected option
     * @property {boolean} isOwner - true if visitor is the site owner
     * @property {string} itemType - List of distinct checkout.lineItems.itemType
     * @property {number} numberOfAdditionalFees - number of all additional fees in the order
     * @property {string} paymentProvider - payment provider that was chosen
     **/
    /**
     * Name: Checkout -> Payment details completed. Evid: 177.
     * Event description: UoU clicked continue on payment details step in new checkout funnel. since june 2019 also sent from OA StoreFront (with origin).
    
     * additionalFeesPrice - Type: numeric. Desc: INT, multiplied by 100 000 - sum of all additional fees price in order
     *
     * appName - Type: string. Desc: app_name
     *
     * cartId - Type: guid. Desc: cart_id
     *
     * cartType - Type: string. Desc: Digital/ Physical/ mixed (Digital &Physical)
     *
     * catalogAppId - Type: string. Desc: A list of verticals which are in this order separated by “ ,“:(stores app id, bookings app_id, ...) .
     *
     * checkoutId - Type: guid. Desc: checkout_id
     *
     * optionscount - Type: numeric. Desc: number of payment options
     *
     * selectedoptionindex - Type: numeric. Desc: index of selected option
     *
     * isOwner - Type: bool. Desc: true if visitor is the site owner
     *
     * itemType - Type: string. Desc: List of distinct checkout.lineItems.itemType
     *
     * numberOfAdditionalFees - Type: numeric. Desc: number of all additional fees in the order
     *
     * paymentProvider - Type: string. Desc: payment provider that was chosen
     * @param {paymentDetailsCompletedParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.paymentDetailsCompleted = function(params) {
        return this.bi.log(__assign({
            evid: 177
        }, params));
    };
    /**
     * @typedef {Object} bisClickOnTheSubmitButtonParams
     * @property {GUID} appId - the app Id of the catalog
     * @property {string} catalogAppId - catalog app id
     * @property {GUID} catalogInstanceId - In case of stores (store_id)
     * @property {string} catalogItemId - The guid of the requested item (product_guid / service_id..)
     * @property {boolean} isEmailValid - true - email is valid and trigger to created a request, false - email is not valid and an error is shown
     * @property {string} options - map of strings of the options chosen in the requested item
     **/
    /**
     * Name: BIS - Click on the submit button. Evid: 26.
     * Event description: When a user clicks on the submit button in 'notify me' modal
    If the input email is valid, then it triggers to create a request on the server.
    if the input email is not valid it will send an error.
    
     * appId - Type: guid. Desc: the app Id of the catalog
     *
     * catalogAppId - Type: string. Desc: catalog app id
     *
     * catalogInstanceId - Type: guid. Desc: In case of stores (store_id)
     *
     * catalogItemId - Type: string. Desc: The guid of the requested item (product_guid / service_id..)
     *
     * isEmailValid - Type: bool. Desc: true - email is valid and trigger to created a request, false - email is not valid and an error is shown
     *
     * options - Type: string. Desc: map of strings of the options chosen in the requested item
     * @param {bisClickOnTheSubmitButtonParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bisClickOnTheSubmitButton = function(params) {
        return this.bi.log(__assign({
            evid: 26
        }, params));
    };
    /**
     * @typedef {Object} buyerShippingCountryIsSetParams
     * @property {string} appName - app_name
     * @property {GUID} cartId - cart_id
     * @property {string} catalogAppId - catalog_app_id
     * @property {GUID} checkoutId - checkout_id
     * @property {string} flowType - 'Cart'- if the region was selected in cart modal ; 'Checkout' - if the region was selected in checkout stage
     * @property {boolean} is_member - true if the visitor signed in as a member, false otherwise
     * @property {string} origin - 'OA StoreFront' (for OneApp)
     * @property {GUID} owner_id - uuid of site owner
     * @property {string} shippingCountry - The selected shipping country
     **/
    /**
     * Name: Click on dropdown to select shipping region. Evid: 661.
     * Event description: When a buyer (visitor/member) click on the shipping region dropdown   in checkout shippingAdress stage / in cart shipping calculator modal. (Created mainly as an exposure point for France regions AB test).
    
     * appName - Type: string. Desc: app_name
     *
     * cartId - Type: guid. Desc: cart_id
     *
     * catalogAppId - Type: string. Desc: catalog_app_id
     *
     * checkoutId - Type: guid. Desc: checkout_id
     *
     * flowType - Type: string. Desc: 'Cart'- if the region was selected in cart modal ; 'Checkout' - if the region was selected in checkout stage
     *
     * is_member - Type: bool. Desc: true if the visitor signed in as a member, false otherwise
     *
     * origin - Type: string. Desc: 'OA StoreFront' (for OneApp)
     *
     * owner_id - Type: guid. Desc: uuid of site owner
     *
     * shippingCountry - Type: string. Desc: The selected shipping country
     * @param {buyerShippingCountryIsSetParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.buyerShippingCountryIsSet = function(params) {
        return this.bi.log(__assign({
            evid: 661
        }, params));
    };
    return Logger;
}());
export {
    Logger
};
export default init;
export function getLoggerConf() {
    return {
        src: 130,
        endpoint: 'ec-site',
    };
}
//# sourceMappingURL=index.js.map