"use strict";
var __extends = (this && this.__extends) || (function() {
    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({
                    __proto__: []
                }
                instanceof Array && function(d, b) {
                    d.__proto__ = b;
                }) ||
            function(d, b) {
                for (var p in b)
                    if (b.hasOwnProperty(p)) d[p] = b[p];
            };
        return extendStatics(d, b);
    };
    return function(d, b) {
        extendStatics(d, b);

        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function() {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s)
                if (Object.prototype.hasOwnProperty.call(s, p))
                    t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
var headers_1 = require("@wix/headers");
var utils_1 = require("./utils");
var REQUEST_ID_HEADER = 'x-wix-request-id';
var formatResponseString = function(obj) {
    return obj ? JSON.stringify(obj).replace(/\n/g, '\\n') : '""';
};
var AmbassadorHTTPError = /** @class */ (function(_super) {
    __extends(AmbassadorHTTPError, _super);

    function AmbassadorHTTPError(httpStatus, response, requestId) {
        var _this = _super.call(this, "Ambassador client request failed:\n" +
            ("HTTP STATUS: " + httpStatus + "\n") +
            ("RESPONSE: " + formatResponseString(response) + "\n") +
            "See the httpStatus and response fields for more information.") || this;
        Object.setPrototypeOf(_this, AmbassadorHTTPError.prototype);
        _this.httpStatus = httpStatus;
        _this.response = response;
        _this.requestId = requestId;
        return _this;
    }
    return AmbassadorHTTPError;
}(Error));
exports.AmbassadorHTTPError = AmbassadorHTTPError;
var AmbassadorHTTPClient = /** @class */ (function() {
    function AmbassadorHTTPClient(baseUrl, config) {
        var _this = this;
        if (config === void 0) {
            config = {};
        }
        this.baseUrl = baseUrl;
        this.config = config;
        this.testkitBaseUrl = '';
        this.fetchClient = undefined;
        this.useRedaxios = false;
        this.handleFetchResponse = function(res) {
            if (!res.ok) {
                return _this.handleFetchErrors(res);
            } else {
                return res.json();
            }
        };
        this.handleErrors = function(err) {
            if (_this.useRedaxios) {
                return _this.handleFetchErrors(err);
            }
            var axiosError = err;
            if (axiosError.response) {
                var requestId = axiosError.response.headers[REQUEST_ID_HEADER];
                throw new AmbassadorHTTPError(axiosError.response.status, axiosError.response.data, requestId);
            } else {
                throw new AmbassadorHTTPError(-1, "Connection Failed. \n" + axiosError.message);
            }
        };
        this.handleFetchErrors = function(err) {
            var fetchResponse = err;
            var fetchError = err;
            if (fetchError.message) {
                throw new AmbassadorHTTPError(-1, fetchError.message);
            } else if (fetchResponse.status) {
                return tryParseFetchResponse(fetchResponse).then(function(message) {
                    var _a;
                    var requestId = (_a = fetchResponse.headers) === null || _a === void 0 ? void 0 : _a.get(REQUEST_ID_HEADER);
                    throw new AmbassadorHTTPError(fetchResponse.status, message, requestId);
                });
            } else {
                throw new AmbassadorHTTPError(-1, 'Connection Failed');
            }
        };
        this.baseUrl = this.addTrailingSlash(baseUrl);
        this.assignAxiosClient();
        if (config.fetchInstance) {
            this.fetchClient = config.fetchInstance;
        }
        this.ignoredProtoUrlPart = config.ignoredProtoHttpUrlPart;
    }
    AmbassadorHTTPClient.prototype.assignAxiosClient = function() {
        var config = this.config;
        if (config.wixHttpClientInstance) {
            this._axiosClient = config.wixHttpClientInstance;
        } else if (config.axiosInstance) {
            this._axiosClient = config.axiosInstance;
        } else {
            var redaxios = require('redaxios').default /* webpack */ || require('redaxios'); /* nodejs */
            this.useRedaxios = true;
            this._axiosClient = redaxios.create({
                responseType: 'json'
            });
        }
    };
    AmbassadorHTTPClient.prototype.fixProtoIgnoredUrlPart = function(originalPath) {
        var originalPathParts = originalPath.split(this.ignoredProtoUrlPart);
        if (originalPathParts[0] === '' && (originalPathParts[1].startsWith('/') || originalPathParts[1] === '')) {
            return originalPath.substr(this.ignoredProtoUrlPart.length, originalPath.length);
        } else {
            return originalPath;
        }
    };
    AmbassadorHTTPClient.prototype.invoke = function(method, path, payload, headers) {
        var _this = this;
        this.configForTestingIfRequired();
        var normalizedPath = this.removeLeadingSlash(this.fixProtoIgnoredUrlPart(path));
        var paramsInPath = this.getParamsFromPath(normalizedPath);
        var encodedParamsPath = paramsInPath.reduce(function(path, nextParam) {
            return path.replace("{" + nextParam + "}", encodeURIComponent(_this.getValueFromPayload(payload, nextParam)));
        }, normalizedPath);
        if (this.fetchClient) {
            headers = __assign(__assign({}, this.createWixHeaders()), headers);
            return this.fetchHttpRequest(method, encodedParamsPath, payload, headers);
        } else {
            headers = __assign(__assign({}, this.createWixHeaders({
                csrf: this.useRedaxios
            })), headers);
            var requestConfig = Object.keys(headers).length > 0 ? {
                headers: headers
            } : undefined;
            return this.runHttpRequest(method, encodedParamsPath, payload, requestConfig);
        }
    };
    AmbassadorHTTPClient.prototype.runHttpRequest = function(method, fixedPath, payload, requestConfig) {
        if (requestConfig === void 0) {
            requestConfig = {};
        }
        if (this.testkitBaseUrl) {
            // force change base url in case we're running in testing env
            fixedPath = combineURLs(this.testkitBaseUrl, fixedPath);
        } else if (this.useRedaxios) {
            // redaxios doesn't support base url config
            // we don't always apply it because some of our users
            // may use axiosInstance with pre-defined base url
            fixedPath = combineURLs(this.baseUrl, fixedPath);
        } else if (this.config.wixHttpClientInstance) {
            // wixHttpClient is provided to users intialized by the platform, users shouldn't change it's baseUrl.
            // so unlinke axiosInstance, we'll have to handle the url here.
            fixedPath = combineURLs(this.baseUrl, fixedPath);
        }
        // force capitalized, redaxios uses lower case and
        // ngnix doesn't like that
        requestConfig.method = method;
        switch (method) {
            case 'GET':
                return this._axiosClient.get(fixedPath + "?" + this.payloadToQueryString(payload), requestConfig).then(function(res) {
                    return res.data;
                }).catch(this.handleErrors);
            case 'POST':
                return this._axiosClient.post(fixedPath, payload, requestConfig).then(function(res) {
                    return res.data;
                }).catch(this.handleErrors);
            case 'PUT':
                return this._axiosClient.put(fixedPath, payload, requestConfig).then(function(res) {
                    return res.data;
                }).catch(this.handleErrors);
            case 'PATCH':
                return this._axiosClient.patch(fixedPath, payload, requestConfig).then(function(res) {
                    return res.data;
                }).catch(this.handleErrors);
            case 'DELETE':
                return this._axiosClient.delete(fixedPath + "?" + this.payloadToQueryString(payload), requestConfig).then(function(res) {
                    return res.data;
                }).catch(this.handleErrors);
            default:
                return null;
        }
    };
    AmbassadorHTTPClient.prototype.createWixHeaders = function(opts) {
        // wix/http-client takes care of wixHeaders, duplication causes problems.
        if (this.config.wixHttpClientInstance) {
            return {};
        }
        return headers_1.createHeaders(opts);
    };
    AmbassadorHTTPClient.prototype.fetchHttpRequest = function(method, fixedPath, payload, headers) {
        var fullPathUrl = combineURLs(this.testkitBaseUrl || this.baseUrl, fixedPath);
        switch (method) {
            case 'GET':
                return this.fetchClient(fullPathUrl + "?" + this.payloadToQueryString(payload), {
                    method: 'GET',
                    headers: headers
                }).then(this.handleFetchResponse, this.handleFetchErrors);
            case 'POST':
                {
                    return this.fetchClient(fullPathUrl, {
                        method: 'POST',
                        headers: this.mergeHeadersWithContentType(headers || {}),
                        body: JSON.stringify(payload)
                    }).then(this.handleFetchResponse, this.handleFetchErrors);
                }
            case 'PUT':
                {
                    return this.fetchClient(fullPathUrl, {
                        method: 'PUT',
                        headers: this.mergeHeadersWithContentType(headers || {}),
                        body: JSON.stringify(payload)
                    }).then(this.handleFetchResponse, this.handleFetchErrors);
                }
            case 'PATCH':
                return this.fetchClient(fullPathUrl, {
                    method: 'PATCH',
                    headers: this.mergeHeadersWithContentType(headers || {}),
                    body: JSON.stringify(payload)
                }).then(this.handleFetchResponse, this.handleFetchErrors);
            case 'DELETE':
                return this.fetchClient(fullPathUrl + "?" + this.payloadToQueryString(payload), {
                    method: 'DELETE',
                    headers: headers
                }).then(this.handleFetchResponse, this.handleFetchErrors);
            default:
                return null;
        }
    };
    AmbassadorHTTPClient.prototype.mergeHeadersWithContentType = function(headers) {
        var appJsonHeaders = {
            'Content-Type': 'application/json'
        };
        var newHeaders = __assign(__assign({}, appJsonHeaders), headers);
        return newHeaders;
    };
    AmbassadorHTTPClient.prototype.configForTestingIfRequired = function() {
        var testkitUrl;
        if (process.env.AMBASSADOR_TESTKIT_HTTP_URL) {
            testkitUrl = process.env.AMBASSADOR_TESTKIT_HTTP_URL;
        }
        if (typeof window !== 'undefined' && window['__AMBASSADOR_TESTKIT_HTTP_URL']) {
            testkitUrl = window['__AMBASSADOR_TESTKIT_HTTP_URL'];
        }
        if (testkitUrl) {
            this.testkitBaseUrl = combineURLs(testkitUrl, encodeURIComponent(this.baseUrl));
        }
    };
    AmbassadorHTTPClient.prototype.payloadToQueryString = function(payload) {
        var _this = this;
        return Object.keys(payload)
            .filter(function(key) {
                return payload[key] !== null && payload[key] !== undefined;
            })
            .map(function(key) {
                if (payload[key] instanceof Array) {
                    return _this.arrayToQueryString(key, payload[key]);
                } else if (typeof payload[key] === 'object') {
                    var flattenedObject = Object.keys(payload[key])
                        .reduce(function(obj, innerKey) {
                            var _a;
                            return (__assign(__assign({}, obj), (_a = {}, _a[key + "." + innerKey] = payload[key][innerKey], _a)));
                        }, {});
                    return _this.payloadToQueryString(flattenedObject);
                } else {
                    return encodeURIComponent(key) + "=" + encodeURIComponent(payload[key]);
                }
            })
            .join('&');
    };
    AmbassadorHTTPClient.prototype.arrayToQueryString = function(key, array) {
        return array
            .map(function(val) {
                return encodeURIComponent(key) + "=" + encodeURIComponent(val);
            })
            .join('&');
    };
    AmbassadorHTTPClient.prototype.getParamsFromPath = function(path) {
        var paramsInPath = [];
        var nextPath = path;
        while (nextPath.match(/\{[^}]+\}/)) {
            var _a = nextPath.match(/\{([^}]+)\}/),
                _1 = _a[0],
                paramName = _a[1];
            paramsInPath.push(paramName);
            nextPath = nextPath.replace(/\{[^}]+\}/, '');
        }
        return paramsInPath;
    };
    AmbassadorHTTPClient.prototype.getValueFromPayload = function(payload, pathToField) {
        var pathParts = pathToField.split('.');
        return pathParts.reduce(function(payload, nextPathPart) {
            return payload[nextPathPart] || payload[utils_1.snakeToCamelCase(nextPathPart)];
        }, payload);
    };
    AmbassadorHTTPClient.prototype.addTrailingSlash = function(url) {
        if (!url.endsWith('/')) {
            return url + "/";
        } else {
            return url;
        }
    };
    AmbassadorHTTPClient.prototype.removeLeadingSlash = function(path) {
        if (path.startsWith('/')) {
            return path.substr(1);
        } else {
            return path;
        }
    };
    return AmbassadorHTTPClient;
}());
exports.AmbassadorHTTPClient = AmbassadorHTTPClient;

function tryParseFetchResponse(err) {
    return err.text()
        .then(tryParseJson)
        .catch(function() {
            return '';
        });
}

function tryParseJson(text) {
    try {
        return JSON.parse(text);
    } catch (_a) {
        return text;
    }
}

function combineURLs(baseURL, relativeURL) {
    return relativeURL ?
        baseURL.replace(/\/+$/, '') + '/' + relativeURL.replace(/^\/+/, '') :
        baseURL;
}
//# sourceMappingURL=http.js.map