export var paramNames = {
    INSTANCE: 'instance',
    DEVICE_TYPE: 'deviceType',
    deviceTypes: {
        MOBILE: 'mobile',
    },
    CURRENT_LANG: 'lang',
    SITE_CURRENCY: 'currency',
    IS_PRIMARY_LANG: 'isPrimaryLanguage',
    LOCALE: 'dateNumberFormat',
    EXTERNAL_ID: 'externalId',
    ROUTER_DATA: 'routerData',
};
export function getUrlParam(name) {
    var match = RegExp("[?&]" + name + "=([^&]*)").exec(window.location.search);
    return match && decodeURIComponent(match[1].replace(/\+/g, ' '));
}

function parseUrlParams(queryString) {
    var re = /([^&=]+)=([^&]*)/g;
    var param;
    var query = {};
    //tslint:disable-next-line:no-conditional-assignment
    while ((param = re.exec(queryString)) !== null) {
        var key = decodeURIComponent(param[1]);
        var val = decodeURIComponent(param[2]);
        if (!query[key]) {
            // first value for key, keep as string
            query[key] = val;
        } else if (Array.isArray(query[key])) {
            // more than one value already, push to the array
            query[key].push(val);
        } else {
            // the 2nd value for the key, turn into an array
            query[key] = [query[key], val];
        }
    }
    return query;
}
export function parseUrl(url) {
    if (!url) {
        return {};
    }
    var urlRe = /((https?)\:\/\/)?([^\?\:\/#]+)(\:([0-9]+))?(\/[^\?\#]*)?(\?([^#]*))?(#.*)?/i;
    var match = url.match(urlRe);
    var port = match[5] || '';
    var search = match[8] ? "?" + match[8] : '';
    var ret = {
        full: url,
        protocol: match[2] || 'http:',
        host: port ? match[3] + ":" + port : match[3],
        hostname: match[3],
        port: port,
        path: match[6] || '/',
        search: search,
        hash: match[9] || '',
        query: undefined,
    };
    // fix empty hash
    if (ret.hash === '#' || ret.hash === '#!') {
        ret.hash = '';
    }
    ret.query = parseUrlParams(match[8]);
    return ret;
}
export function getUrlPath(url) {
    var parsedUrl = parseUrl(url);
    var path = parsedUrl.path;
    var pathAsArray = path.substring(1).split('/');
    var fullPath = pathAsArray.slice(1);
    return fullPath;
}
export function getUrlQuery(url) {
    return parseUrl(url).query;
}
//# sourceMappingURL=urlUtils.js.map