export default (function e(t) {
    function r(e) {
        return function(t, r) {
            return a(t, Object.assign({
                method: e
            }, r))
        }
    }

    function o(e) {
        return function(t, r, o) {
            return a(t, Object.assign({
                method: e,
                data: r
            }, o))
        }
    }

    function n(e, t, r) {
        if (Array.isArray(e)) return e.concat(t);
        if (t && "object" == typeof t) {
            var o, a = {};
            if (e)
                for (o in e) a[r ? o.toLowerCase() : o] = e[o];
            for (o in t) {
                var i = r ? o.toLowerCase() : o;
                "headers" === i && (r = !0), a[i] = o in a ? n(a[i], t[o], r) : t[o]
            }
            return a
        }
        return t
    }

    function a(e, r) {
        "string" != typeof e && (e = (r = e).url);
        var o = n(t, r || {}),
            a = o.data;
        if (o.transformRequest)
            for (var i = 0; i < o.transformRequest.length; i++) {
                var s = o.transformRequest[i](a, o.headers);
                void 0 !== s && (a = s)
            }
        var u = {};
        if (a && "object" == typeof a && (a = JSON.stringify(a), u["Content-Type"] = "application/json"), o.xsrfCookieName)
            for (var f = document.cookie.split(/ *[;=] */), c = 0; c < f.length; c += 2)
                if (f[c] == o.xsrfCookieName) {
                    u[o.xsrfHeaderName] = decodeURIComponent(f[c + 1]);
                    break
                }
        o.auth && (u.Authorization = o.auth);
        var p = {};
        return p.config = r, fetch(e, {
            method: o.method,
            body: a,
            headers: n(o.headers, u, !0)
        }).then(function(e) {
            var t;
            for (t in e) "function" != typeof e[t] && (p[t] = e[t]);
            return (o.validateStatus ? o.validateStatus(e.status) : e.ok) ? ("stream" === o.responseType ? Promise.resolve(e.body) : e[o.responseType || "text"]()).then(function(e) {
                return p.data = e, p
            }) : Promise.reject(e)
        })
    }
    return t = t || {}, a.request = a, a.get = r("get"), a.delete = r("delete"), a.options = r("options"), a.post = o("post"), a.put = o("put"), a.patch = o("patch"), a.all = Promise.all, a.spread = function(e) {
        return function(t) {
            return e.apply(this, t)
        }
    }, a.CancelToken = self.AbortController || Object, a.create = e, a
}());
//# sourceMappingURL=redaxios.module.js.map