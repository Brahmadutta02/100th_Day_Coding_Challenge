/* tslint:disable */
/* eslint:disable */
/**
 * @typedef {Object} categoryPageBreadcrumbClickedParams
 * @property {string} appName - null
 * @property {string} destinationCategoryId - destination category ID (collections by legacy)
 * @property {boolean} isMerchant - isMerchant status
 * @property {string} link - Link URL
 * @property {GUID} bi_token - null
 * @property {string} originCategoryId - Origin category ID (collections by legacy)
 * @property {GUID} storeId - null
 **/
/**
 * Name: Category page breadcrumb clicked. Evid: 832.
 * Event description: Category page breadcrumb clicked.

 * appName - Type: string.
 *
 * destinationCategoryId - Type: string. Desc: destination category ID (collections by legacy)
 *
 * isMerchant - Type: bool. Desc: isMerchant status
 *
 * link - Type: string. Desc: Link URL
 *
 * bi_token - Type: guid.
 *
 * originCategoryId - Type: string. Desc: Origin category ID (collections by legacy)
 *
 * storeId - Type: guid.
 * @param {categoryPageBreadcrumbClickedParams} params The parameters for this event.
 * @return {Object} LogObject
**/
export var categoryPageBreadcrumbClicked = function(params) {
    return {
        evid: 832,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
};
/**
 * @typedef {Object} clientCallingSetupForGettingExperimentsParams
 * @property {string} appName - null
 * @property {string} direction - to petri / from petri
 * @property {boolean} isMerchant - null
 * @property {GUID} msid - msid
 * @property {GUID} bi_token - null
 * @property {string} result - result from petri server
 * @property {GUID} storeId - store_id
 * @property {GUID} visitorId - visitor_id
 **/
/**
 * Name: Client calling “setup” for getting experiments. Evid: 888.
 * Event description: Client calling “setup” for getting experiments on this visitor.

 * appName - Type: string.
 *
 * direction - Type: string. Desc: to petri / from petri
 *
 * isMerchant - Type: bool.
 *
 * msid - Type: guid. Desc: msid
 *
 * bi_token - Type: guid.
 *
 * result - Type: string. Desc: result from petri server
 *
 * storeId - Type: guid. Desc: store_id
 *
 * visitorId - Type: guid. Desc: visitor_id
 * @param {clientCallingSetupForGettingExperimentsParams} params The parameters for this event.
 * @return {Object} LogObject
**/
export var clientCallingSetupForGettingExperiments = function(params) {
    return {
        evid: 888,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
};
/**
 * @typedef {Object} showHideCategoryListSidebarParams
 * @property {string} action - checked / unchecked
 * @property {string} appName - null
 * @property {string} componentName - Category_list
 * @property {boolean} isMerchant - isMerchant status
 * @property {GUID} bi_token - null
 * @property {GUID} storeId - null
 **/
/**
 * Name: show/hide category list sidebar. Evid: 821.
 * Event description: show/hide category list sidebar.

 * action - Type: string. Desc: checked / unchecked
 *
 * appName - Type: string.
 *
 * componentName - Type: string. Desc: Category_list
 *
 * isMerchant - Type: bool. Desc: isMerchant status
 *
 * bi_token - Type: guid.
 *
 * storeId - Type: guid.
 * @param {showHideCategoryListSidebarParams} params The parameters for this event.
 * @return {Object} LogObject
**/
export var showHideCategoryListSidebar = function(params) {
    return {
        evid: 821,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
};
/**
 * @typedef {Object} clickOnMorePaymentOptionsParams
 * @property {string} appName - null
 * @property {boolean} isBlocks - Is the product page is using Blocks.
 * @property {boolean} isMerchant - null
 * @property {GUID} bi_token - null
 * @property {GUID} storeId - null
 **/
/**
 * Name: Click on More Payment Options. Evid: 854.
 * Event description: When UoU clicks on 'More Payment Options' link in product page..

 * appName - Type: string.
 *
 * isBlocks - Type: bool. Desc: Is the product page is using Blocks.
 *
 * isMerchant - Type: bool.
 *
 * bi_token - Type: guid.
 *
 * storeId - Type: guid.
 * @param {clickOnMorePaymentOptionsParams} params The parameters for this event.
 * @return {Object} LogObject
**/
export var clickOnMorePaymentOptions = function(params) {
    return {
        evid: 854,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
};
/**
 * @typedef {Object} currencyConverterChooseSiteCurrencyDisplayParams
 * @property {string} appName - currencyconverter-settings
 * @property {string} editorMode - mobile / desktop
 * @property {GUID} instance_id - instance_id
 * @property {boolean} isMerchant - isMerchant status
 * @property {GUID} bi_token - null
 * @property {string} newValue - chosen display currency
 * @property {string} siteCurrency - original site currency
 * @property {GUID} storeId - store_id
 **/
/**
 * Name: currency converter - choose site currency display. Evid: 534.
 * Event description: when a buyer chooses the site currency display in the currency converter dropdown.

 * appName - Type: string. Desc: currencyconverter-settings
 *
 * editorMode - Type: string. Desc: mobile / desktop
 *
 * instance_id - Type: guid. Desc: instance_id
 *
 * isMerchant - Type: bool. Desc: isMerchant status
 *
 * bi_token - Type: guid.
 *
 * newValue - Type: string. Desc: chosen display currency
 *
 * siteCurrency - Type: string. Desc: original site currency
 *
 * storeId - Type: guid. Desc: store_id
 * @param {currencyConverterChooseSiteCurrencyDisplayParams} params The parameters for this event.
 * @return {Object} LogObject
**/
export var currencyConverterChooseSiteCurrencyDisplay = function(params) {
    return {
        evid: 534,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
};
/**
 * @typedef {Object} couponAppliedSfParams
 * @property {number} additionalFeesPrice - INT, multiplied by 100 000 - sum of all additional fees price in cart
 * @property {string} appName - null
 * @property {GUID} cartId - null
 * @property {GUID} checkoutId - null
 * @property {string} couponCode - null
 * @property {boolean} isMember - is_member
 * @property {boolean} isMerchant - isMerchant status
 * @property {boolean} isOwner - is_owner
 * @property {GUID} bi_token - null
 * @property {number} numberOfAdditionalFees - number of all additional fees in the cart
 * @property {string} origin - OA StoreFront
 * @property {GUID} owner_id - owner_id
 * @property {GUID} storeId - null
 * @property {GUID} uuid - uuid
 * @property {GUID} visitor_id - null
 **/
/**
 * Name: Click 'Apply' Coupon  SF. Evid: 112.
 * Event description: after entering promo code click on Apply. since june 2019 can be sent also from OA StoreFront.

 * additionalFeesPrice - Type: numeric. Desc: INT, multiplied by 100 000 - sum of all additional fees price in cart
 *
 * appName - Type: string.
 *
 * cartId - Type: guid.
 *
 * checkoutId - Type: guid.
 *
 * couponCode - Type: string.
 *
 * isMember - Type: bool. Desc: is_member
 *
 * isMerchant - Type: bool. Desc: isMerchant status
 *
 * isOwner - Type: bool. Desc: is_owner
 *
 * bi_token - Type: guid.
 *
 * numberOfAdditionalFees - Type: numeric. Desc: number of all additional fees in the cart
 *
 * origin - Type: string. Desc: OA StoreFront
 *
 * owner_id - Type: guid. Desc: owner_id
 *
 * storeId - Type: guid.
 *
 * uuid - Type: guid. Desc: uuid
 *
 * visitor_id - Type: guid.
 * @param {couponAppliedSfParams} params The parameters for this event.
 * @return {Object} LogObject
**/
export var couponAppliedSf = function(params) {
    return {
        evid: 112,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
};
/**
 * @typedef {Object} productGalleryResizeSfParams
 * @property {string} appName - null
 * @property {GUID} categoryId - null
 * @property {boolean} isMerchant - isMerchant status
 * @property {GUID} bi_token - null
 * @property {GUID} storeId - null
 * @property {GUID} visitor_id - null
 * @property {number} newGalleryWidth - null
 **/
/**
 * Name: product Gallery Resize SF. Evid: 15.


 * appName - Type: string.
 *
 * categoryId - Type: guid.
 *
 * isMerchant - Type: bool. Desc: isMerchant status
 *
 * bi_token - Type: guid.
 *
 * storeId - Type: guid.
 *
 * visitor_id - Type: guid.
 *
 * newGalleryWidth - Type: numeric.
 * @param {productGalleryResizeSfParams} params The parameters for this event.
 * @return {Object} LogObject
**/
export var productGalleryResizeSf = function(params) {
    return {
        evid: 15,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
};
/**
 * @typedef {Object} placeOrderSfParams
 * @property {string} appName - null
 * @property {GUID} cartId - cartId
 * @property {string} cartType - Digital/ Physical/ mixed (Digital &Physical)
 * @property {GUID} checkoutId - checkout_id
 * @property {string} couponCode - coupon_code
 * @property {boolean} customFieldMandatory - true - if custom field was mandatory on checkout
 * @property {string} flowType - fast flow / quick flow
 * @property {string} giftCardCode - gift_card_code
 * @property {GUID} giftCardId - gift_card_id
 * @property {boolean} hasCustomField - true - if order was placed with filled custom field
 * @property {boolean} hasPaymentMethod - true / false
 * @property {boolean} is_member - is_memebr
 * @property {boolean} isMerchant - isMerchant status
 * @property {boolean} isOwner - true for merchant
 * @property {boolean} isPremium - true / false
 * @property {GUID} bi_token - null
 * @property {number} numOfLineItems - number of uniq products
 * @property {string} origin - OA StoreFront
 * @property {GUID} owner_id - owner_id
 * @property {string} paymentMethod - paymentMethod
 * @property {GUID} siteMemberId - member id
 * @property {GUID} storeId - null
 * @property {GUID} uuid - uuid
 * @property {GUID} visitor_id - visitor_id
 **/
/**
 * Name: Click Place order SF. Evid: 168.
 * Event description: click on place order (client event). since june 2019 also from OneApp (leads to cashier screen to choose payment method and pay).

 * appName - Type: string.
 *
 * cartId - Type: guid. Desc: cartId
 *
 * cartType - Type: string. Desc: Digital/ Physical/ mixed (Digital &Physical)
 *
 * checkoutId - Type: guid. Desc: checkout_id
 *
 * couponCode - Type: string. Desc: coupon_code
 *
 * customFieldMandatory - Type: bool. Desc: true - if custom field was mandatory on checkout
 *
 * flowType - Type: string. Desc: fast flow / quick flow
 *
 * giftCardCode - Type: string. Desc: gift_card_code
 *
 * giftCardId - Type: guid. Desc: gift_card_id
 *
 * hasCustomField - Type: bool. Desc: true - if order was placed with filled custom field
 *
 * hasPaymentMethod - Type: bool. Desc: true / false
 *
 * is_member - Type: bool. Desc: is_memebr
 *
 * isMerchant - Type: bool. Desc: isMerchant status
 *
 * isOwner - Type: bool. Desc: true for merchant
 *
 * isPremium - Type: bool. Desc: true / false
 *
 * bi_token - Type: guid.
 *
 * numOfLineItems - Type: numeric. Desc: number of uniq products
 *
 * origin - Type: string. Desc: OA StoreFront
 *
 * owner_id - Type: guid. Desc: owner_id
 *
 * paymentMethod - Type: string. Desc: paymentMethod
 *
 * siteMemberId - Type: guid. Desc: member id
 *
 * storeId - Type: guid.
 *
 * uuid - Type: guid. Desc: uuid
 *
 * visitor_id - Type: guid. Desc: visitor_id
 * @param {placeOrderSfParams} params The parameters for this event.
 * @return {Object} LogObject
**/
export var placeOrderSf = function(params) {
    return {
        evid: 168,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
};
/**
 * @typedef {Object} clickOnCustomizeButtonInTheSettingsMenuParams
 * @property {string} appName - app_name
 * @property {string} component_id - grid gallery, slider galeery, product page
 * @property {boolean} isMerchant - isMerchant status
 * @property {GUID} bi_token - null
 * @property {string} origin - editor / onboarding
 * @property {GUID} storeId - store_id
 * @property {string} targetTab - the target tab this buton reffer to
 * @property {GUID} userGuid - userGuid
 **/
/**
 * Name: Click on Customize button in the settings menu. Evid: 35.
 * Event description: click on customize button in the main tab on the new settings menu
(For members components).

 * appName - Type: string. Desc: app_name
 *
 * component_id - Type: string. Desc: grid gallery, slider galeery, product page
 *
 * isMerchant - Type: bool. Desc: isMerchant status
 *
 * bi_token - Type: guid.
 *
 * origin - Type: string. Desc: editor / onboarding
 *
 * storeId - Type: guid. Desc: store_id
 *
 * targetTab - Type: string. Desc: the target tab this buton reffer to
 *
 * userGuid - Type: guid. Desc: userGuid
 * @param {clickOnCustomizeButtonInTheSettingsMenuParams} params The parameters for this event.
 * @return {Object} LogObject
**/
export var clickOnCustomizeButtonInTheSettingsMenu = function(params) {
    return {
        evid: 35,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
};
/**
 * @typedef {Object} clickOnUpgradeButtonInProPlanModalParams
 * @property {string} appName - null
 * @property {string} component_id - CurrencyConverter, AvalaraTax
 * @property {boolean} isMerchant - isMerchant status
 * @property {GUID} bi_token - null
 * @property {string} origin - editor / onboarding / StoresBO
 * @property {string} package_name - The type of the premium package that is connected to the site (if free then null)
 * @property {GUID} storeId - store_id
 * @property {string} type - button / tooltip / banner
 **/
/**
 * Name: High RPU -> Click in upgrade modal. Evid: 847.
 * Event description: When the user clicks on the upgrade button in pro plan modal (high RPU upgrade modal).

 * appName - Type: string.
 *
 * component_id - Type: string. Desc: CurrencyConverter, AvalaraTax
 *
 * isMerchant - Type: bool. Desc: isMerchant status
 *
 * bi_token - Type: guid.
 *
 * origin - Type: string. Desc: editor / onboarding / StoresBO
 *
 * package_name - Type: string. Desc: The type of the premium package that is connected to the site (if free then null)
 *
 * storeId - Type: guid. Desc: store_id
 *
 * type - Type: string. Desc: button / tooltip / banner
 * @param {clickOnUpgradeButtonInProPlanModalParams} params The parameters for this event.
 * @return {Object} LogObject
**/
export var clickOnUpgradeButtonInProPlanModal = function(params) {
    return {
        evid: 847,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
};
/**
 * @typedef {Object} currencyConverterClickAddCurrencySfeParams
 * @property {string} appName - currencyconverter-settings
 * @property {GUID} instance_id - instance_id
 * @property {boolean} isMerchant - isMerchant status
 * @property {GUID} bi_token - null
 * @property {GUID} storeId - store_id
 **/
/**
 * Name: currency converter - click ‘Add Currency’ SFE. Evid: 530.
 * Event description: click ‘Add Currency’ in currency converter settings (under 'Currencies' panel) to open modal..

 * appName - Type: string. Desc: currencyconverter-settings
 *
 * instance_id - Type: guid. Desc: instance_id
 *
 * isMerchant - Type: bool. Desc: isMerchant status
 *
 * bi_token - Type: guid.
 *
 * storeId - Type: guid. Desc: store_id
 * @param {currencyConverterClickAddCurrencySfeParams} params The parameters for this event.
 * @return {Object} LogObject
**/
export var currencyConverterClickAddCurrencySfe = function(params) {
    return {
        evid: 530,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
};
/**
 * @typedef {Object} pagesAtAppInstallationParams
 * @property {GUID} appid - app def id
 * @property {string} appName - null
 * @property {string} identityType - identityType
 * @property {string} initiatorName - EDITOR / DASHBOARD
 * @property {string} installationType - originally_in_template/siteless/duplicate/the rest will be manual
 * @property {boolean} isMerchant - null
 * @property {GUID} msid - msid
 * @property {GUID} bi_token - null
 * @property {string} pageName - i.e Shop page/ Categories page..
 * @property {GUID} storeId - null
 * @property {GUID} uuid - uuid
 **/
/**
 * Name: Pages at App Installation. Evid: 849.
 * Event description: event sent for each page that is installed within the app installation (i.e Shop page, Cart Page..).

 * appid - Type: guid. Desc: app def id
 *
 * appName - Type: string.
 *
 * identityType - Type: string. Desc: identityType
 *
 * initiatorName - Type: string. Desc: EDITOR / DASHBOARD
 *
 * installationType - Type: string. Desc: originally_in_template/siteless/duplicate/the rest will be manual
 *
 * isMerchant - Type: bool.
 *
 * msid - Type: guid. Desc: msid
 *
 * bi_token - Type: guid.
 *
 * pageName - Type: string. Desc: i.e Shop page/ Categories page..
 *
 * storeId - Type: guid.
 *
 * uuid - Type: guid. Desc: uuid
 * @param {pagesAtAppInstallationParams} params The parameters for this event.
 * @return {Object} LogObject
**/
export var pagesAtAppInstallation = function(params) {
    return {
        evid: 849,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
};
/**
 * @typedef {Object} clickedOnProductQuickViewSfParams
 * @property {string} appName - null
 * @property {string} galleryInputId - productId/ collectionId. the input ID of the gallery - when it shows collection -> collection id, when it shows related products - product id (when on product page) null when (other pages), when it shows all products -> null
 * @property {string} galleryProductsLogic - the logic of the gallery the user clicked on (all-products, collection, related-products)
 * @property {string} galleryType - The gallery that the user clocked on (slider-gallery, grid-gallery,shop-page)
 * @property {boolean} hasOptions - null
 * @property {boolean} hasRibbon - null
 * @property {GUID} impressionId - unique guid for the gallery loading session
 * @property {number} index - null
 * @property {boolean} isMerchant - isMerchant status
 * @property {GUID} bi_token - null
 * @property {string} productId - null
 * @property {number} rank - the rank of the product that was clicked
 * @property {GUID} storeId - null
 * @property {GUID} visitor_id - null
 **/
/**
 * Name: Clicked on product quick view SF. Evid: 12.


 * appName - Type: string.
 *
 * galleryInputId - Type: string. Desc: productId/ collectionId. the input ID of the gallery - when it shows collection -> collection id, when it shows related products - product id (when on product page) null when (other pages), when it shows all products -> null
 *
 * galleryProductsLogic - Type: string. Desc: the logic of the gallery the user clicked on (all-products, collection, related-products)
 *
 * galleryType - Type: string. Desc: The gallery that the user clocked on (slider-gallery, grid-gallery,shop-page)
 *
 * hasOptions - Type: bool.
 *
 * hasRibbon - Type: bool.
 *
 * impressionId - Type: guid. Desc: unique guid for the gallery loading session
 *
 * index - Type: numeric.
 *
 * isMerchant - Type: bool. Desc: isMerchant status
 *
 * bi_token - Type: guid.
 *
 * productId - Type: string.
 *
 * rank - Type: numeric. Desc: the rank of the product that was clicked
 *
 * storeId - Type: guid.
 *
 * visitor_id - Type: guid.
 * @param {clickedOnProductQuickViewSfParams} params The parameters for this event.
 * @return {Object} LogObject
**/
export var clickedOnProductQuickViewSf = function(params) {
    return {
        evid: 12,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
};
/**
 * @typedef {Object} clickToViewProductVeloParams
 * @property {string} appName - null
 * @property {GUID} impressionId - unique guid for the gallery loading session
 * @property {boolean} isMerchant - null
 * @property {string} model - the model shown in the slider gallery
 * @property {GUID} bi_token - null
 * @property {string} productId - product_guid
 * @property {string} productList - array of the prdocutIds in the gallery (sorted by ranking)
 * @property {number} rank - The ranking of the product in the gallery
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_id
 **/
/**
 * Name: Click to View Product Velo. Evid: 640.
 * Event description: sent from product gallery made by Velo..

 * appName - Type: string.
 *
 * impressionId - Type: guid. Desc: unique guid for the gallery loading session
 *
 * isMerchant - Type: bool.
 *
 * model - Type: string. Desc: the model shown in the slider gallery
 *
 * bi_token - Type: guid.
 *
 * productId - Type: string. Desc: product_guid
 *
 * productList - Type: string. Desc: array of the prdocutIds in the gallery (sorted by ranking)
 *
 * rank - Type: numeric. Desc: The ranking of the product in the gallery
 *
 * storeId - Type: guid. Desc: store_id
 *
 * visitor_id - Type: guid. Desc: visitor_id
 * @param {clickToViewProductVeloParams} params The parameters for this event.
 * @return {Object} LogObject
**/
export var clickToViewProductVelo = function(params) {
    return {
        evid: 640,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
};
/**
 * @typedef {Object} productAddedToWishlistSfParams
 * @property {string} appName - app_name
 * @property {boolean} hasOptions - does the product have options
 * @property {boolean} isMerchant - null
 * @property {boolean} isOwner - true for owner false for member. since june 2019
 * @property {GUID} bi_token - null
 * @property {string} origin - product-page / gallery-page / quick-view / product-widget
 * @property {GUID} owner_id - id of site's owner. since june 2019
 * @property {string} productId - product_guid
 * @property {string} productType - Digital/ Physical
 * @property {GUID} storeId - store_id
 * @property {string} viewMode - editor / site / preview
 **/
/**
 * Name: Product added to wishlist SF. Evid: 267.
 * Event description: when a product was successfully added to wishlist after the buyer clicks on button.

 * appName - Type: string. Desc: app_name
 *
 * hasOptions - Type: bool. Desc: does the product have options
 *
 * isMerchant - Type: bool.
 *
 * isOwner - Type: bool. Desc: true for owner false for member. since june 2019
 *
 * bi_token - Type: guid.
 *
 * origin - Type: string. Desc: product-page / gallery-page / quick-view / product-widget
 *
 * owner_id - Type: guid. Desc: id of site's owner. since june 2019
 *
 * productId - Type: string. Desc: product_guid
 *
 * productType - Type: string. Desc: Digital/ Physical
 *
 * storeId - Type: guid. Desc: store_id
 *
 * viewMode - Type: string. Desc: editor / site / preview
 * @param {productAddedToWishlistSfParams} params The parameters for this event.
 * @return {Object} LogObject
**/
export var productAddedToWishlistSf = function(params) {
    return {
        evid: 267,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
};
/**
 * @typedef {Object} changeHoverTypeSfeParams
 * @property {string} appName - null
 * @property {string} component_id - grid gallery, slider gallery, product page, product widget...
 * @property {boolean} isMerchant - isMerchant status
 * @property {GUID} bi_token - null
 * @property {string} origin - editor / onboarding
 * @property {GUID} storeId - null
 * @property {string} type - chosen hover type
 * @property {GUID} userGuid - userGuid
 **/
/**
 * Name: change hover type SFE. Evid: 828.
 * Event description: merchant changes hover behavior in widget settings.

 * appName - Type: string.
 *
 * component_id - Type: string. Desc: grid gallery, slider gallery, product page, product widget...
 *
 * isMerchant - Type: bool. Desc: isMerchant status
 *
 * bi_token - Type: guid.
 *
 * origin - Type: string. Desc: editor / onboarding
 *
 * storeId - Type: guid.
 *
 * type - Type: string. Desc: chosen hover type
 *
 * userGuid - Type: guid. Desc: userGuid
 * @param {changeHoverTypeSfeParams} params The parameters for this event.
 * @return {Object} LogObject
**/
export var changeHoverTypeSfe = function(params) {
    return {
        evid: 828,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
};
/**
 * @typedef {Object} chooseAPageToDisplayThisCollectionOnClickedParams
 * @property {string} appName - null
 * @property {string} button_name - Add collection/ cancel
 * @property {string} categoryId - collection id
 * @property {string} name - collection_name
 * @property {boolean} isMerchant - null
 * @property {GUID} bi_token - null
 * @property {string} pageName - page_name if available
 * @property {string} pageType - new/existing
 * @property {GUID} storeId - null
 **/
/**
 * Name: Choose a Page to display this collection on clicked. Evid: 471.
 * Event description: in the editor, when adding a collection , coming from SM CTA - add collection to page..

 * appName - Type: string.
 *
 * button_name - Type: string. Desc: Add collection/ cancel
 *
 * categoryId - Type: string. Desc: collection id
 *
 * name - Type: string. Desc: collection_name
 *
 * isMerchant - Type: bool.
 *
 * bi_token - Type: guid.
 *
 * pageName - Type: string. Desc: page_name if available
 *
 * pageType - Type: string. Desc: new/existing
 *
 * storeId - Type: guid.
 * @param {chooseAPageToDisplayThisCollectionOnClickedParams} params The parameters for this event.
 * @return {Object} LogObject
**/
export var chooseAPageToDisplayThisCollectionOnClicked = function(params) {
    return {
        evid: 471,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
};
/**
 * @typedef {Object} checkoutPageSpecificStageExpandedSfParams
 * @property {string} additionalRequiredField - only for 'placeOrderFastFlow' stage: required additional field that we didnt get info fron PayPal) for "Place Order" button to be clickable='state'/'zip code' / 'state and zip code' / 'none'
 * @property {string} appName - app_name
 * @property {GUID} cartId - cart_id
 * @property {string} cartType - Digital/ Physical/ mixed (Digital &Physical)
 * @property {GUID} checkoutId - null
 * @property {number} itemsCount - number of items in the cart
 * @property {string} flowType - 'quick flow' / 'full flow'
 * @property {boolean} hasGiftCard - payment stage only - true  if visitor sees the Gift Card Checkbox
 * @property {boolean} isFirstTimeUsage - True If the user sees this stage for the first time, false if it's from edit click
 * @property {boolean} isGiftCardApplied - payment stage only  - true if giftcard is already applied on load
 * @property {boolean} isCartPaidOnlyWithGiftCard - payment stage only  - if true cashier component is hidden (due to gift card fully cover the order (with coupon or without)
 * @property {boolean} is_member - true is the visitor signed in as a member, false otherwise
 * @property {boolean} isMerchant - isMerchant status
 * @property {boolean} isOwner - true for merchant false for member
 * @property {GUID} bi_token - msid
 * @property {number} num_of_shipping - number of shipping choices presented to the visitor at the first time
 * @property {string} origin - 'OA StoreFront' (for OneApp)
 * @property {GUID} owner_id - uuid of site owner
 * @property {boolean} savedAddress - true if the member has saved address
 * @property {string} shippingMethodType - shipping /store pickup / none
 * @property {string} shippingStatus - data on shipping status from shipping service, only relevant after shipping details were field
 * @property {GUID} siteMemberId - member
 * @property {string} stage - the edited stage - payment / shippingDetails / deliveryMethod / payment-method / pickupDetails / shipping-method / customerDetails
 * @property {GUID} storeId - store_id
 * @property {GUID} uuid - uuid
 * @property {GUID} visitor_id - visitor_id
 **/
/**
 * Name: checkout page -> specific stage expanded SF. Evid: 37.
 * Event description: when a new stage is expanded and another collapse.
When all data is visible. since june 2019 is sent also from OneApp.

 * additionalRequiredField - Type: string. Desc: only for 'placeOrderFastFlow' stage: required additional field that we didnt get info fron PayPal) for "Place Order" button to be clickable='state'/'zip code' / 'state and zip code' / 'none'
 *
 * appName - Type: string. Desc: app_name
 *
 * cartId - Type: guid. Desc: cart_id
 *
 * cartType - Type: string. Desc: Digital/ Physical/ mixed (Digital &Physical)
 *
 * checkoutId - Type: guid.
 *
 * itemsCount - Type: numeric. Desc: number of items in the cart
 *
 * flowType - Type: string. Desc: 'quick flow' / 'full flow'
 *
 * hasGiftCard - Type: bool. Desc: payment stage only - true  if visitor sees the Gift Card Checkbox
 *
 * isFirstTimeUsage - Type: bool. Desc: True If the user sees this stage for the first time, false if it's from edit click
 *
 * isGiftCardApplied - Type: bool. Desc: payment stage only  - true if giftcard is already applied on load
 *
 * isCartPaidOnlyWithGiftCard - Type: bool. Desc: payment stage only  - if true cashier component is hidden (due to gift card fully cover the order (with coupon or without)
 *
 * is_member - Type: bool. Desc: true is the visitor signed in as a member, false otherwise
 *
 * isMerchant - Type: bool. Desc: isMerchant status
 *
 * isOwner - Type: bool. Desc: true for merchant false for member
 *
 * bi_token - Type: guid. Desc: msid
 *
 * num_of_shipping - Type: numeric. Desc: number of shipping choices presented to the visitor at the first time
 *
 * origin - Type: string. Desc: 'OA StoreFront' (for OneApp)
 *
 * owner_id - Type: guid. Desc: uuid of site owner
 *
 * savedAddress - Type: bool. Desc: true if the member has saved address
 *
 * shippingMethodType - Type: string. Desc: shipping /store pickup / none
 *
 * shippingStatus - Type: string. Desc: data on shipping status from shipping service, only relevant after shipping details were field
 *
 * siteMemberId - Type: guid. Desc: member
 *
 * stage - Type: string. Desc: the edited stage - payment / shippingDetails / deliveryMethod / payment-method / pickupDetails / shipping-method / customerDetails
 *
 * storeId - Type: guid. Desc: store_id
 *
 * uuid - Type: guid. Desc: uuid
 *
 * visitor_id - Type: guid. Desc: visitor_id
 * @param {checkoutPageSpecificStageExpandedSfParams} params The parameters for this event.
 * @return {Object} LogObject
**/
export var checkoutPageSpecificStageExpandedSf = function(params) {
    return {
        evid: 37,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
};
/**
 * @typedef {Object} oaSfClickOnProductSocialShareParams
 * @property {string} appName - null
 * @property {boolean} isMerchant - null
 * @property {GUID} bi_token - msid
 * @property {string} productId - product guid
 * @property {GUID} storeId - store_id
 **/
/**
 * Name: OA SF - Click on Product social share. Evid: 226.
 * Event description: when member click on social share for product in Store Front OneApp. Till 09.03.20 was sent from ec-sm, 10-22.03.20 was invalid (started to be sent from ec-sf but no changes in Catalog) , since 23.03 copied to ec-sf.

 * appName - Type: string.
 *
 * isMerchant - Type: bool.
 *
 * bi_token - Type: guid. Desc: msid
 *
 * productId - Type: string. Desc: product guid
 *
 * storeId - Type: guid. Desc: store_id
 * @param {oaSfClickOnProductSocialShareParams} params The parameters for this event.
 * @return {Object} LogObject
**/
export var oaSfClickOnProductSocialShare = function(params) {
    return {
        evid: 226,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
};
/**
 * @typedef {Object} viewCartPageSfParams
 * @property {number} additionalFeesPrice - INT, multiplied by 100 000 - sum of all additional fees price in cart
 * @property {string} appName - app_name
 * @property {string} cartId - cartId
 * @property {string} cartType - Digital/ Physical/ mixed (Digital &Physical)
 * @property {GUID} checkoutId - checkout_id
 * @property {string} checkoutType - in viewer / out of viewer
 * @property {number} itemsCount - number of items in the cart
 * @property {boolean} isContinueShopping - show continue shopping link in cart
 * @property {boolean} isDeliveryRates - show delivery rates in cart
 * @property {boolean} isFullWidth - is the full width setting in the cart on / off
 * @property {boolean} is_member - true is the visitor signed in as a member, false otherwise
 * @property {boolean} isMembersInstalled - true if members app installed on site, false otherwise
 * @property {boolean} isMerchant - isMerchant status
 * @property {boolean} is_note - show add a note to seller in cart
 * @property {boolean} isOwner - is_owner
 * @property {boolean} isPickupAvailable - is pickup available
 * @property {boolean} is_promo_code - show/hide promo code (coupon) in the cart & checkout
 * @property {boolean} isShippingCalculated - is the shipping estimation is calculated
 * @property {boolean} isTaxCosts - show tax costs in cart
 * @property {boolean} is_with_ewallet_payment - does the store has an ewallet payment connected (and displaying in cart)
 * @property {boolean} is_with_offline_payment - does the store has an offline payment connected
 * @property {GUID} bi_token - msid
 * @property {number} lineItemsCount - number of line items in cart
 * @property {number} num_of_paymet_providers - How many payment providers does the store has connected
 * @property {number} num_of_shipping - number of shipping choices presented to the visitor at the first time
 * @property {number} numberOfAdditionalFees - number of all additional fees in the cart
 * @property {string} origin - add to cart / mini cart / cart widget / checkout / 'eWallet redirect - cancel'
 * @property {GUID} owner_id - owner_id
 * @property {string} paymet_providers - array of payment providers connected to the store
 * @property {string} shippingReason - the reason why the shipping is not calculated (unknown = POS/digital cart)
 * @property {GUID} siteMemberId - member guid
 * @property {GUID} storeId - store_id
 * @property {GUID} uuid - uuid
 * @property {string} viewMode - editor / site / preview
 * @property {GUID} visitorId - visitorId
 **/
/**
 * Name: view cart page SF. Evid: 124.
 * Event description: view cart page. since june 2019 also for OneApp Store front.

 * additionalFeesPrice - Type: numeric. Desc: INT, multiplied by 100 000 - sum of all additional fees price in cart
 *
 * appName - Type: string. Desc: app_name
 *
 * cartId - Type: string. Desc: cartId
 *
 * cartType - Type: string. Desc: Digital/ Physical/ mixed (Digital &Physical)
 *
 * checkoutId - Type: guid. Desc: checkout_id
 *
 * checkoutType - Type: string. Desc: in viewer / out of viewer
 *
 * itemsCount - Type: numeric. Desc: number of items in the cart
 *
 * isContinueShopping - Type: bool. Desc: show continue shopping link in cart
 *
 * isDeliveryRates - Type: bool. Desc: show delivery rates in cart
 *
 * isFullWidth - Type: bool. Desc: is the full width setting in the cart on / off
 *
 * is_member - Type: bool. Desc: true is the visitor signed in as a member, false otherwise
 *
 * isMembersInstalled - Type: bool. Desc: true if members app installed on site, false otherwise
 *
 * isMerchant - Type: bool. Desc: isMerchant status
 *
 * is_note - Type: bool. Desc: show add a note to seller in cart
 *
 * isOwner - Type: bool. Desc: is_owner
 *
 * isPickupAvailable - Type: bool. Desc: is pickup available
 *
 * is_promo_code - Type: bool. Desc: show/hide promo code (coupon) in the cart & checkout
 *
 * isShippingCalculated - Type: bool. Desc: is the shipping estimation is calculated
 *
 * isTaxCosts - Type: bool. Desc: show tax costs in cart
 *
 * is_with_ewallet_payment - Type: bool. Desc: does the store has an ewallet payment connected (and displaying in cart)
 *
 * is_with_offline_payment - Type: bool. Desc: does the store has an offline payment connected
 *
 * bi_token - Type: guid. Desc: msid
 *
 * lineItemsCount - Type: numeric. Desc: number of line items in cart
 *
 * num_of_paymet_providers - Type: numeric. Desc: How many payment providers does the store has connected
 *
 * num_of_shipping - Type: numeric. Desc: number of shipping choices presented to the visitor at the first time
 *
 * numberOfAdditionalFees - Type: numeric. Desc: number of all additional fees in the cart
 *
 * origin - Type: string. Desc: add to cart / mini cart / cart widget / checkout / 'eWallet redirect - cancel'
 *
 * owner_id - Type: guid. Desc: owner_id
 *
 * paymet_providers - Type: string. Desc: array of payment providers connected to the store
 *
 * shippingReason - Type: string. Desc: the reason why the shipping is not calculated (unknown = POS/digital cart)
 *
 * siteMemberId - Type: guid. Desc: member guid
 *
 * storeId - Type: guid. Desc: store_id
 *
 * uuid - Type: guid. Desc: uuid
 *
 * viewMode - Type: string. Desc: editor / site / preview
 *
 * visitorId - Type: guid. Desc: visitorId
 * @param {viewCartPageSfParams} params The parameters for this event.
 * @return {Object} LogObject
**/
export var viewCartPageSf = function(params) {
    return {
        evid: 124,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
};
/**
 * @typedef {Object} removedProductFromCartSfParams
 * @property {number} additionalFeesPrice - INT, multiplied by 100 000 - sum of all additional fees price in cart
 * @property {string} appName - null
 * @property {GUID} cartId - null
 * @property {GUID} checkoutId - checkout_id
 * @property {number} itemsCount - null
 * @property {boolean} isMerchant - isMerchant status
 * @property {boolean} isOwner - true  - for merchant false for member
 * @property {GUID} bi_token - null
 * @property {number} numberOfAdditionalFees - number of all additional fees in the cart
 * @property {string} origin - null
 * @property {GUID} owner_id - uuid of site owner
 * @property {string} productId - null
 * @property {string} productType - Digital/ Physical
 * @property {GUID} storeId - null
 * @property {GUID} uuid - uuid
 * @property {GUID} visitor_id - null
 **/
/**
 * Name: Removed product from cart SF. Evid: 115.
 * Event description: Removed product from cart SF. since june 2019 also for OneApp StoreFront (member view). Sent for Ecom (with catalog_app_id) here for the mini cart flow (instead of src 130) until the rewrite of mini-cart)..

 * additionalFeesPrice - Type: numeric. Desc: INT, multiplied by 100 000 - sum of all additional fees price in cart
 *
 * appName - Type: string.
 *
 * cartId - Type: guid.
 *
 * checkoutId - Type: guid. Desc: checkout_id
 *
 * itemsCount - Type: numeric.
 *
 * isMerchant - Type: bool. Desc: isMerchant status
 *
 * isOwner - Type: bool. Desc: true  - for merchant false for member
 *
 * bi_token - Type: guid.
 *
 * numberOfAdditionalFees - Type: numeric. Desc: number of all additional fees in the cart
 *
 * origin - Type: string.
 *
 * owner_id - Type: guid. Desc: uuid of site owner
 *
 * productId - Type: string.
 *
 * productType - Type: string. Desc: Digital/ Physical
 *
 * storeId - Type: guid.
 *
 * uuid - Type: guid. Desc: uuid
 *
 * visitor_id - Type: guid.
 * @param {removedProductFromCartSfParams} params The parameters for this event.
 * @return {Object} LogObject
**/
export var removedProductFromCartSf = function(params) {
    return {
        evid: 115,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
};
/**
 * @typedef {Object} clickOnNavigationParams
 * @property {string} appName - null
 * @property {string} component - breadcrum/(Prev/Next)
 * @property {boolean} isBlocks - Is the product page is using Blocks.
 * @property {boolean} isMerchant - null
 * @property {GUID} bi_token - null
 * @property {GUID} storeId - null
 **/
/**
 * Name: Click on navigation. Evid: 856.
 * Event description: When UoU clicks on product page breadcrums of Prev/Next option..

 * appName - Type: string.
 *
 * component - Type: string. Desc: breadcrum/(Prev/Next)
 *
 * isBlocks - Type: bool. Desc: Is the product page is using Blocks.
 *
 * isMerchant - Type: bool.
 *
 * bi_token - Type: guid.
 *
 * storeId - Type: guid.
 * @param {clickOnNavigationParams} params The parameters for this event.
 * @return {Object} LogObject
**/
export var clickOnNavigation = function(params) {
    return {
        evid: 856,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
};
/**
 * @typedef {Object} clickRemoveFromWishlistSfParams
 * @property {string} appName - app_name
 * @property {boolean} hasOptions - does the product have options
 * @property {boolean} hasRibbon - does the product have ribbon
 * @property {boolean} isMerchant - isMerchant status
 * @property {boolean} isOwner - true for owner false for member. since june 2019
 * @property {GUID} bi_token - null
 * @property {string} origin - product-page / wishlist-gallery
 * @property {GUID} owner_id - id of site's owner. since june 2019
 * @property {string} productId - product_guid
 * @property {string} productType - Digital/ Physical
 * @property {GUID} storeId - store_id
 * @property {string} viewMode - editor / site / preview
 **/
/**
 * Name: Click remove from wishlist SF. Evid: 261.
 * Event description: buyer clicks on to remove product feom wishlist.

 * appName - Type: string. Desc: app_name
 *
 * hasOptions - Type: bool. Desc: does the product have options
 *
 * hasRibbon - Type: bool. Desc: does the product have ribbon
 *
 * isMerchant - Type: bool. Desc: isMerchant status
 *
 * isOwner - Type: bool. Desc: true for owner false for member. since june 2019
 *
 * bi_token - Type: guid.
 *
 * origin - Type: string. Desc: product-page / wishlist-gallery
 *
 * owner_id - Type: guid. Desc: id of site's owner. since june 2019
 *
 * productId - Type: string. Desc: product_guid
 *
 * productType - Type: string. Desc: Digital/ Physical
 *
 * storeId - Type: guid. Desc: store_id
 *
 * viewMode - Type: string. Desc: editor / site / preview
 * @param {clickRemoveFromWishlistSfParams} params The parameters for this event.
 * @return {Object} LogObject
**/
export var clickRemoveFromWishlistSf = function(params) {
    return {
        evid: 261,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
};
/**
 * @typedef {Object} socialButtonsParams
 * @property {string} appName - null
 * @property {string} socialButton - null
 * @property {boolean} isBlocks - Is the product page is using Blocks.
 * @property {boolean} isMerchant - isMerchant status
 * @property {GUID} bi_token - null
 * @property {string} productId - null
 * @property {GUID} storeId - null
 * @property {GUID} visitor_id - null
 **/
/**
 * Name: Social buttons. Evid: 62.
 * Event description: when a buyer clicks on the social buttons in the product page.

 * appName - Type: string.
 *
 * socialButton - Type: string.
 *
 * isBlocks - Type: bool. Desc: Is the product page is using Blocks.
 *
 * isMerchant - Type: bool. Desc: isMerchant status
 *
 * bi_token - Type: guid.
 *
 * productId - Type: string.
 *
 * storeId - Type: guid.
 *
 * visitor_id - Type: guid.
 * @param {socialButtonsParams} params The parameters for this event.
 * @return {Object} LogObject
**/
export var socialButtons = function(params) {
    return {
        evid: 62,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
};
/**
 * @typedef {Object} manageCategoryListSidebarParams
 * @property {string} action - Sync automatically / Customize manually
 * @property {string} appName - null
 * @property {string} componentName - Category_list
 * @property {boolean} isMerchant - null
 * @property {GUID} bi_token - null
 * @property {GUID} storeId - null
 **/
/**
 * Name: manage category list sidebar. Evid: 860.
 * Event description: manage category list sidebar.

 * action - Type: string. Desc: Sync automatically / Customize manually
 *
 * appName - Type: string.
 *
 * componentName - Type: string. Desc: Category_list
 *
 * isMerchant - Type: bool.
 *
 * bi_token - Type: guid.
 *
 * storeId - Type: guid.
 * @param {manageCategoryListSidebarParams} params The parameters for this event.
 * @return {Object} LogObject
**/
export var manageCategoryListSidebar = function(params) {
    return {
        evid: 860,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
};
/**
 * @typedef {Object} errorInCheckoutSfParams
 * @property {string} appName - stores
 * @property {GUID} cartId - na
 * @property {GUID} checkoutId - checkout_id
 * @property {string} errorMessage - detailed error message
 * @property {string} field - cardNumber/expirationDate/postalCode/cvv/ county_code
 * @property {boolean} isMember - null
 * @property {boolean} isMerchant - isMerchant status
 * @property {boolean} isOwner - is_owner
 * @property {string} message - for example Expiration date is not valid / shipping is not avilable
 * @property {GUID} bi_token - null
 * @property {string} origin - OA StoreFront
 * @property {GUID} owner_id - owner_id
 * @property {string} paymentResponse - payment response
 * @property {GUID} siteMemberId - site_member_id
 * @property {string} stage - what stage in the chechout funnel the error is
 * @property {GUID} storeId - store_id
 * @property {GUID} uuid - uuid
 * @property {GUID} visitor_id - na
 **/
/**
 * Name: Error in checkout SF. Evid: 24.
 * Event description: errors in checkoutfunnel. since june 2019 also sent from OneApp (origin = 'OA StoreFront').

 * appName - Type: string. Desc: stores
 *
 * cartId - Type: guid. Desc: na
 *
 * checkoutId - Type: guid. Desc: checkout_id
 *
 * errorMessage - Type: string. Desc: detailed error message
 *
 * field - Type: string. Desc: cardNumber/expirationDate/postalCode/cvv/ county_code
 *
 * isMember - Type: bool.
 *
 * isMerchant - Type: bool. Desc: isMerchant status
 *
 * isOwner - Type: bool. Desc: is_owner
 *
 * message - Type: string. Desc: for example Expiration date is not valid / shipping is not avilable
 *
 * bi_token - Type: guid.
 *
 * origin - Type: string. Desc: OA StoreFront
 *
 * owner_id - Type: guid. Desc: owner_id
 *
 * paymentResponse - Type: string. Desc: payment response
 *
 * siteMemberId - Type: guid. Desc: site_member_id
 *
 * stage - Type: string. Desc: what stage in the chechout funnel the error is
 *
 * storeId - Type: guid. Desc: store_id
 *
 * uuid - Type: guid. Desc: uuid
 *
 * visitor_id - Type: guid. Desc: na
 * @param {errorInCheckoutSfParams} params The parameters for this event.
 * @return {Object} LogObject
**/
export var errorInCheckoutSf = function(params) {
    return {
        evid: 24,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
};
/**
 * @typedef {Object} clickOnRelatedProductOaParams
 * @property {string} appName - null
 * @property {string} id - product_id of related product
 * @property {boolean} isMerchant - null
 * @property {GUID} bi_token - msid
 * @property {string} productId - product_id of main product
 * @property {GUID} storeId - store_id
 * @property {GUID} uuid - uuid
 **/
/**
 * Name: Click on related product OA SF. Evid: 229.
 * Event description: user clicked on related product in main product screen OA.

 * appName - Type: string.
 *
 * id - Type: string. Desc: product_id of related product
 *
 * isMerchant - Type: bool.
 *
 * bi_token - Type: guid. Desc: msid
 *
 * productId - Type: string. Desc: product_id of main product
 *
 * storeId - Type: guid. Desc: store_id
 *
 * uuid - Type: guid. Desc: uuid
 * @param {clickOnRelatedProductOaParams} params The parameters for this event.
 * @return {Object} LogObject
**/
export var clickOnRelatedProductOa = function(params) {
    return {
        evid: 229,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
};
/**
 * @typedef {Object} errorWhenApplyingACouponSfParams
 * @property {string} appName - null
 * @property {GUID} cartId - null
 * @property {GUID} checkoutId - checkout_id
 * @property {string} couponCode - null
 * @property {string} errorCode - null
 * @property {boolean} isMember - is_member
 * @property {boolean} isMerchant - isMerchant status
 * @property {boolean} isOwner - is_owner
 * @property {GUID} bi_token - null
 * @property {string} origin - OA StoreFront
 * @property {GUID} owner_id - owner_id
 * @property {GUID} storeId - null
 * @property {GUID} uuid - uuid
 * @property {GUID} visitor_id - null
 **/
/**
 * Name: Error when applying a coupon SF. Evid: 117.


 * appName - Type: string.
 *
 * cartId - Type: guid.
 *
 * checkoutId - Type: guid. Desc: checkout_id
 *
 * couponCode - Type: string.
 *
 * errorCode - Type: string.
 *
 * isMember - Type: bool. Desc: is_member
 *
 * isMerchant - Type: bool. Desc: isMerchant status
 *
 * isOwner - Type: bool. Desc: is_owner
 *
 * bi_token - Type: guid.
 *
 * origin - Type: string. Desc: OA StoreFront
 *
 * owner_id - Type: guid. Desc: owner_id
 *
 * storeId - Type: guid.
 *
 * uuid - Type: guid. Desc: uuid
 *
 * visitor_id - Type: guid.
 * @param {errorWhenApplyingACouponSfParams} params The parameters for this event.
 * @return {Object} LogObject
**/
export var errorWhenApplyingACouponSf = function(params) {
    return {
        evid: 117,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
};
/**
 * @typedef {Object} viewQuickViewSfParams
 * @property {string} appName - app name
 * @property {string} socialButton - which social button appear on page
 * @property {string} errorMessage - right now only relevant for minimum order, no message = NULL
 * @property {boolean} addToCart - has add to cart button
 * @property {boolean} buyNow - has buy now button
 * @property {boolean} hasNotifyMe - did the merchant activated back in stock notification for the buyer
 * @property {boolean} hasPlans - product has subscriptions plans
 * @property {boolean} hasStockIndicator - True if the user enabled stock indicator in product page false if not
 * @property {boolean} hasWishlist - has wishlist
 * @property {string} inventoryStatus - in stock / out of stock / partially
 * @property {boolean} isMerchant - null
 * @property {boolean} isMobileFriendly - true if mobile friendly, false otherwise
 * @property {GUID} bi_token - null
 * @property {string} navigationClick - what happens when you click on add to cart
 * @property {boolean} oneTimePurchase - if the user enabled one time purchase with subscription
 * @property {string} options - which options types the product has, no options = NULL
 * @property {string} priceBreakdown - list of displayed price breakdowns - tax, shipping, etc. NULL if not relevant
 * @property {string} productId - product_guid
 * @property {string} productType - digital/physical
 * @property {number} remainingItemCount - The inventory quantity that is shown to the user
 * @property {boolean} showUnitPrice - does the product show price per unit
 * @property {GUID} storeId - store_id
 **/
/**
 * Name: View Quick View SF. Evid: 543.
 * Event description: view quick view in SF
(preview, Editor & live site).

 * appName - Type: string. Desc: app name
 *
 * socialButton - Type: string. Desc: which social button appear on page
 *
 * errorMessage - Type: string. Desc: right now only relevant for minimum order, no message = NULL
 *
 * addToCart - Type: bool. Desc: has add to cart button
 *
 * buyNow - Type: bool. Desc: has buy now button
 *
 * hasNotifyMe - Type: bool. Desc: did the merchant activated back in stock notification for the buyer
 *
 * hasPlans - Type: bool. Desc: product has subscriptions plans
 *
 * hasStockIndicator - Type: bool. Desc: True if the user enabled stock indicator in product page false if not
 *
 * hasWishlist - Type: bool. Desc: has wishlist
 *
 * inventoryStatus - Type: string. Desc: in stock / out of stock / partially
 *
 * isMerchant - Type: bool.
 *
 * isMobileFriendly - Type: bool. Desc: true if mobile friendly, false otherwise
 *
 * bi_token - Type: guid.
 *
 * navigationClick - Type: string. Desc: what happens when you click on add to cart
 *
 * oneTimePurchase - Type: bool. Desc: if the user enabled one time purchase with subscription
 *
 * options - Type: string. Desc: which options types the product has, no options = NULL
 *
 * priceBreakdown - Type: string. Desc: list of displayed price breakdowns - tax, shipping, etc. NULL if not relevant
 *
 * productId - Type: string. Desc: product_guid
 *
 * productType - Type: string. Desc: digital/physical
 *
 * remainingItemCount - Type: numeric. Desc: The inventory quantity that is shown to the user
 *
 * showUnitPrice - Type: bool. Desc: does the product show price per unit
 *
 * storeId - Type: guid. Desc: store_id
 * @param {viewQuickViewSfParams} params The parameters for this event.
 * @return {Object} LogObject
**/
export var viewQuickViewSf = function(params) {
    return {
        evid: 543,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
};
/**
 * @typedef {Object} clickInWarningScreenOaStoreFrontParams
 * @property {string} appName - null
 * @property {GUID} cartId - cartId
 * @property {boolean} isMerchant - null
 * @property {boolean} isOwner - true
 * @property {GUID} bi_token - msid
 * @property {GUID} storeId - store_id
 * @property {string} type - payments / view_store
 * @property {string} value - close / not now / contact
 **/
/**
 * Name: Click in warning/info screen OA StoreFront. Evid: 270.
 * Event description: click in unable to accept payment screen (not now / contact)/ 2nd level invitation (when user is redirected from 2nd level invitation to a hidden or deleted product) screen.

 * appName - Type: string.
 *
 * cartId - Type: guid. Desc: cartId
 *
 * isMerchant - Type: bool.
 *
 * isOwner - Type: bool. Desc: true
 *
 * bi_token - Type: guid. Desc: msid
 *
 * storeId - Type: guid. Desc: store_id
 *
 * type - Type: string. Desc: payments / view_store
 *
 * value - Type: string. Desc: close / not now / contact
 * @param {clickInWarningScreenOaStoreFrontParams} params The parameters for this event.
 * @return {Object} LogObject
**/
export var clickInWarningScreenOaStoreFront = function(params) {
    return {
        evid: 270,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
};
/**
 * @typedef {Object} clickOnAddToCartSfParams
 * @property {string} appName - null
 * @property {string} socialButton - null
 * @property {string} buttonType - buy now / add to cart / subscribe now /pre order / pre order now
 * @property {GUID} checkoutId - checkout_id
 * @property {number} quantity - null
 * @property {string} galleryInputId - productId/ collectionId. the input ID of the gallery - when it shows collection -> collection id, when it shows related products - product id (when on product page) null when (other pages), when it shows all products -> null
 * @property {string} galleryProductsLogic - when click add to cart from gallery - 	 the logic of the gallery the user clicked on (all-products, collection, related-products)
 * @property {boolean} hasOptions - null
 * @property {GUID} impressionId - unique guid for the gallery loading session
 * @property {boolean} isMerchant - isMerchant status
 * @property {boolean} isNavigateCart - true if the button redirect to cart (mobile or without cart icon), false otherwise
 * @property {boolean} isOwner - true for owner false for member. since june 2019
 * @property {GUID} bi_token - null
 * @property {string} navigationClick - mini-cart / cart  / none / checkout
 * @property {string} options - a json containing the options selected for the product
 * @property {string} origin - null
 * @property {GUID} owner_id - id of site's owner. since june 2019
 * @property {string} productId - null
 * @property {string} productType - digital / physical
 * @property {number} rank - the rank of the product that was added to cart from gallery
 * @property {GUID} storeId - null
 * @property {GUID} uuid - uuid
 * @property {string} viewMode - editor / site / preview
 * @property {GUID} visitor_id - null
 **/
/**
 * Name: Click on add to cart. Evid: 63.
 * Event description: buyer clicks on add to cart. Also since june 2019 can be sent from OneApp store front (member view) with origin ='OA StoreFront'.

 * appName - Type: string.
 *
 * socialButton - Type: string.
 *
 * buttonType - Type: string. Desc: buy now / add to cart / subscribe now /pre order / pre order now
 *
 * checkoutId - Type: guid. Desc: checkout_id
 *
 * quantity - Type: numeric.
 *
 * galleryInputId - Type: string. Desc: productId/ collectionId. the input ID of the gallery - when it shows collection -> collection id, when it shows related products - product id (when on product page) null when (other pages), when it shows all products -> null
 *
 * galleryProductsLogic - Type: string. Desc: when click add to cart from gallery - 	 the logic of the gallery the user clicked on (all-products, collection, related-products)
 *
 * hasOptions - Type: bool.
 *
 * impressionId - Type: guid. Desc: unique guid for the gallery loading session
 *
 * isMerchant - Type: bool. Desc: isMerchant status
 *
 * isNavigateCart - Type: bool. Desc: true if the button redirect to cart (mobile or without cart icon), false otherwise
 *
 * isOwner - Type: bool. Desc: true for owner false for member. since june 2019
 *
 * bi_token - Type: guid.
 *
 * navigationClick - Type: string. Desc: mini-cart / cart  / none / checkout
 *
 * options - Type: string. Desc: a json containing the options selected for the product
 *
 * origin - Type: string.
 *
 * owner_id - Type: guid. Desc: id of site's owner. since june 2019
 *
 * productId - Type: string.
 *
 * productType - Type: string. Desc: digital / physical
 *
 * rank - Type: numeric. Desc: the rank of the product that was added to cart from gallery
 *
 * storeId - Type: guid.
 *
 * uuid - Type: guid. Desc: uuid
 *
 * viewMode - Type: string. Desc: editor / site / preview
 *
 * visitor_id - Type: guid.
 * @param {clickOnAddToCartSfParams} params The parameters for this event.
 * @return {Object} LogObject
**/
export var clickOnAddToCartSf = function(params) {
    return {
        evid: 63,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
};
/**
 * @typedef {Object} clickToAddWishlistSfeParams
 * @property {string} appName - null
 * @property {string} component_id - product
 * @property {boolean} hasMembers - Does the site have members area installed when adding wishlist (different buttons)
 * @property {boolean} isMerchant - null
 * @property {GUID} bi_token - null
 * @property {GUID} storeId - store_id
 **/
/**
 * Name: Click to add Wishlist SFE. Evid: 841.
 * Event description: when a user clicks to add wishlist in product page settings.

 * appName - Type: string.
 *
 * component_id - Type: string. Desc: product
 *
 * hasMembers - Type: bool. Desc: Does the site have members area installed when adding wishlist (different buttons)
 *
 * isMerchant - Type: bool.
 *
 * bi_token - Type: guid.
 *
 * storeId - Type: guid. Desc: store_id
 * @param {clickToAddWishlistSfeParams} params The parameters for this event.
 * @return {Object} LogObject
**/
export var clickToAddWishlistSfe = function(params) {
    return {
        evid: 841,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
};
/**
 * @typedef {Object} membersClickChangeInCheckoutStagesSfParams
 * @property {string} appName - app_name
 * @property {GUID} cartId - cart_id
 * @property {string} cartType - Digital/ Physical/ mixed (Digital &Physical)
 * @property {GUID} checkoutId - checkout_id
 * @property {boolean} isMerchant - isMerchant status
 * @property {GUID} bi_token - msid
 * @property {GUID} siteMemberId - member id
 * @property {string} stage - stage in checkout (delivery, payment...)
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_id
 **/
/**
 * Name: members -> click 'change' in checkout stages SF. Evid: 46.
 * Event description: click to 'change' autofill info in the checkout process.

 * appName - Type: string. Desc: app_name
 *
 * cartId - Type: guid. Desc: cart_id
 *
 * cartType - Type: string. Desc: Digital/ Physical/ mixed (Digital &Physical)
 *
 * checkoutId - Type: guid. Desc: checkout_id
 *
 * isMerchant - Type: bool. Desc: isMerchant status
 *
 * bi_token - Type: guid. Desc: msid
 *
 * siteMemberId - Type: guid. Desc: member id
 *
 * stage - Type: string. Desc: stage in checkout (delivery, payment...)
 *
 * storeId - Type: guid. Desc: store_id
 *
 * visitor_id - Type: guid. Desc: visitor_id
 * @param {membersClickChangeInCheckoutStagesSfParams} params The parameters for this event.
 * @return {Object} LogObject
**/
export var membersClickChangeInCheckoutStagesSf = function(params) {
    return {
        evid: 46,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
};
/**
 * @typedef {Object} addToCartButtonLoadedSfParams
 * @property {string} appName - app name
 * @property {boolean} hasOptions - does the product have options
 * @property {boolean} hasPlans - product has subscriptions plans
 * @property {boolean} isMerchant - null
 * @property {boolean} isMobileFriendly - true if mobile friendly, false otherwise
 * @property {GUID} bi_token - null
 * @property {string} navigationClick - what happens when you click on add to cart
 * @property {string} productId - product_guid
 * @property {string} productType - digital/physical
 * @property {GUID} storeId - store_id
 **/
/**
 * Name: Add to Cart Button Loaded SF. Evid: 545.
 * Event description: Add to Cart Button in SF
(preview, Editor & live site).

 * appName - Type: string. Desc: app name
 *
 * hasOptions - Type: bool. Desc: does the product have options
 *
 * hasPlans - Type: bool. Desc: product has subscriptions plans
 *
 * isMerchant - Type: bool.
 *
 * isMobileFriendly - Type: bool. Desc: true if mobile friendly, false otherwise
 *
 * bi_token - Type: guid.
 *
 * navigationClick - Type: string. Desc: what happens when you click on add to cart
 *
 * productId - Type: string. Desc: product_guid
 *
 * productType - Type: string. Desc: digital/physical
 *
 * storeId - Type: guid. Desc: store_id
 * @param {addToCartButtonLoadedSfParams} params The parameters for this event.
 * @return {Object} LogObject
**/
export var addToCartButtonLoadedSf = function(params) {
    return {
        evid: 545,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
};
/**
 * @typedef {Object} changeGalleryLayoutSfeParams
 * @property {string} appName - null
 * @property {string} component_id - grid gallery, slider galeery, product page
 * @property {string} editorMode - mobile/desktop
 * @property {boolean} isMerchant - isMerchant status
 * @property {GUID} bi_token - null
 * @property {string} parameter - columns / rows / margins
 * @property {GUID} storeId - null
 * @property {GUID} userGuid - userGuid
 * @property {string} value - selected value
 **/
/**
 * Name: change gallery layout SFE. Evid: 816.
 * Event description: change gallery layout.

 * appName - Type: string.
 *
 * component_id - Type: string. Desc: grid gallery, slider galeery, product page
 *
 * editorMode - Type: string. Desc: mobile/desktop
 *
 * isMerchant - Type: bool. Desc: isMerchant status
 *
 * bi_token - Type: guid.
 *
 * parameter - Type: string. Desc: columns / rows / margins
 *
 * storeId - Type: guid.
 *
 * userGuid - Type: guid. Desc: userGuid
 *
 * value - Type: string. Desc: selected value
 * @param {changeGalleryLayoutSfeParams} params The parameters for this event.
 * @return {Object} LogObject
**/
export var changeGalleryLayoutSfe = function(params) {
    return {
        evid: 816,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
};
/**
 * @typedef {Object} clickOnQuantityParams
 * @property {string} appName - null
 * @property {boolean} isBlocks - Is the product page is using Blocks.
 * @property {boolean} isMerchant - null
 * @property {GUID} bi_token - null
 * @property {GUID} storeId - null
 * @property {number} valueInt - value
 **/
/**
 * Name: Click on Quantity. Evid: 852.
 * Event description: When UoU changes the quantity of product at product Page.

 * appName - Type: string.
 *
 * isBlocks - Type: bool. Desc: Is the product page is using Blocks.
 *
 * isMerchant - Type: bool.
 *
 * bi_token - Type: guid.
 *
 * storeId - Type: guid.
 *
 * valueInt - Type: numeric. Desc: value
 * @param {clickOnQuantityParams} params The parameters for this event.
 * @return {Object} LogObject
**/
export var clickOnQuantity = function(params) {
    return {
        evid: 852,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
};
/**
 * @typedef {Object} showShippingPopupSfParams
 * @property {string} appName - null
 * @property {boolean} isMerchant - isMerchant status
 * @property {string} mode - mode
 * @property {GUID} bi_token - null
 * @property {string} origin - where the modal pops up (cart / product page...)
 * @property {GUID} storeId - null
 * @property {string} type - merchant pop-up / buyer pop-up
 * @property {GUID} visitor_id - visitor_id
 **/
/**
 * Name: Show merchant shipping popup SF. Evid: 173.
 * Event description: Show shipping popup - no shipping rule for destination.

 * appName - Type: string.
 *
 * isMerchant - Type: bool. Desc: isMerchant status
 *
 * mode - Type: string. Desc: mode
 *
 * bi_token - Type: guid.
 *
 * origin - Type: string. Desc: where the modal pops up (cart / product page...)
 *
 * storeId - Type: guid.
 *
 * type - Type: string. Desc: merchant pop-up / buyer pop-up
 *
 * visitor_id - Type: guid. Desc: visitor_id
 * @param {showShippingPopupSfParams} params The parameters for this event.
 * @return {Object} LogObject
**/
export var showShippingPopupSf = function(params) {
    return {
        evid: 173,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
};
/**
 * @typedef {Object} exposureEventForTestsParams
 * @property {string} appName - null
 * @property {string} appState - what are the apps that currently on state
 * @property {boolean} is_eligible - true if the feature eligible, false otherwise
 * @property {boolean} isMerchant - isMerchant status
 * @property {boolean} isMobileFriendly - true if mobile friendly, false otherwise
 * @property {GUID} bi_token - msid
 * @property {GUID} storeId - store_id
 * @property {string} testName - test name
 * @property {string} type - type of exposure point
 * @property {GUID} uuid - uuid
 * @property {GUID} visitorId - visitor_id
 **/
/**
 * Name: Exposure event for store-front tests. Evid: 45.
 * Event description: generic event fired on an exposure moment for tests. is_eligible data is: gallery -> true if filters enable in gallery;  ExpressCheckout - true if checkout is in viewer.

 * appName - Type: string.
 *
 * appState - Type: string. Desc: what are the apps that currently on state
 *
 * is_eligible - Type: bool. Desc: true if the feature eligible, false otherwise
 *
 * isMerchant - Type: bool. Desc: isMerchant status
 *
 * isMobileFriendly - Type: bool. Desc: true if mobile friendly, false otherwise
 *
 * bi_token - Type: guid. Desc: msid
 *
 * storeId - Type: guid. Desc: store_id
 *
 * testName - Type: string. Desc: test name
 *
 * type - Type: string. Desc: type of exposure point
 *
 * uuid - Type: guid. Desc: uuid
 *
 * visitorId - Type: guid. Desc: visitor_id
 * @param {exposureEventForTestsParams} params The parameters for this event.
 * @return {Object} LogObject
**/
export var exposureEventForTests = function(params) {
    return {
        evid: 45,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
};
/**
 * @typedef {Object} editCategoryListSidebarParams
 * @property {string} action - Reorder / Change visibility in Sidebar
 * @property {string} appName - null
 * @property {string} categoryId - Category ID (collections by legacy)
 * @property {string} categoryName - Category name (collections by legacy)
 * @property {string} categoriesOrder - Categories list by current order (collections by legacy)
 * @property {boolean} isMerchant - null
 * @property {boolean} isVisibleInSidebar - True/False
 * @property {GUID} bi_token - null
 * @property {GUID} storeId - null
 **/
/**
 * Name: edit category list sidebar. Evid: 809.
 * Event description: edit category list sidebar.

 * action - Type: string. Desc: Reorder / Change visibility in Sidebar
 *
 * appName - Type: string.
 *
 * categoryId - Type: string. Desc: Category ID (collections by legacy)
 *
 * categoryName - Type: string. Desc: Category name (collections by legacy)
 *
 * categoriesOrder - Type: string. Desc: Categories list by current order (collections by legacy)
 *
 * isMerchant - Type: bool.
 *
 * isVisibleInSidebar - Type: bool. Desc: True/False
 *
 * bi_token - Type: guid.
 *
 * storeId - Type: guid.
 * @param {editCategoryListSidebarParams} params The parameters for this event.
 * @return {Object} LogObject
**/
export var editCategoryListSidebar = function(params) {
    return {
        evid: 809,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
};
/**
 * @typedef {Object} updatedCartItemQuantitySfParams
 * @property {number} additionalFeesPrice - INT, multiplied by 100 000 - sum of all additional fees price in cart
 * @property {string} appName - null
 * @property {GUID} cartId - null
 * @property {string} cartType - Digital/ Physical/ mixed (Digital &Physical)
 * @property {GUID} checkoutId - checkout_id
 * @property {number} itemsCount - null
 * @property {boolean} isMerchant - isMerchant status
 * @property {boolean} isOwner - true for merchant false for member
 * @property {GUID} bi_token - null
 * @property {number} numberOfAdditionalFees - number of all additional fees in the cart
 * @property {string} origin - null
 * @property {GUID} owner_id - uuid of site owner
 * @property {string} productId - null
 * @property {GUID} storeId - null
 * @property {GUID} uuid - uuid
 * @property {GUID} visitor_id - null
 **/
/**
 * Name: Updated cart item quantity SF. Evid: 116.
 * Event description: Sent for Ecom (with catalog_app_id) here for the mini cart flow (instead of src 130) until the rewrite of mini-cart)..

 * additionalFeesPrice - Type: numeric. Desc: INT, multiplied by 100 000 - sum of all additional fees price in cart
 *
 * appName - Type: string.
 *
 * cartId - Type: guid.
 *
 * cartType - Type: string. Desc: Digital/ Physical/ mixed (Digital &Physical)
 *
 * checkoutId - Type: guid. Desc: checkout_id
 *
 * itemsCount - Type: numeric.
 *
 * isMerchant - Type: bool. Desc: isMerchant status
 *
 * isOwner - Type: bool. Desc: true for merchant false for member
 *
 * bi_token - Type: guid.
 *
 * numberOfAdditionalFees - Type: numeric. Desc: number of all additional fees in the cart
 *
 * origin - Type: string.
 *
 * owner_id - Type: guid. Desc: uuid of site owner
 *
 * productId - Type: string.
 *
 * storeId - Type: guid.
 *
 * uuid - Type: guid. Desc: uuid
 *
 * visitor_id - Type: guid.
 * @param {updatedCartItemQuantitySfParams} params The parameters for this event.
 * @return {Object} LogObject
**/
export var updatedCartItemQuantitySf = function(params) {
    return {
        evid: 116,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
};
/**
 * @typedef {Object} relatedProductsTestExposureProductPageLoadParams
 * @property {string} appName - app_name
 * @property {string} label - The test label from petri - true is with the new logic and false is original component
 * @property {boolean} isMerchant - isMerchant status
 * @property {GUID} bi_token - msid
 * @property {GUID} storeId - store_id
 **/
/**
 * Name: Related products test exposure - product page load. Evid: 47.
 * Event description: BI sent from Velo for related products test - is sent when product page is loaded and we call to petri to know which gallery to show.

 * appName - Type: string. Desc: app_name
 *
 * label - Type: string. Desc: The test label from petri - true is with the new logic and false is original component
 *
 * isMerchant - Type: bool. Desc: isMerchant status
 *
 * bi_token - Type: guid. Desc: msid
 *
 * storeId - Type: guid. Desc: store_id
 * @param {relatedProductsTestExposureProductPageLoadParams} params The parameters for this event.
 * @return {Object} LogObject
**/
export var relatedProductsTestExposureProductPageLoad = function(params) {
    return {
        evid: 47,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
};
/**
 * @typedef {Object} clickInOrderHistoryPageSfParams
 * @property {string} appName - app_name
 * @property {string} click_type - go_shopping / track_order / download / view_invoice
 * @property {string} contact_id - contact_id
 * @property {boolean} isMerchant - isMerchant status
 * @property {GUID} bi_token - null
 * @property {string} orderId - order id, in case we have it (in track order, view invoice)
 * @property {string} origin - order_history_page / order_details_page
 * @property {string} productId - only for click on "Track item" in order details page
 * @property {GUID} site_member_id - member id
 * @property {GUID} storeId - instance id
 * @property {GUID} visitorId - visitorId
 **/
/**
 * Name: click in order_history page  SF. Evid: 129.
 * Event description: UoU clicks that are coming from the order_history page.

 * appName - Type: string. Desc: app_name
 *
 * click_type - Type: string. Desc: go_shopping / track_order / download / view_invoice
 *
 * contact_id - Type: string. Desc: contact_id
 *
 * isMerchant - Type: bool. Desc: isMerchant status
 *
 * bi_token - Type: guid.
 *
 * orderId - Type: string. Desc: order id, in case we have it (in track order, view invoice)
 *
 * origin - Type: string. Desc: order_history_page / order_details_page
 *
 * productId - Type: string. Desc: only for click on "Track item" in order details page
 *
 * site_member_id - Type: guid. Desc: member id
 *
 * storeId - Type: guid. Desc: instance id
 *
 * visitorId - Type: guid. Desc: visitorId
 * @param {clickInOrderHistoryPageSfParams} params The parameters for this event.
 * @return {Object} LogObject
**/
export var clickInOrderHistoryPageSf = function(params) {
    return {
        evid: 129,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
};
/**
 * @typedef {Object} errorMessageSfParams
 * @property {string} appName - null
 * @property {string} fieldName - list of fields  in which error messages were displayed to UoU
 * @property {boolean} isBlocks - Is the product page is using Blocks.
 * @property {boolean} isMerchant - null
 * @property {GUID} bi_token - null
 * @property {string} origin - product page
 * @property {GUID} storeId - null
 **/
/**
 * Name: Error Message SF. Evid: 857.
 * Event description: When UoU gets an error message at product page.
i.e when size option is not selected..

 * appName - Type: string.
 *
 * fieldName - Type: string. Desc: list of fields  in which error messages were displayed to UoU
 *
 * isBlocks - Type: bool. Desc: Is the product page is using Blocks.
 *
 * isMerchant - Type: bool.
 *
 * bi_token - Type: guid.
 *
 * origin - Type: string. Desc: product page
 *
 * storeId - Type: guid.
 * @param {errorMessageSfParams} params The parameters for this event.
 * @return {Object} LogObject
**/
export var errorMessageSf = function(params) {
    return {
        evid: 857,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
};
/**
 * @typedef {Object} deleteNoteToSellerSfParams
 * @property {string} appName - null
 * @property {GUID} cartId - cart id
 * @property {GUID} checkoutId - checkout_id
 * @property {boolean} isMerchant - isMerchant status
 * @property {GUID} bi_token - null
 * @property {GUID} storeId - null
 * @property {GUID} visitor_id - visitor_id
 **/
/**
 * Name: Delete note to seller SF. Evid: 123.
 * Event description: buyer clicks on 'delete note to seller' in cart page.

 * appName - Type: string.
 *
 * cartId - Type: guid. Desc: cart id
 *
 * checkoutId - Type: guid. Desc: checkout_id
 *
 * isMerchant - Type: bool. Desc: isMerchant status
 *
 * bi_token - Type: guid.
 *
 * storeId - Type: guid.
 *
 * visitor_id - Type: guid. Desc: visitor_id
 * @param {deleteNoteToSellerSfParams} params The parameters for this event.
 * @return {Object} LogObject
**/
export var deleteNoteToSellerSf = function(params) {
    return {
        evid: 123,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
};
/**
 * @typedef {Object} clickOnMyOrdersInThankYouPageOaStoreFrontParams
 * @property {string} appName - null
 * @property {GUID} cartId - cart_id
 * @property {boolean} isMerchant - null
 * @property {boolean} isOwner - true for merchant
 * @property {GUID} bi_token - msid
 * @property {string} orderId - order_id
 * @property {GUID} storeId - store_id
 * @property {GUID} uuid - uuid
 **/
/**
 * Name: Click on "My Orders" in Thank you page  OA StoreFront. Evid: 187.
 * Event description: in One App Sore Front )member view)  Thank you page buyer clicked My Orders (leads to open My Orders screen).

 * appName - Type: string.
 *
 * cartId - Type: guid. Desc: cart_id
 *
 * isMerchant - Type: bool.
 *
 * isOwner - Type: bool. Desc: true for merchant
 *
 * bi_token - Type: guid. Desc: msid
 *
 * orderId - Type: string. Desc: order_id
 *
 * storeId - Type: guid. Desc: store_id
 *
 * uuid - Type: guid. Desc: uuid
 * @param {clickOnMyOrdersInThankYouPageOaStoreFrontParams} params The parameters for this event.
 * @return {Object} LogObject
**/
export var clickOnMyOrdersInThankYouPageOaStoreFront = function(params) {
    return {
        evid: 187,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
};
/**
 * @typedef {Object} currencyConverterClickAddCurrenciesListSfeParams
 * @property {string} appName - currencyconverter-settings
 * @property {GUID} instance_id - instance_id
 * @property {boolean} isMerchant - isMerchant status
 * @property {GUID} bi_token - null
 * @property {GUID} storeId - store_id
 **/
/**
 * Name: currency converter - click 'Add' currencies list SFE. Evid: 532.
 * Event description: click  'General Info' in currency converter settings (under 'Currencies' panel) in the stores currency tool tip..

 * appName - Type: string. Desc: currencyconverter-settings
 *
 * instance_id - Type: guid. Desc: instance_id
 *
 * isMerchant - Type: bool. Desc: isMerchant status
 *
 * bi_token - Type: guid.
 *
 * storeId - Type: guid. Desc: store_id
 * @param {currencyConverterClickAddCurrenciesListSfeParams} params The parameters for this event.
 * @return {Object} LogObject
**/
export var currencyConverterClickAddCurrenciesListSfe = function(params) {
    return {
        evid: 532,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
};
/**
 * @typedef {Object} clickToReOrderProductsInCollectionSfeParams
 * @property {string} appName - null
 * @property {string} component_id - grid gallery, slider galeery, product page
 * @property {boolean} isMerchant - isMerchant status
 * @property {GUID} bi_token - null
 * @property {GUID} storeId - null
 * @property {string} targetPage - product list / product / dashboard / ....
 * @property {GUID} userGuid - userGuid
 **/
/**
 * Name: click to open store manager SFE. Evid: 814.
 * Event description: clicking 're-order products in collection' (store manager is opened in collection page).

 * appName - Type: string.
 *
 * component_id - Type: string. Desc: grid gallery, slider galeery, product page
 *
 * isMerchant - Type: bool. Desc: isMerchant status
 *
 * bi_token - Type: guid.
 *
 * storeId - Type: guid.
 *
 * targetPage - Type: string. Desc: product list / product / dashboard / ....
 *
 * userGuid - Type: guid. Desc: userGuid
 * @param {clickToReOrderProductsInCollectionSfeParams} params The parameters for this event.
 * @return {Object} LogObject
**/
export var clickToReOrderProductsInCollectionSfe = function(params) {
    return {
        evid: 814,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
};
/**
 * @typedef {Object} categoryPageCategoryTreeClickedParams
 * @property {string} appName - null
 * @property {string} destinationCategoryId - destination category ID (collections by legacy)
 * @property {boolean} isMerchant - isMerchant status
 * @property {string} link - Link URL
 * @property {GUID} bi_token - null
 * @property {string} originCategoryId - Origin category ID  (collections by legacy)
 * @property {GUID} storeId - null
 **/
/**
 * Name: Category page category tree clicked. Evid: 834.
 * Event description: Category page category tree clicked.

 * appName - Type: string.
 *
 * destinationCategoryId - Type: string. Desc: destination category ID (collections by legacy)
 *
 * isMerchant - Type: bool. Desc: isMerchant status
 *
 * link - Type: string. Desc: Link URL
 *
 * bi_token - Type: guid.
 *
 * originCategoryId - Type: string. Desc: Origin category ID  (collections by legacy)
 *
 * storeId - Type: guid.
 * @param {categoryPageCategoryTreeClickedParams} params The parameters for this event.
 * @return {Object} LogObject
**/
export var categoryPageCategoryTreeClicked = function(params) {
    return {
        evid: 834,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
};
/**
 * @typedef {Object} galleryClickFilterParams
 * @property {string} appName - app
 * @property {boolean} isMerchant - isMerchant status
 * @property {GUID} bi_token - null
 * @property {GUID} storeId - store_id
 **/
/**
 * Name: Gallery - Click  Filter (Mobile). Evid: 140.
 * Event description: When a visitor clicks "Filter" in mobile only!.

 * appName - Type: string. Desc: app
 *
 * isMerchant - Type: bool. Desc: isMerchant status
 *
 * bi_token - Type: guid.
 *
 * storeId - Type: guid. Desc: store_id
 * @param {galleryClickFilterParams} params The parameters for this event.
 * @return {Object} LogObject
**/
export var galleryClickFilter = function(params) {
    return {
        evid: 140,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
};
/**
 * @typedef {Object} resetAppSettingsSfeParams
 * @property {string} appName - null
 * @property {string} component_id - component_id
 * @property {boolean} isMerchant - isMerchant status
 * @property {GUID} bi_token - msid
 * @property {GUID} storeId - store_id
 * @property {GUID} userGuid - userGuid
 **/
/**
 * Name: reset app settings SFE. Evid: 819.
 * Event description: click on 'reset settings' in app settings panel.

 * appName - Type: string.
 *
 * component_id - Type: string. Desc: component_id
 *
 * isMerchant - Type: bool. Desc: isMerchant status
 *
 * bi_token - Type: guid. Desc: msid
 *
 * storeId - Type: guid. Desc: store_id
 *
 * userGuid - Type: guid. Desc: userGuid
 * @param {resetAppSettingsSfeParams} params The parameters for this event.
 * @return {Object} LogObject
**/
export var resetAppSettingsSfe = function(params) {
    return {
        evid: 819,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
};
/**
 * @typedef {Object} clickOnFreeTextParams
 * @property {string} appName - null
 * @property {boolean} isBlocks - Is the product page is using Blocks.
 * @property {boolean} isMerchant - null
 * @property {GUID} bi_token - null
 * @property {GUID} storeId - null
 **/
/**
 * Name: Click on Free Text. Evid: 851.
 * Event description: Send when click on free text field.

 * appName - Type: string.
 *
 * isBlocks - Type: bool. Desc: Is the product page is using Blocks.
 *
 * isMerchant - Type: bool.
 *
 * bi_token - Type: guid.
 *
 * storeId - Type: guid.
 * @param {clickOnFreeTextParams} params The parameters for this event.
 * @return {Object} LogObject
**/
export var clickOnFreeText = function(params) {
    return {
        evid: 851,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
};
/**
 * @typedef {Object} priceBreakdownModalOpenSfParams
 * @property {string} appName - app_name
 * @property {boolean} isMerchant - null
 * @property {GUID} bi_token - null
 * @property {GUID} storeId - store_id
 * @property {string} type - type of installments app
 * @property {string} viewMode - editor / site / preview
 **/
/**
 * Name: Price breakdown modal open SF. Evid: 551.
 * Event description: price breakdown modal opened after clicking on the widget in the product page.

 * appName - Type: string. Desc: app_name
 *
 * isMerchant - Type: bool.
 *
 * bi_token - Type: guid.
 *
 * storeId - Type: guid. Desc: store_id
 *
 * type - Type: string. Desc: type of installments app
 *
 * viewMode - Type: string. Desc: editor / site / preview
 * @param {priceBreakdownModalOpenSfParams} params The parameters for this event.
 * @return {Object} LogObject
**/
export var priceBreakdownModalOpenSf = function(params) {
    return {
        evid: 551,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
};
/**
 * @typedef {Object} changeElementSettingsSfeParams
 * @property {string} appName - null
 * @property {string} component_id - grid gallery, slider galeery, product page
 * @property {string} editorMode - mobile / desktop
 * @property {string} element - product image, name&price&sku, product options&quantity, button, info sections, social media
 * @property {boolean} isMerchant - isMerchant status
 * @property {GUID} bi_token - null
 * @property {string} new_value - on/off, crop/fit...
 * @property {string} origin - editor
 * @property {string} parameter - facebook,tweeter, image scaling, navigation position
 * @property {GUID} storeId - null
 * @property {GUID} userGuid - userGuid
 * @property {string} value - 0/1 (0= 'Above and below cart', 1='only below cart')
 **/
/**
 * Name: change element settings SFE. Evid: 831.
 * Event description: change element settings in SF component settings.

 * appName - Type: string.
 *
 * component_id - Type: string. Desc: grid gallery, slider galeery, product page
 *
 * editorMode - Type: string. Desc: mobile / desktop
 *
 * element - Type: string. Desc: product image, name&price&sku, product options&quantity, button, info sections, social media
 *
 * isMerchant - Type: bool. Desc: isMerchant status
 *
 * bi_token - Type: guid.
 *
 * new_value - Type: string. Desc: on/off, crop/fit...
 *
 * origin - Type: string. Desc: editor
 *
 * parameter - Type: string. Desc: facebook,tweeter, image scaling, navigation position
 *
 * storeId - Type: guid.
 *
 * userGuid - Type: guid. Desc: userGuid
 *
 * value - Type: string. Desc: 0/1 (0= 'Above and below cart', 1='only below cart')
 * @param {changeElementSettingsSfeParams} params The parameters for this event.
 * @return {Object} LogObject
**/
export var changeElementSettingsSfe = function(params) {
    return {
        evid: 831,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
};
/**
 * @typedef {Object} changeSortingParameterSfeParams
 * @property {string} action - checked / unchecked
 * @property {string} appName - null
 * @property {string} component_id - grid gallery, slider gallery, product page
 * @property {string} defaultSortingValue - Default sorting value
 * @property {boolean} isMerchant - isMerchant status
 * @property {GUID} bi_token - null
 * @property {GUID} storeId - null
 * @property {string} type - sort option
 * @property {GUID} userGuid - userGuid
 **/
/**
 * Name: change sorting parameter SFE. Evid: 836.
 * Event description: change sorting (display title or sorting options) in the 'Sorting & Filters' tab.

 * action - Type: string. Desc: checked / unchecked
 *
 * appName - Type: string.
 *
 * component_id - Type: string. Desc: grid gallery, slider gallery, product page
 *
 * defaultSortingValue - Type: string. Desc: Default sorting value
 *
 * isMerchant - Type: bool. Desc: isMerchant status
 *
 * bi_token - Type: guid.
 *
 * storeId - Type: guid.
 *
 * type - Type: string. Desc: sort option
 *
 * userGuid - Type: guid. Desc: userGuid
 * @param {changeSortingParameterSfeParams} params The parameters for this event.
 * @return {Object} LogObject
**/
export var changeSortingParameterSfe = function(params) {
    return {
        evid: 836,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
};
/**
 * @typedef {Object} clickOnApplyPromotionalCodeSfParams
 * @property {string} appName - null
 * @property {string} cartId - null
 * @property {GUID} checkoutId - checkout_id
 * @property {boolean} isMember - is_member
 * @property {boolean} isMerchant - isMerchant status
 * @property {boolean} isOwner - is_owner
 * @property {GUID} bi_token - null
 * @property {string} origin - OA StoreFront
 * @property {GUID} owner_id - owner_id
 * @property {GUID} storeId - null
 * @property {GUID} uuid - uuid
 * @property {GUID} visitor_id - null
 **/
/**
 * Name: Click to add Coupon  SF. Evid: 111.
 * Event description: user clicks on "add code"/"insert promo code" (first step of applying coupon) . since june 2019 also sent from OA StoreFront (member view).

 * appName - Type: string.
 *
 * cartId - Type: string.
 *
 * checkoutId - Type: guid. Desc: checkout_id
 *
 * isMember - Type: bool. Desc: is_member
 *
 * isMerchant - Type: bool. Desc: isMerchant status
 *
 * isOwner - Type: bool. Desc: is_owner
 *
 * bi_token - Type: guid.
 *
 * origin - Type: string. Desc: OA StoreFront
 *
 * owner_id - Type: guid. Desc: owner_id
 *
 * storeId - Type: guid.
 *
 * uuid - Type: guid. Desc: uuid
 *
 * visitor_id - Type: guid.
 * @param {clickOnApplyPromotionalCodeSfParams} params The parameters for this event.
 * @return {Object} LogObject
**/
export var clickOnApplyPromotionalCodeSf = function(params) {
    return {
        evid: 111,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
};
/**
 * @typedef {Object} clickContinueEWalletModalSfParams
 * @property {string} appName - app name (e.g. wixstores-client-cart)
 * @property {GUID} cartId - cart_id
 * @property {string} cartType - Digital/ Physical/ mixed (Digital &Physical)
 * @property {GUID} checkoutId - checkout_id
 * @property {number} itemsCount - Numbers of items in cart
 * @property {boolean} isMerchant - isMerchant status
 * @property {GUID} bi_token - msid
 * @property {number} num_of_paymet_providers - How many payment providers does the store has connected
 * @property {number} num_of_shipping - number of shipping choices presented to the visitor at the first time
 * @property {string} origin - origin
 * @property {string} paymet_providers - array of payment providers connected to the store
 * @property {string} productsList - json containing all product guids for products in the cart
 * @property {GUID} storeId - store_id
 * @property {string} type - add / edit
 **/
/**
 * Name: Click Continue e-wallet Modal SF. Evid: 225.
 * Event description: When a visitor clicks on ‘Continue’ in e-wallet Modal (after the click the visitor is supposed to view the checkout)..

 * appName - Type: string. Desc: app name (e.g. wixstores-client-cart)
 *
 * cartId - Type: guid. Desc: cart_id
 *
 * cartType - Type: string. Desc: Digital/ Physical/ mixed (Digital &Physical)
 *
 * checkoutId - Type: guid. Desc: checkout_id
 *
 * itemsCount - Type: numeric. Desc: Numbers of items in cart
 *
 * isMerchant - Type: bool. Desc: isMerchant status
 *
 * bi_token - Type: guid. Desc: msid
 *
 * num_of_paymet_providers - Type: numeric. Desc: How many payment providers does the store has connected
 *
 * num_of_shipping - Type: numeric. Desc: number of shipping choices presented to the visitor at the first time
 *
 * origin - Type: string. Desc: origin
 *
 * paymet_providers - Type: string. Desc: array of payment providers connected to the store
 *
 * productsList - Type: string. Desc: json containing all product guids for products in the cart
 *
 * storeId - Type: guid. Desc: store_id
 *
 * type - Type: string. Desc: add / edit
 * @param {clickContinueEWalletModalSfParams} params The parameters for this event.
 * @return {Object} LogObject
**/
export var clickContinueEWalletModalSf = function(params) {
    return {
        evid: 225,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
};
/**
 * @typedef {Object} clickToChangeGalleryFiltersSfParams
 * @property {string} appName - app
 * @property {string} filterType - relevant filter type (color, collection, etc...)
 * @property {boolean} isMerchant - isMerchant status
 * @property {GUID} bi_token - null
 * @property {GUID} storeId - store_id
 **/
/**
 * Name: Click to change gallery filter SF. Evid: 147.
 * Event description: When a visitor changes one of the gallery filters.

 * appName - Type: string. Desc: app
 *
 * filterType - Type: string. Desc: relevant filter type (color, collection, etc...)
 *
 * isMerchant - Type: bool. Desc: isMerchant status
 *
 * bi_token - Type: guid.
 *
 * storeId - Type: guid. Desc: store_id
 * @param {clickToChangeGalleryFiltersSfParams} params The parameters for this event.
 * @return {Object} LogObject
**/
export var clickToChangeGalleryFiltersSf = function(params) {
    return {
        evid: 147,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
};
/**
 * @typedef {Object} cartClickOnContinueShoppingSfParams
 * @property {string} appName - null
 * @property {GUID} cartId - cart id
 * @property {GUID} checkoutId - checkout_id
 * @property {boolean} isMerchant - isMerchant status
 * @property {GUID} bi_token - null
 * @property {string} origin - null (from checkout page) / Minimum_order_cart / minimum_order_checkout/ shopping cart
 * @property {string} stage - only in minimum order modal in checkout - the stage in the checkout the visitor was at when the modal was opened
 * @property {GUID} storeId - null
 * @property {GUID} visitor_id - visitor_id
 **/
/**
 * Name: cart - click on continue shopping SF. Evid: 120.
 * Event description: cart - click on continue shopping.

 * appName - Type: string.
 *
 * cartId - Type: guid. Desc: cart id
 *
 * checkoutId - Type: guid. Desc: checkout_id
 *
 * isMerchant - Type: bool. Desc: isMerchant status
 *
 * bi_token - Type: guid.
 *
 * origin - Type: string. Desc: null (from checkout page) / Minimum_order_cart / minimum_order_checkout/ shopping cart
 *
 * stage - Type: string. Desc: only in minimum order modal in checkout - the stage in the checkout the visitor was at when the modal was opened
 *
 * storeId - Type: guid.
 *
 * visitor_id - Type: guid. Desc: visitor_id
 * @param {cartClickOnContinueShoppingSfParams} params The parameters for this event.
 * @return {Object} LogObject
**/
export var cartClickOnContinueShoppingSf = function(params) {
    return {
        evid: 120,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
};
/**
 * @typedef {Object} changeFilterOptionsParameterSfeParams
 * @property {string} action - checked / unchecked
 * @property {string} appName - null
 * @property {string} component_id - grid gallery, slider gallery, product page
 * @property {boolean} isMerchant - isMerchant status
 * @property {GUID} bi_token - null
 * @property {GUID} storeId - null
 * @property {string} type - filter option
 * @property {GUID} userGuid - userGuid
 **/
/**
 * Name: change filter options parameter SFE. Evid: 838.
 * Event description: change filters (display title/options/show).

 * action - Type: string. Desc: checked / unchecked
 *
 * appName - Type: string.
 *
 * component_id - Type: string. Desc: grid gallery, slider gallery, product page
 *
 * isMerchant - Type: bool. Desc: isMerchant status
 *
 * bi_token - Type: guid.
 *
 * storeId - Type: guid.
 *
 * type - Type: string. Desc: filter option
 *
 * userGuid - Type: guid. Desc: userGuid
 * @param {changeFilterOptionsParameterSfeParams} params The parameters for this event.
 * @return {Object} LogObject
**/
export var changeFilterOptionsParameterSfe = function(params) {
    return {
        evid: 838,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
};
/**
 * @typedef {Object} currencyConverterClickDeleteCurrencySfeParams
 * @property {string} appName - currencyconverter-settings
 * @property {GUID} instance_id - instance_id
 * @property {boolean} isMerchant - isMerchant status
 * @property {GUID} bi_token - null
 * @property {GUID} storeId - store_id
 **/
/**
 * Name: currency converter - click delete currency SFE. Evid: 533.
 * Event description: click  'General Info' in currency converter settings (under 'Currencies' panel) in the stores currency tool tip..

 * appName - Type: string. Desc: currencyconverter-settings
 *
 * instance_id - Type: guid. Desc: instance_id
 *
 * isMerchant - Type: bool. Desc: isMerchant status
 *
 * bi_token - Type: guid.
 *
 * storeId - Type: guid. Desc: store_id
 * @param {currencyConverterClickDeleteCurrencySfeParams} params The parameters for this event.
 * @return {Object} LogObject
**/
export var currencyConverterClickDeleteCurrencySfe = function(params) {
    return {
        evid: 533,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
};
/**
 * @typedef {Object} clickShippingInfoLinkSfParams
 * @property {string} appName - app_name
 * @property {boolean} isMerchant - null
 * @property {GUID} bi_token - null
 * @property {string} origin - from which component
 * @property {string} productId - product_guid
 * @property {GUID} storeId - store_id
 **/
/**
 * Name: Click Shipping Info link SF. Evid: 597.
 * Event description: When the buyer clicks on shipping info link in one of the the SF components (not in cart)..

 * appName - Type: string. Desc: app_name
 *
 * isMerchant - Type: bool.
 *
 * bi_token - Type: guid.
 *
 * origin - Type: string. Desc: from which component
 *
 * productId - Type: string. Desc: product_guid
 *
 * storeId - Type: guid. Desc: store_id
 * @param {clickShippingInfoLinkSfParams} params The parameters for this event.
 * @return {Object} LogObject
**/
export var clickShippingInfoLinkSf = function(params) {
    return {
        evid: 597,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
};
/**
 * @typedef {Object} removeCustomFilterSfeParams
 * @property {string} appName - null
 * @property {string} component_id - grid gallery, slider gallery, product page
 * @property {boolean} isMerchant - isMerchant status
 * @property {GUID} bi_token - null
 * @property {GUID} storeId - null
 * @property {string} text - custom filter name
 * @property {GUID} userGuid - userGuid
 **/
/**
 * Name: Remove custom filter SFE. Evid: 840.
 * Event description: add custom filter- right now it is for collections filter only.

 * appName - Type: string.
 *
 * component_id - Type: string. Desc: grid gallery, slider gallery, product page
 *
 * isMerchant - Type: bool. Desc: isMerchant status
 *
 * bi_token - Type: guid.
 *
 * storeId - Type: guid.
 *
 * text - Type: string. Desc: custom filter name
 *
 * userGuid - Type: guid. Desc: userGuid
 * @param {removeCustomFilterSfeParams} params The parameters for this event.
 * @return {Object} LogObject
**/
export var removeCustomFilterSfe = function(params) {
    return {
        evid: 840,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
};
/**
 * @typedef {Object} changeStyleColorSfeParams
 * @property {string} appName - null
 * @property {string} component_id - grid gallery, slider galeery, product page
 * @property {string} editorMode - mobile / desktop
 * @property {string} element - product image, name&price&sku, product options&quantity, button, info sections, social media , withorders/whitoutorders
 * @property {string} value - null
 * @property {boolean} isMerchant - isMerchant status
 * @property {GUID} bi_token - null
 * @property {string} parameter - style/color parameter
 * @property {GUID} storeId - null
 * @property {GUID} userGuid - userGuid
 **/
/**
 * Name: change style & color SFE. Evid: 812.
 * Event description: upon changing a store style or color.

 * appName - Type: string.
 *
 * component_id - Type: string. Desc: grid gallery, slider galeery, product page
 *
 * editorMode - Type: string. Desc: mobile / desktop
 *
 * element - Type: string. Desc: product image, name&price&sku, product options&quantity, button, info sections, social media , withorders/whitoutorders
 *
 * value - Type: string.
 *
 * isMerchant - Type: bool. Desc: isMerchant status
 *
 * bi_token - Type: guid.
 *
 * parameter - Type: string. Desc: style/color parameter
 *
 * storeId - Type: guid.
 *
 * userGuid - Type: guid. Desc: userGuid
 * @param {changeStyleColorSfeParams} params The parameters for this event.
 * @return {Object} LogObject
**/
export var changeStyleColorSfe = function(params) {
    return {
        evid: 812,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
};
/**
 * @typedef {Object} migrationClickOnCtaInStepParams
 * @property {string} appName - null
 * @property {string} button_type - migrate / ok / next....
 * @property {boolean} isMerchant - isMerchant status
 * @property {GUID} bi_token - null
 * @property {string} step - step - welcome / site selector / loading / migrating / success / error...
 * @property {GUID} storeId - null
 **/
/**
 * Name: migration - click on CTA in step. Evid: 301.
 * Event description: click on call to action in migration step in iframe in help center.

 * appName - Type: string.
 *
 * button_type - Type: string. Desc: migrate / ok / next....
 *
 * isMerchant - Type: bool. Desc: isMerchant status
 *
 * bi_token - Type: guid.
 *
 * step - Type: string. Desc: step - welcome / site selector / loading / migrating / success / error...
 *
 * storeId - Type: guid.
 * @param {migrationClickOnCtaInStepParams} params The parameters for this event.
 * @return {Object} LogObject
**/
export var migrationClickOnCtaInStep = function(params) {
    return {
        evid: 301,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
};
/**
 * @typedef {Object} clickOnSettingsTopBarDesignTabParams
 * @property {string} appName - app_name
 * @property {string} component_id - grid gallery, slider galeery, product page
 * @property {boolean} isMerchant - isMerchant status
 * @property {GUID} bi_token - null
 * @property {string} origin - editor / onboarding
 * @property {GUID} storeId - store_id
 * @property {string} tab - with orders / without orders
 * @property {GUID} userGuid - userGuid
 **/
/**
 * Name: Click on settings Top Bar (design Tab). Evid: 34.
 * Event description: click on the top bar in the settings menu under design tab
(For members components).

 * appName - Type: string. Desc: app_name
 *
 * component_id - Type: string. Desc: grid gallery, slider galeery, product page
 *
 * isMerchant - Type: bool. Desc: isMerchant status
 *
 * bi_token - Type: guid.
 *
 * origin - Type: string. Desc: editor / onboarding
 *
 * storeId - Type: guid. Desc: store_id
 *
 * tab - Type: string. Desc: with orders / without orders
 *
 * userGuid - Type: guid. Desc: userGuid
 * @param {clickOnSettingsTopBarDesignTabParams} params The parameters for this event.
 * @return {Object} LogObject
**/
export var clickOnSettingsTopBarDesignTab = function(params) {
    return {
        evid: 34,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
};
/**
 * @typedef {Object} thankYouPageDownloadFileClickedSfParams
 * @property {string} appName - null
 * @property {GUID} cartId - cartId
 * @property {boolean} isMerchant - isMerchant status
 * @property {GUID} bi_token - null
 * @property {string} orderId - orderId
 * @property {GUID} storeId - null
 * @property {GUID} visitorId - visitorId
 **/
/**
 * Name: Thank you page download file clicked SF. Evid: 175.
 * Event description: buyer clicked on download file  in Thank you page.

 * appName - Type: string.
 *
 * cartId - Type: guid. Desc: cartId
 *
 * isMerchant - Type: bool. Desc: isMerchant status
 *
 * bi_token - Type: guid.
 *
 * orderId - Type: string. Desc: orderId
 *
 * storeId - Type: guid.
 *
 * visitorId - Type: guid. Desc: visitorId
 * @param {thankYouPageDownloadFileClickedSfParams} params The parameters for this event.
 * @return {Object} LogObject
**/
export var thankYouPageDownloadFileClickedSf = function(params) {
    return {
        evid: 175,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
};
/**
 * @typedef {Object} viewVeloGalleryParams
 * @property {string} appName - null
 * @property {GUID} galleryInputId - the product_guid the we present the recommendation for
 * @property {GUID} impressionId - unique guid for the gallery loading session
 * @property {boolean} isMerchant - null
 * @property {GUID} bi_token - null
 * @property {string} productList - null
 * @property {string} productsLogic - the logic of product recommendation that is presented in the gallery
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_id
 **/
/**
 * Name: View Velo Gallery. Evid: 642.
 * Event description: sent from product gallery made by Velo..

 * appName - Type: string.
 *
 * galleryInputId - Type: guid. Desc: the product_guid the we present the recommendation for
 *
 * impressionId - Type: guid. Desc: unique guid for the gallery loading session
 *
 * isMerchant - Type: bool.
 *
 * bi_token - Type: guid.
 *
 * productList - Type: string.
 *
 * productsLogic - Type: string. Desc: the logic of product recommendation that is presented in the gallery
 *
 * storeId - Type: guid. Desc: store_id
 *
 * visitor_id - Type: guid. Desc: visitor_id
 * @param {viewVeloGalleryParams} params The parameters for this event.
 * @return {Object} LogObject
**/
export var viewVeloGallery = function(params) {
    return {
        evid: 642,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
};
/**
 * @typedef {Object} clickInFilterScreenOaParams
 * @property {string} appName - null
 * @property {string} filterScreen - relevant for SF : filterBy / collections
 * @property {boolean} isMerchant - null
 * @property {GUID} bi_token - null
 * @property {string} origin - products / orders
 * @property {GUID} storeId - store_id
 * @property {string} value - clear / close
 **/
/**
 * Name: click in filter screen  OA. Evid: 500.
 * Event description: When user clicks clear filter close (x) -.

 * appName - Type: string.
 *
 * filterScreen - Type: string. Desc: relevant for SF : filterBy / collections
 *
 * isMerchant - Type: bool.
 *
 * bi_token - Type: guid.
 *
 * origin - Type: string. Desc: products / orders
 *
 * storeId - Type: guid. Desc: store_id
 *
 * value - Type: string. Desc: clear / close
 * @param {clickInFilterScreenOaParams} params The parameters for this event.
 * @return {Object} LogObject
**/
export var clickInFilterScreenOa = function(params) {
    return {
        evid: 500,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
};
/**
 * @typedef {Object} viewStorePageInEditorParams
 * @property {string} appName - null
 * @property {boolean} isMerchant - isMerchant status
 * @property {GUID} bi_token - null
 * @property {string} origin - editor / preview
 * @property {string} pageId - page name - thank you page / product page...
 * @property {GUID} storeId - null
 **/
/**
 * Name: view store page in editor. Evid: 18.
 * Event description: view store page in editor / preview.

 * appName - Type: string.
 *
 * isMerchant - Type: bool. Desc: isMerchant status
 *
 * bi_token - Type: guid.
 *
 * origin - Type: string. Desc: editor / preview
 *
 * pageId - Type: string. Desc: page name - thank you page / product page...
 *
 * storeId - Type: guid.
 * @param {viewStorePageInEditorParams} params The parameters for this event.
 * @return {Object} LogObject
**/
export var viewStorePageInEditor = function(params) {
    return {
        evid: 18,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
};
/**
 * @typedef {Object} viewProductPageSfParams
 * @property {string} appName - app name
 * @property {string} socialButton - which social button appear on page
 * @property {boolean} addToCart - has add to cart button
 * @property {boolean} buyNow - has buy now button
 * @property {boolean} hasDynamicPaymentMethods - does dynamic payment methods is on in pp settings (only relevant for editor))
 * @property {boolean} hasNotifyMe - did the merchant activated back in stock notification for the buyer
 * @property {boolean} hasPlans - product has subscriptions plans
 * @property {boolean} preOrder - has pre order button
 * @property {boolean} preOrderNow - has pre order now button
 * @property {boolean} hasPriceBreakdownWidget - has price breakdown widget (the banner you show for installments) -- not possible
 * @property {boolean} hasStockIndicator - True if the user enabled stock indicator in product page false if not
 * @property {boolean} hasWishlist - has wishlist
 * @property {string} inventoryStatus - in stock / out of stock / partially
 * @property {boolean} isAddToCartDisplayed - True/False
 * @property {boolean} isBackInStockDisplayed - True/False
 * @property {boolean} isBlocks - Is the product page is using Blocks.
 * @property {boolean} isBuyNowDisplayed - True/False
 * @property {boolean} isCustomTextFieldsDisplayed - True/False
 * @property {boolean} isDescriptionDisplayed - True/False
 * @property {boolean} isGalleryDisplayed - True/False
 * @property {boolean} isInfoSectionDisplayed - True/False
 * @property {boolean} isMerchant - null
 * @property {boolean} isMobileFriendly - true if mobile friendly, false otherwise
 * @property {boolean} isMorePaymentOptionsDispalyed - True/False
 * @property {boolean} isNavigationDisplayed - True/False
 * @property {boolean} isPictureDisplayed - True/False
 * @property {boolean} isPriceAndDiscountDisplayed - True/False
 * @property {boolean} isPricePerUnitDisplayed - True/False
 * @property {boolean} isPriceRangeDisplayed - True/False
 * @property {boolean} isProductNameDisplayed - True/False
 * @property {boolean} isProductOptionsDisplayed - True/False
 * @property {boolean} isQuantityDisplayed - True/False
 * @property {boolean} isShareButtonsDisplayed - True/False
 * @property {boolean} isSkuDisplayed - True/False
 * @property {boolean} isSubscriptionDisplayed - True/False
 * @property {boolean} isTaxAndShippingInfoDisplayed - True/False
 * @property {GUID} bi_token - null
 * @property {string} navigationClick - what happens when you click on add to cart
 * @property {boolean} oneTimePurchase - if the user enabled one time purchase with subscription
 * @property {string} options - which options types the product has, no options = NULL
 * @property {string} priceBreakdown - list of displayed price breakdowns - tax, shipping, etc. NULL if not relevant
 * @property {string} productId - product_guid
 * @property {string} productType - digital/physical
 * @property {number} remainingItemCount - The inventory quantity that is shown to the user
 * @property {boolean} showUnitPrice - does the product show price per unit
 * @property {GUID} storeId - store_id
 * @property {string} type - product page layout - - classic / sleek / stunning / spotlight / simple
 **/
/**
 * Name: View Product Page SF. Evid: 541.
 * Event description: view product page in SF
(preview, Editor & live site).

 * appName - Type: string. Desc: app name
 *
 * socialButton - Type: string. Desc: which social button appear on page
 *
 * addToCart - Type: bool. Desc: has add to cart button
 *
 * buyNow - Type: bool. Desc: has buy now button
 *
 * hasDynamicPaymentMethods - Type: bool. Desc: does dynamic payment methods is on in pp settings (only relevant for editor))
 *
 * hasNotifyMe - Type: bool. Desc: did the merchant activated back in stock notification for the buyer
 *
 * hasPlans - Type: bool. Desc: product has subscriptions plans
 *
 * preOrder - Type: bool. Desc: has pre order button
 *
 * preOrderNow - Type: bool. Desc: has pre order now button
 *
 * hasPriceBreakdownWidget - Type: bool. Desc: has price breakdown widget (the banner you show for installments) -- not possible
 *
 * hasStockIndicator - Type: bool. Desc: True if the user enabled stock indicator in product page false if not
 *
 * hasWishlist - Type: bool. Desc: has wishlist
 *
 * inventoryStatus - Type: string. Desc: in stock / out of stock / partially
 *
 * isAddToCartDisplayed - Type: bool. Desc: True/False
 *
 * isBackInStockDisplayed - Type: bool. Desc: True/False
 *
 * isBlocks - Type: bool. Desc: Is the product page is using Blocks.
 *
 * isBuyNowDisplayed - Type: bool. Desc: True/False
 *
 * isCustomTextFieldsDisplayed - Type: bool. Desc: True/False
 *
 * isDescriptionDisplayed - Type: bool. Desc: True/False
 *
 * isGalleryDisplayed - Type: bool. Desc: True/False
 *
 * isInfoSectionDisplayed - Type: bool. Desc: True/False
 *
 * isMerchant - Type: bool.
 *
 * isMobileFriendly - Type: bool. Desc: true if mobile friendly, false otherwise
 *
 * isMorePaymentOptionsDispalyed - Type: bool. Desc: True/False
 *
 * isNavigationDisplayed - Type: bool. Desc: True/False
 *
 * isPictureDisplayed - Type: bool. Desc: True/False
 *
 * isPriceAndDiscountDisplayed - Type: bool. Desc: True/False
 *
 * isPricePerUnitDisplayed - Type: bool. Desc: True/False
 *
 * isPriceRangeDisplayed - Type: bool. Desc: True/False
 *
 * isProductNameDisplayed - Type: bool. Desc: True/False
 *
 * isProductOptionsDisplayed - Type: bool. Desc: True/False
 *
 * isQuantityDisplayed - Type: bool. Desc: True/False
 *
 * isShareButtonsDisplayed - Type: bool. Desc: True/False
 *
 * isSkuDisplayed - Type: bool. Desc: True/False
 *
 * isSubscriptionDisplayed - Type: bool. Desc: True/False
 *
 * isTaxAndShippingInfoDisplayed - Type: bool. Desc: True/False
 *
 * bi_token - Type: guid.
 *
 * navigationClick - Type: string. Desc: what happens when you click on add to cart
 *
 * oneTimePurchase - Type: bool. Desc: if the user enabled one time purchase with subscription
 *
 * options - Type: string. Desc: which options types the product has, no options = NULL
 *
 * priceBreakdown - Type: string. Desc: list of displayed price breakdowns - tax, shipping, etc. NULL if not relevant
 *
 * productId - Type: string. Desc: product_guid
 *
 * productType - Type: string. Desc: digital/physical
 *
 * remainingItemCount - Type: numeric. Desc: The inventory quantity that is shown to the user
 *
 * showUnitPrice - Type: bool. Desc: does the product show price per unit
 *
 * storeId - Type: guid. Desc: store_id
 *
 * type - Type: string. Desc: product page layout - - classic / sleek / stunning / spotlight / simple
 * @param {viewProductPageSfParams} params The parameters for this event.
 * @return {Object} LogObject
**/
export var viewProductPageSf = function(params) {
    return {
        evid: 541,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
};
/**
 * @typedef {Object} changeMiniCartBehaviorSfeParams
 * @property {string} appName - null
 * @property {boolean} isMerchant - isMerchant status
 * @property {GUID} bi_token - null
 * @property {string} parameter - parameter
 * @property {GUID} storeId - null
 * @property {GUID} userGuid - userGuid
 * @property {string} value - behavior type
 **/
/**
 * Name: change mini cart behavior SFE. Evid: 822.
 * Event description: select a behavior for click on mini cart in mini cart settings.

 * appName - Type: string.
 *
 * isMerchant - Type: bool. Desc: isMerchant status
 *
 * bi_token - Type: guid.
 *
 * parameter - Type: string. Desc: parameter
 *
 * storeId - Type: guid.
 *
 * userGuid - Type: guid. Desc: userGuid
 *
 * value - Type: string. Desc: behavior type
 * @param {changeMiniCartBehaviorSfeParams} params The parameters for this event.
 * @return {Object} LogObject
**/
export var changeMiniCartBehaviorSfe = function(params) {
    return {
        evid: 822,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
};
/**
 * @typedef {Object} viewOrderHistoryPageSfParams
 * @property {string} appName - appName
 * @property {string} contact_id - contact id
 * @property {number} itemsCount - number of orders in the page (for without orders it will be 0)
 * @property {boolean} isMerchant - isMerchant status
 * @property {GUID} bi_token - null
 * @property {string} origin - origin
 * @property {GUID} site_member_id - member id
 * @property {GUID} storeId - instance id
 * @property {GUID} visitorId - visitorId
 **/
/**
 * Name: view order_history page SF. Evid: 127.
 * Event description: view order history page (when it is with orders or without).

 * appName - Type: string. Desc: appName
 *
 * contact_id - Type: string. Desc: contact id
 *
 * itemsCount - Type: numeric. Desc: number of orders in the page (for without orders it will be 0)
 *
 * isMerchant - Type: bool. Desc: isMerchant status
 *
 * bi_token - Type: guid.
 *
 * origin - Type: string. Desc: origin
 *
 * site_member_id - Type: guid. Desc: member id
 *
 * storeId - Type: guid. Desc: instance id
 *
 * visitorId - Type: guid. Desc: visitorId
 * @param {viewOrderHistoryPageSfParams} params The parameters for this event.
 * @return {Object} LogObject
**/
export var viewOrderHistoryPageSf = function(params) {
    return {
        evid: 127,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
};
/**
 * @typedef {Object} viewCheckoutInLiveSitePopupSfParams
 * @property {string} appName - app_name
 * @property {boolean} isMerchant - null
 * @property {GUID} bi_token - null
 * @property {string} origin - where the modal pops up (cart / product page...)
 * @property {GUID} storeId - store_id
 **/
/**
 * Name: View checkout in live site popup SF. Evid: 273.
 * Event description: Modal opens when the user tries to view checkout in preview mode..

 * appName - Type: string. Desc: app_name
 *
 * isMerchant - Type: bool.
 *
 * bi_token - Type: guid.
 *
 * origin - Type: string. Desc: where the modal pops up (cart / product page...)
 *
 * storeId - Type: guid. Desc: store_id
 * @param {viewCheckoutInLiveSitePopupSfParams} params The parameters for this event.
 * @return {Object} LogObject
**/
export var viewCheckoutInLiveSitePopupSf = function(params) {
    return {
        evid: 273,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
};
/**
 * @typedef {Object} clickManageProductInCartOaStoreFrontParams
 * @property {string} appName - null
 * @property {GUID} cartId - cart_id
 * @property {string} cartType - cart_type
 * @property {boolean} isMerchant - null
 * @property {boolean} isOwner - true for owner and false for member
 * @property {GUID} bi_token - msid
 * @property {string} productId - product_guid
 * @property {string} productType - Digital/ Physical
 * @property {GUID} storeId - store_id
 **/
/**
 * Name: Click Manage Product in cart OA StoreFront. Evid: 185.
 * Event description: wneh buyer in StoreFront (member view) clicks on Product name in cart (leads to open Manage Product popup).

 * appName - Type: string.
 *
 * cartId - Type: guid. Desc: cart_id
 *
 * cartType - Type: string. Desc: cart_type
 *
 * isMerchant - Type: bool.
 *
 * isOwner - Type: bool. Desc: true for owner and false for member
 *
 * bi_token - Type: guid. Desc: msid
 *
 * productId - Type: string. Desc: product_guid
 *
 * productType - Type: string. Desc: Digital/ Physical
 *
 * storeId - Type: guid. Desc: store_id
 * @param {clickManageProductInCartOaStoreFrontParams} params The parameters for this event.
 * @return {Object} LogObject
**/
export var clickManageProductInCartOaStoreFront = function(params) {
    return {
        evid: 185,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
};
/**
 * @typedef {Object} clickNoThanksOnMerchantUpgradePopupSfParams
 * @property {string} appName - null
 * @property {boolean} isMerchant - isMerchant status
 * @property {GUID} bi_token - null
 * @property {GUID} storeId - null
 * @property {GUID} visitor_id - null
 **/
/**
 * Name: Click to place test order merchant upgrade popup SF. Evid: 166.
 * Event description: When the store owner clicks to continue to checkout to place a test order, in upgrade popup in the live site.

 * appName - Type: string.
 *
 * isMerchant - Type: bool. Desc: isMerchant status
 *
 * bi_token - Type: guid.
 *
 * storeId - Type: guid.
 *
 * visitor_id - Type: guid.
 * @param {clickNoThanksOnMerchantUpgradePopupSfParams} params The parameters for this event.
 * @return {Object} LogObject
**/
export var clickNoThanksOnMerchantUpgradePopupSf = function(params) {
    return {
        evid: 166,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
};
/**
 * @typedef {Object} clickToOpenProductsListToChangeProductInWidgetSfeParams
 * @property {string} appName - app
 * @property {string} component_id - grid gallery, slider galeery, product page
 * @property {boolean} isMerchant - isMerchant status
 * @property {GUID} bi_token - msid
 * @property {string} origin - editor / onboarding
 * @property {GUID} storeId - store
 * @property {GUID} userGuid - userGuid
 **/
/**
 * Name: click to open products list to change product in widget SFE. Evid: 837.
 * Event description: merchant click to open the product list in order to change the connected product to a product widget.

 * appName - Type: string. Desc: app
 *
 * component_id - Type: string. Desc: grid gallery, slider galeery, product page
 *
 * isMerchant - Type: bool. Desc: isMerchant status
 *
 * bi_token - Type: guid. Desc: msid
 *
 * origin - Type: string. Desc: editor / onboarding
 *
 * storeId - Type: guid. Desc: store
 *
 * userGuid - Type: guid. Desc: userGuid
 * @param {clickToOpenProductsListToChangeProductInWidgetSfeParams} params The parameters for this event.
 * @return {Object} LogObject
**/
export var clickToOpenProductsListToChangeProductInWidgetSfe = function(params) {
    return {
        evid: 837,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
};
/**
 * @typedef {Object} clickToRemoveWishlistSfeParams
 * @property {string} appName - null
 * @property {string} component_id - product page
 * @property {boolean} isMerchant - null
 * @property {GUID} bi_token - null
 * @property {GUID} storeId - store_id
 **/
/**
 * Name: Click to remove Wishlist SFE. Evid: 842.
 * Event description: when a user clicks to remove wishlist in product page settings.

 * appName - Type: string.
 *
 * component_id - Type: string. Desc: product page
 *
 * isMerchant - Type: bool.
 *
 * bi_token - Type: guid.
 *
 * storeId - Type: guid. Desc: store_id
 * @param {clickToRemoveWishlistSfeParams} params The parameters for this event.
 * @return {Object} LogObject
**/
export var clickToRemoveWishlistSfe = function(params) {
    return {
        evid: 842,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
};
/**
 * @typedef {Object} showMerchantPaymentPopupSfParams
 * @property {string} appName - null
 * @property {boolean} isMerchant - isMerchant status
 * @property {string} mode - null
 * @property {GUID} bi_token - null
 * @property {string} origin - where the modal pops up (cart / product page...)
 * @property {GUID} storeId - null
 * @property {GUID} visitor_id - null
 **/
/**
 * Name: Show merchant payment popup SF. Evid: 164.


 * appName - Type: string.
 *
 * isMerchant - Type: bool. Desc: isMerchant status
 *
 * mode - Type: string.
 *
 * bi_token - Type: guid.
 *
 * origin - Type: string. Desc: where the modal pops up (cart / product page...)
 *
 * storeId - Type: guid.
 *
 * visitor_id - Type: guid.
 * @param {showMerchantPaymentPopupSfParams} params The parameters for this event.
 * @return {Object} LogObject
**/
export var showMerchantPaymentPopupSf = function(params) {
    return {
        evid: 164,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
};
/**
 * @typedef {Object} pageLoadingTimeSfParams
 * @property {number} angularFinished_ts - angular finished time stamp
 * @property {string} appName - null
 * @property {string} appVersion - app version
 * @property {number} configPhase_ts - config phase time stamp
 * @property {number} domComplete_ts - dom complete time stamp
 * @property {number} domLoading_ts - dom loading time stamp
 * @property {boolean} isMerchant - isMerchant status
 * @property {number} latency_ts - latency time stamp
 * @property {GUID} bi_token - null
 * @property {number} preRequest_ts - pre request time stamp
 * @property {number} runPhase_ts - run_phase time stamp
 * @property {number} serverResponse_ts - server response time stamp
 * @property {number} startTime - start time for iframe loading
 * @property {GUID} storeId - null
 * @property {GUID} visitor_id - visitor_id
 **/
/**
 * Name: page loading time SF. Evid: 861.
 * Event description: this event holds loading time stamp for each step in wixstores iframe loading in live site.

 * angularFinished_ts - Type: numeric. Desc: angular finished time stamp
 *
 * appName - Type: string.
 *
 * appVersion - Type: string. Desc: app version
 *
 * configPhase_ts - Type: numeric. Desc: config phase time stamp
 *
 * domComplete_ts - Type: numeric. Desc: dom complete time stamp
 *
 * domLoading_ts - Type: numeric. Desc: dom loading time stamp
 *
 * isMerchant - Type: bool. Desc: isMerchant status
 *
 * latency_ts - Type: numeric. Desc: latency time stamp
 *
 * bi_token - Type: guid.
 *
 * preRequest_ts - Type: numeric. Desc: pre request time stamp
 *
 * runPhase_ts - Type: numeric. Desc: run_phase time stamp
 *
 * serverResponse_ts - Type: numeric. Desc: server response time stamp
 *
 * startTime - Type: numeric. Desc: start time for iframe loading
 *
 * storeId - Type: guid.
 *
 * visitor_id - Type: guid. Desc: visitor_id
 * @param {pageLoadingTimeSfParams} params The parameters for this event.
 * @return {Object} LogObject
**/
export var pageLoadingTimeSf = function(params) {
    return {
        evid: 861,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
};
/**
 * @typedef {Object} clickOnProPlanUpgradeInComponentSettingParams
 * @property {string} appName - app_name
 * @property {string} component_id - CurrencyConverter, AvalaraTax, Subscription
 * @property {boolean} isMerchant - isMerchant status
 * @property {GUID} bi_token - null
 * @property {string} origin - editor / onboarding / StoresBO
 * @property {GUID} storeId - store_id
 * @property {string} type - button / tooltip / banner
 **/
/**
 * Name: High RPU -> Click on upgrade CTA. Evid: 845.
 * Event description: When a user clicks on the pro plan upgrade button in component setting (Can also be from GFPP) OR  When user clicks on Upgrade Now from button / popover / banner in Stores BO for High RPU feature.

 * appName - Type: string. Desc: app_name
 *
 * component_id - Type: string. Desc: CurrencyConverter, AvalaraTax, Subscription
 *
 * isMerchant - Type: bool. Desc: isMerchant status
 *
 * bi_token - Type: guid.
 *
 * origin - Type: string. Desc: editor / onboarding / StoresBO
 *
 * storeId - Type: guid. Desc: store_id
 *
 * type - Type: string. Desc: button / tooltip / banner
 * @param {clickOnProPlanUpgradeInComponentSettingParams} params The parameters for this event.
 * @return {Object} LogObject
**/
export var clickOnProPlanUpgradeInComponentSetting = function(params) {
    return {
        evid: 845,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
};
/**
 * @typedef {Object} selectShippingMethodFromTheDropdownInCartPageSfParams
 * @property {string} appName - appName
 * @property {GUID} cartId - cartId
 * @property {string} cartType - Digital/ Physical/ mixed (Digital &Physical)
 * @property {boolean} isMerchant - is_merchant
 * @property {GUID} bi_token - msid
 * @property {string} orig_shipping_method - current shipping method in cart page (free shipping/ Flat rate/ rate by weight/ etc...)
 * @property {string} selected_shipping_method - the new shipping method that was selected from the dropdown in cart page  (free shipping/ Flat rate/ rate by weight/ etc...)
 * @property {GUID} storeId - store_id
 **/
/**
 * Name: Select shipping method from the dropdown in cart page SF. Evid: 222.
 * Event description: When a visitor clicks on one of the options in the shipping method dropdown on the cart page.

 * appName - Type: string. Desc: appName
 *
 * cartId - Type: guid. Desc: cartId
 *
 * cartType - Type: string. Desc: Digital/ Physical/ mixed (Digital &Physical)
 *
 * isMerchant - Type: bool. Desc: is_merchant
 *
 * bi_token - Type: guid. Desc: msid
 *
 * orig_shipping_method - Type: string. Desc: current shipping method in cart page (free shipping/ Flat rate/ rate by weight/ etc...)
 *
 * selected_shipping_method - Type: string. Desc: the new shipping method that was selected from the dropdown in cart page  (free shipping/ Flat rate/ rate by weight/ etc...)
 *
 * storeId - Type: guid. Desc: store_id
 * @param {selectShippingMethodFromTheDropdownInCartPageSfParams} params The parameters for this event.
 * @return {Object} LogObject
**/
export var selectShippingMethodFromTheDropdownInCartPageSf = function(params) {
    return {
        evid: 222,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
};
/**
 * @typedef {Object} clickOnContinueToPaymentSfParams
 * @property {string} appName - null
 * @property {GUID} cartId - null
 * @property {string} cartType - Digital/ Physical/ mixed (Digital &Physical)
 * @property {GUID} checkoutId - checkout_id
 * @property {number} optionscount - number of delivery methods from which buyer choosed
 * @property {number} selectedoptionindex - null
 * @property {boolean} isMerchant - isMerchant status
 * @property {boolean} isOwner - is_owner
 * @property {string} methodType - pickup/not pickup
 * @property {GUID} bi_token - null
 * @property {string} orig_shipping_method - the shipping choice the buyer did in the cart
 * @property {string} origin - OA StoreFront
 * @property {GUID} owner_id - owner_id
 * @property {string} shippingRuleOptions - shipping method type- free shipping/ Flat rate/ rate by weight/ rate by order price/store pickup / local delivery
 * @property {GUID} storeId - null
 * @property {string} selectedoptiontype - null
 * @property {GUID} uuid - uuid
 * @property {GUID} visitor_id - null
 **/
/**
 * Name: Delivery method set SF. Evid: 163.
 * Event description: Click on continue to payment SF (on web) since june 2019 also sent from OneApp (leads to "Review Oreder" (placeOrder) screen).

 * appName - Type: string.
 *
 * cartId - Type: guid.
 *
 * cartType - Type: string. Desc: Digital/ Physical/ mixed (Digital &Physical)
 *
 * checkoutId - Type: guid. Desc: checkout_id
 *
 * optionscount - Type: numeric. Desc: number of delivery methods from which buyer choosed
 *
 * selectedoptionindex - Type: numeric.
 *
 * isMerchant - Type: bool. Desc: isMerchant status
 *
 * isOwner - Type: bool. Desc: is_owner
 *
 * methodType - Type: string. Desc: pickup/not pickup
 *
 * bi_token - Type: guid.
 *
 * orig_shipping_method - Type: string. Desc: the shipping choice the buyer did in the cart
 *
 * origin - Type: string. Desc: OA StoreFront
 *
 * owner_id - Type: guid. Desc: owner_id
 *
 * shippingRuleOptions - Type: string. Desc: shipping method type- free shipping/ Flat rate/ rate by weight/ rate by order price/store pickup / local delivery
 *
 * storeId - Type: guid.
 *
 * selectedoptiontype - Type: string.
 *
 * uuid - Type: guid. Desc: uuid
 *
 * visitor_id - Type: guid.
 * @param {clickOnContinueToPaymentSfParams} params The parameters for this event.
 * @return {Object} LogObject
**/
export var clickOnContinueToPaymentSf = function(params) {
    return {
        evid: 163,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
};
/**
 * @typedef {Object} subscriptionsAreComingSoonVisitorPopupSfParams
 * @property {string} appName - app_name
 * @property {boolean} isMerchant - isMerchant status
 * @property {GUID} bi_token - msid
 * @property {string} origin - where the modal pops up (product page, product widget, gallery...)
 * @property {GUID} storeId - store_id
 * @property {string} viewMode - editor / live / preview
 * @property {GUID} visitor_id - visitor_id
 **/
/**
 * Name: Subscriptions are coming soon visitor popup SF. Evid: 457.
 * Event description: When a "subscriptions are coming soon" pop-up opens to the buyer. It happens when the user put on his store a subscription product, but doesn't have a premium..

 * appName - Type: string. Desc: app_name
 *
 * isMerchant - Type: bool. Desc: isMerchant status
 *
 * bi_token - Type: guid. Desc: msid
 *
 * origin - Type: string. Desc: where the modal pops up (product page, product widget, gallery...)
 *
 * storeId - Type: guid. Desc: store_id
 *
 * viewMode - Type: string. Desc: editor / live / preview
 *
 * visitor_id - Type: guid. Desc: visitor_id
 * @param {subscriptionsAreComingSoonVisitorPopupSfParams} params The parameters for this event.
 * @return {Object} LogObject
**/
export var subscriptionsAreComingSoonVisitorPopupSf = function(params) {
    return {
        evid: 457,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
};
/**
 * @typedef {Object} cartIconLoadedSfParams
 * @property {string} appName - app name
 * @property {boolean} isMerchant - null
 * @property {boolean} isMobileFriendly - true if mobile friendly, false otherwise
 * @property {GUID} bi_token - null
 * @property {string} navigationClick - mini cart / cart page
 * @property {GUID} storeId - store_id
 **/
/**
 * Name: Cart Icon Loaded SF. Evid: 546.
 * Event description: when user clicks on tabs inside orders / products widget in OneApp dashboard.

 * appName - Type: string. Desc: app name
 *
 * isMerchant - Type: bool.
 *
 * isMobileFriendly - Type: bool. Desc: true if mobile friendly, false otherwise
 *
 * bi_token - Type: guid.
 *
 * navigationClick - Type: string. Desc: mini cart / cart page
 *
 * storeId - Type: guid. Desc: store_id
 * @param {cartIconLoadedSfParams} params The parameters for this event.
 * @return {Object} LogObject
**/
export var cartIconLoadedSf = function(params) {
    return {
        evid: 546,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
};
/**
 * @typedef {Object} cartCreatedSfParams
 * @property {string} appName - null
 * @property {GUID} cartId - null
 * @property {string} cartType - Digital/ Physical/ mixed (Digital &Physical)
 * @property {boolean} isMerchant - null
 * @property {GUID} bi_token - null
 * @property {GUID} storeId - null
 * @property {GUID} visitorId - null
 **/
/**
 * Name: Cart Created SF. Evid: 1101.
 * Event description: Cart Created SF.

 * appName - Type: string.
 *
 * cartId - Type: guid.
 *
 * cartType - Type: string. Desc: Digital/ Physical/ mixed (Digital &Physical)
 *
 * isMerchant - Type: bool.
 *
 * bi_token - Type: guid.
 *
 * storeId - Type: guid.
 *
 * visitorId - Type: guid.
 * @param {cartCreatedSfParams} params The parameters for this event.
 * @return {Object} LogObject
**/
export var cartCreatedSf = function(params) {
    return {
        evid: 1101,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
};
/**
 * @typedef {Object} chooseLogicForSliderGalleryOnComponentSettingsSfeParams
 * @property {GUID} algorithmId - when the logic is related products logic (ds model or external one) it will send here the algorithm id
 * @property {GUID} algorithmProviderId - when the logic is related products logic (ds model or external one) it will send here the algorithm provider id
 * @property {string} appName - app_name
 * @property {string} component_id - grid gallery, slider galery, product page
 * @property {boolean} isMerchant - isMerchant status
 * @property {GUID} bi_token - null
 * @property {string} origin - editor / onboarding
 * @property {GUID} storeId - store_id
 * @property {GUID} userGuid - userGuid
 * @property {string} value - related products / collections
 **/
/**
 * Name: Choose logic for slider gallery on component settings  SFE. Evid: 148.
 * Event description: click on one of the radio buttons to choose which logic to display in the slider gallery.

 * algorithmId - Type: guid. Desc: when the logic is related products logic (ds model or external one) it will send here the algorithm id
 *
 * algorithmProviderId - Type: guid. Desc: when the logic is related products logic (ds model or external one) it will send here the algorithm provider id
 *
 * appName - Type: string. Desc: app_name
 *
 * component_id - Type: string. Desc: grid gallery, slider galery, product page
 *
 * isMerchant - Type: bool. Desc: isMerchant status
 *
 * bi_token - Type: guid.
 *
 * origin - Type: string. Desc: editor / onboarding
 *
 * storeId - Type: guid. Desc: store_id
 *
 * userGuid - Type: guid. Desc: userGuid
 *
 * value - Type: string. Desc: related products / collections
 * @param {chooseLogicForSliderGalleryOnComponentSettingsSfeParams} params The parameters for this event.
 * @return {Object} LogObject
**/
export var chooseLogicForSliderGalleryOnComponentSettingsSfe = function(params) {
    return {
        evid: 148,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
};
/**
 * @typedef {Object} minimumOrderMessageIsShownInCartParams
 * @property {string} appName - null
 * @property {boolean} buttonEnabled - true - if the button is enabled false -if button is disabled
 * @property {GUID} cartId - cart id
 * @property {GUID} checkoutId - only in EP
 * @property {string} currency - the currency that was shown in the message
 * @property {number} diffLong - The diff between the relevant order value and the minimum order threshold  multiplied by 10000
 * @property {boolean} isMerchant - null
 * @property {number} minimumValueLong - the minimum order threshold multiplied by 10000
 * @property {GUID} bi_token - null
 * @property {GUID} storeId - .
 * @property {GUID} visitor_id - visitor_id
 **/
/**
 * Name: Minimum order message is shown in cart. Evid: 653.
 * Event description: Minimum order message is shown in cart.

 * appName - Type: string.
 *
 * buttonEnabled - Type: bool. Desc: true - if the button is enabled false -if button is disabled
 *
 * cartId - Type: guid. Desc: cart id
 *
 * checkoutId - Type: guid. Desc: only in EP
 *
 * currency - Type: string. Desc: the currency that was shown in the message
 *
 * diffLong - Type: numeric. Desc: The diff between the relevant order value and the minimum order threshold  multiplied by 10000
 *
 * isMerchant - Type: bool.
 *
 * minimumValueLong - Type: numeric. Desc: the minimum order threshold multiplied by 10000
 *
 * bi_token - Type: guid.
 *
 * storeId - Type: guid. Desc: .
 *
 * visitor_id - Type: guid. Desc: visitor_id
 * @param {minimumOrderMessageIsShownInCartParams} params The parameters for this event.
 * @return {Object} LogObject
**/
export var minimumOrderMessageIsShownInCart = function(params) {
    return {
        evid: 653,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
};
/**
 * @typedef {Object} saveNoteToSellerSfParams
 * @property {string} appName - null
 * @property {GUID} cartId - cart id
 * @property {GUID} checkoutId - checkout_id
 * @property {boolean} is_empty - is text field empty
 * @property {boolean} isMerchant - isMerchant status
 * @property {boolean} isOwner - is_owner
 * @property {GUID} bi_token - null
 * @property {string} origin - OA StoreFront
 * @property {GUID} storeId - null
 * @property {GUID} visitor_id - visitor_id
 **/
/**
 * Name: Save note to seller SF. Evid: 122.
 * Event description: buyer clicks on 'done' in add note to seller field in cart page. since june 2019 also sent from OA StoreFront (with origin).

 * appName - Type: string.
 *
 * cartId - Type: guid. Desc: cart id
 *
 * checkoutId - Type: guid. Desc: checkout_id
 *
 * is_empty - Type: bool. Desc: is text field empty
 *
 * isMerchant - Type: bool. Desc: isMerchant status
 *
 * isOwner - Type: bool. Desc: is_owner
 *
 * bi_token - Type: guid.
 *
 * origin - Type: string. Desc: OA StoreFront
 *
 * storeId - Type: guid.
 *
 * visitor_id - Type: guid. Desc: visitor_id
 * @param {saveNoteToSellerSfParams} params The parameters for this event.
 * @return {Object} LogObject
**/
export var saveNoteToSellerSf = function(params) {
    return {
        evid: 122,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
};
/**
 * @typedef {Object} sortGallerySfParams
 * @property {string} appName - null
 * @property {boolean} isMerchant - isMerchant status
 * @property {string} method - price / newest / name
 * @property {GUID} bi_token - null
 * @property {string} sortDir - null
 * @property {GUID} storeId - null
 * @property {GUID} visitor_id - null
 **/
/**
 * Name: Sort gallery SF. Evid: 13.


 * appName - Type: string.
 *
 * isMerchant - Type: bool. Desc: isMerchant status
 *
 * method - Type: string. Desc: price / newest / name
 *
 * bi_token - Type: guid.
 *
 * sortDir - Type: string.
 *
 * storeId - Type: guid.
 *
 * visitor_id - Type: guid.
 * @param {sortGallerySfParams} params The parameters for this event.
 * @return {Object} LogObject
**/
export var sortGallerySf = function(params) {
    return {
        evid: 13,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
};
/**
 * @typedef {Object} checkoutPageLoadSfParams
 * @property {string} appName - app_name
 * @property {GUID} cartId - cart_id
 * @property {string} cartType - Digital/ Physical/ mixed (Digital &Physical)
 * @property {GUID} checkoutId - checkout_id
 * @property {string} checkoutType - in viewer / out of viewer
 * @property {number} itemsCount - number of items in the cart
 * @property {string} first_stage - first_stage_open in checkout page
 * @property {string} flowType - 'quick flow' / 'full flow'
 * @property {boolean} hasMembers - .
 * @property {boolean} is_member - true if the visitor signed in as a member, false otherwise
 * @property {boolean} isMerchant - isMerchant status
 * @property {boolean} isOwner - true for merchant, false for member
 * @property {boolean} isPolicy - has policies in checkout
 * @property {GUID} bi_token - msid
 * @property {number} numOfPickup - Number of pickup options presented to the buyer
 * @property {number} num_of_shipping - number of shipping choices presented to the visitor
 * @property {string} origin - 'eWallet redirect - cancel' / 'eWallet redirect - continue' / 'cart' / 'product page' / 'product widget' / 'quick view'
 * @property {string} originType - origin type
 * @property {GUID} owner_id - uuid of site owner
 * @property {string} paymentProviders - array of payment providers connected to the store
 * @property {boolean} savedAddress - true if the member has saved address
 * @property {string} shippingMethodType - shipping /store pickup / none
 * @property {GUID} siteMemberId - member id
 * @property {GUID} storeId - store_id
 * @property {GUID} uuid - uuid
 * @property {GUID} visitor_id - visitor_id
 **/
/**
 * Name: Checkout page load SF. Evid: 36.
 * Event description: this event indicates witch "checkout page" was presented to the user. there are 6 types that depends on: 1.cart_type : Digital/ Physical/ mixed (Digital &Physical)  2. shipping method : shipping /store pickup / non. 3. flow_type: quick / full.

 * appName - Type: string. Desc: app_name
 *
 * cartId - Type: guid. Desc: cart_id
 *
 * cartType - Type: string. Desc: Digital/ Physical/ mixed (Digital &Physical)
 *
 * checkoutId - Type: guid. Desc: checkout_id
 *
 * checkoutType - Type: string. Desc: in viewer / out of viewer
 *
 * itemsCount - Type: numeric. Desc: number of items in the cart
 *
 * first_stage - Type: string. Desc: first_stage_open in checkout page
 *
 * flowType - Type: string. Desc: 'quick flow' / 'full flow'
 *
 * hasMembers - Type: bool. Desc: .
 *
 * is_member - Type: bool. Desc: true if the visitor signed in as a member, false otherwise
 *
 * isMerchant - Type: bool. Desc: isMerchant status
 *
 * isOwner - Type: bool. Desc: true for merchant, false for member
 *
 * isPolicy - Type: bool. Desc: has policies in checkout
 *
 * bi_token - Type: guid. Desc: msid
 *
 * numOfPickup - Type: numeric. Desc: Number of pickup options presented to the buyer
 *
 * num_of_shipping - Type: numeric. Desc: number of shipping choices presented to the visitor
 *
 * origin - Type: string. Desc: 'eWallet redirect - cancel' / 'eWallet redirect - continue' / 'cart' / 'product page' / 'product widget' / 'quick view'
 *
 * originType - Type: string. Desc: origin type
 *
 * owner_id - Type: guid. Desc: uuid of site owner
 *
 * paymentProviders - Type: string. Desc: array of payment providers connected to the store
 *
 * savedAddress - Type: bool. Desc: true if the member has saved address
 *
 * shippingMethodType - Type: string. Desc: shipping /store pickup / none
 *
 * siteMemberId - Type: guid. Desc: member id
 *
 * storeId - Type: guid. Desc: store_id
 *
 * uuid - Type: guid. Desc: uuid
 *
 * visitor_id - Type: guid. Desc: visitor_id
 * @param {checkoutPageLoadSfParams} params The parameters for this event.
 * @return {Object} LogObject
**/
export var checkoutPageLoadSf = function(params) {
    return {
        evid: 36,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
};
/**
 * @typedef {Object} updateClickedInSelectYourShippingDestinationPopupSfParams
 * @property {number} additionalFeesPrice - INT, multiplied by 100 000 - sum of all additional fees price in cart
 * @property {string} appName - appName
 * @property {GUID} cartId - cartId
 * @property {string} cartType - Digital/ Physical/ mixed (Digital &Physical)
 * @property {GUID} checkoutId - null
 * @property {boolean} hasZipCode - true if the destination was saved with zip code, else false
 * @property {boolean} isMerchant - is_merchant
 * @property {GUID} bi_token - null
 * @property {number} numberOfAdditionalFees - number of all additional fees in the cart
 * @property {string} shippingDestinationCountry - shipping destination country
 * @property {string} shippingDestinationState - shipping destination state
 * @property {GUID} storeId - storeId
 * @property {GUID} visitorId - visitorId
 **/
/**
 * Name: update clicked in select your shipping destination popup SF. Evid: 125.
 * Event description: in the cart page, when a user want to change is shipping address, to re calculate shipping cost estimation.

 * additionalFeesPrice - Type: numeric. Desc: INT, multiplied by 100 000 - sum of all additional fees price in cart
 *
 * appName - Type: string. Desc: appName
 *
 * cartId - Type: guid. Desc: cartId
 *
 * cartType - Type: string. Desc: Digital/ Physical/ mixed (Digital &Physical)
 *
 * checkoutId - Type: guid.
 *
 * hasZipCode - Type: bool. Desc: true if the destination was saved with zip code, else false
 *
 * isMerchant - Type: bool. Desc: is_merchant
 *
 * bi_token - Type: guid.
 *
 * numberOfAdditionalFees - Type: numeric. Desc: number of all additional fees in the cart
 *
 * shippingDestinationCountry - Type: string. Desc: shipping destination country
 *
 * shippingDestinationState - Type: string. Desc: shipping destination state
 *
 * storeId - Type: guid. Desc: storeId
 *
 * visitorId - Type: guid. Desc: visitorId
 * @param {updateClickedInSelectYourShippingDestinationPopupSfParams} params The parameters for this event.
 * @return {Object} LogObject
**/
export var updateClickedInSelectYourShippingDestinationPopupSf = function(params) {
    return {
        evid: 125,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
};
/**
 * @typedef {Object} changeProductPageLayoutSfeParams
 * @property {string} appName - null
 * @property {string} component_id - grid gallery, slider galeery, product page
 * @property {string} editorMode - mobile / desktop
 * @property {boolean} isMerchant - isMerchant status
 * @property {GUID} bi_token - null
 * @property {GUID} storeId - null
 * @property {string} type - chosen layout
 * @property {GUID} userGuid - userGuid
 **/
/**
 * Name: change component layout SFE. Evid: 824.
 * Event description: user changed the product page layout in app settings.

 * appName - Type: string.
 *
 * component_id - Type: string. Desc: grid gallery, slider galeery, product page
 *
 * editorMode - Type: string. Desc: mobile / desktop
 *
 * isMerchant - Type: bool. Desc: isMerchant status
 *
 * bi_token - Type: guid.
 *
 * storeId - Type: guid.
 *
 * type - Type: string. Desc: chosen layout
 *
 * userGuid - Type: guid. Desc: userGuid
 * @param {changeProductPageLayoutSfeParams} params The parameters for this event.
 * @return {Object} LogObject
**/
export var changeProductPageLayoutSfe = function(params) {
    return {
        evid: 824,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
};
/**
 * @typedef {Object} changeProductPageDisplayedComponentsSfeParams
 * @property {string} action - checked / unchecked
 * @property {string} appName - null
 * @property {string} component_id - grid gallery, slider galeery, product page
 * @property {boolean} isMerchant - isMerchant status
 * @property {GUID} bi_token - null
 * @property {string} origin - editor / onboarding
 * @property {GUID} storeId - null
 * @property {string} type - chosen layout
 * @property {GUID} userGuid - userGuid
 **/
/**
 * Name: change component displayed elements SFE. Evid: 825.
 * Event description: user checked/unchecked a displayed element in component in app settings.

 * action - Type: string. Desc: checked / unchecked
 *
 * appName - Type: string.
 *
 * component_id - Type: string. Desc: grid gallery, slider galeery, product page
 *
 * isMerchant - Type: bool. Desc: isMerchant status
 *
 * bi_token - Type: guid.
 *
 * origin - Type: string. Desc: editor / onboarding
 *
 * storeId - Type: guid.
 *
 * type - Type: string. Desc: chosen layout
 *
 * userGuid - Type: guid. Desc: userGuid
 * @param {changeProductPageDisplayedComponentsSfeParams} params The parameters for this event.
 * @return {Object} LogObject
**/
export var changeProductPageDisplayedComponentsSfe = function(params) {
    return {
        evid: 825,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
};
/**
 * @typedef {Object} minimumOrderClickOnGotItInErrorModalInCheckoutParams
 * @property {string} appName - null
 * @property {GUID} cartId - cart id
 * @property {GUID} checkoutId - only in EP
 * @property {string} currency - the currency that was shown in the message
 * @property {number} diffLong - The diff between the relevant order value and the minimum order threshold  multiplied by 10000
 * @property {boolean} isMerchant - null
 * @property {number} minimumValueLong - the minimum order threshold multiplied by 10000
 * @property {GUID} bi_token - null
 * @property {string} stage - the stage in the checkout the visitor was at when the modal was opened
 * @property {GUID} storeId - .
 * @property {GUID} visitor_id - visitor_id
 **/
/**
 * Name: Minimum order - click on ‘got it’ in error modal in checkout. Evid: 655.
 * Event description: Minimum order - click on ‘got it’ in error modal in checkout.

 * appName - Type: string.
 *
 * cartId - Type: guid. Desc: cart id
 *
 * checkoutId - Type: guid. Desc: only in EP
 *
 * currency - Type: string. Desc: the currency that was shown in the message
 *
 * diffLong - Type: numeric. Desc: The diff between the relevant order value and the minimum order threshold  multiplied by 10000
 *
 * isMerchant - Type: bool.
 *
 * minimumValueLong - Type: numeric. Desc: the minimum order threshold multiplied by 10000
 *
 * bi_token - Type: guid.
 *
 * stage - Type: string. Desc: the stage in the checkout the visitor was at when the modal was opened
 *
 * storeId - Type: guid. Desc: .
 *
 * visitor_id - Type: guid. Desc: visitor_id
 * @param {minimumOrderClickOnGotItInErrorModalInCheckoutParams} params The parameters for this event.
 * @return {Object} LogObject
**/
export var minimumOrderClickOnGotItInErrorModalInCheckout = function(params) {
    return {
        evid: 655,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
};
/**
 * @typedef {Object} thankYouPageLoadSfParams
 * @property {string} appName - null
 * @property {GUID} cartId - cart_id
 * @property {string} cartType - Digital/ Physical/ mixed (Digital &Physical)
 * @property {boolean} isMerchant - isMerchant status
 * @property {boolean} isOwner - true for merchant
 * @property {GUID} bi_token - null
 * @property {number} numOfLineItems - number of uniq products
 * @property {string} orderId - order_id
 * @property {string} origin - OA StoreFront
 * @property {GUID} owner_id - owner_id
 * @property {string} paymentMethodType - online/offline
 * @property {string} paymentProvider - payment provider (paypal, strip....)
 * @property {string} payment_status - payment_status
 * @property {string} shippingMethodType - shipping /store pickup / non
 * @property {GUID} storeId - null
 * @property {GUID} uuid - uuid
 * @property {string} viewMode - editor / site / preview
 * @property {GUID} visitor_id - visitor_id
 **/
/**
 * Name: Thank you page load SF. Evid: 174.
 * Event description: this event indicates witch "thank you page" was presented to the user. there are 10 types that depends on: 1.cart_type : Digital/ Physical/ mixed (Digital &Physical) 2.paymentMethodType : online/offline 3. shipping method : shipping /store pickup / non..

 * appName - Type: string.
 *
 * cartId - Type: guid. Desc: cart_id
 *
 * cartType - Type: string. Desc: Digital/ Physical/ mixed (Digital &Physical)
 *
 * isMerchant - Type: bool. Desc: isMerchant status
 *
 * isOwner - Type: bool. Desc: true for merchant
 *
 * bi_token - Type: guid.
 *
 * numOfLineItems - Type: numeric. Desc: number of uniq products
 *
 * orderId - Type: string. Desc: order_id
 *
 * origin - Type: string. Desc: OA StoreFront
 *
 * owner_id - Type: guid. Desc: owner_id
 *
 * paymentMethodType - Type: string. Desc: online/offline
 *
 * paymentProvider - Type: string. Desc: payment provider (paypal, strip....)
 *
 * payment_status - Type: string. Desc: payment_status
 *
 * shippingMethodType - Type: string. Desc: shipping /store pickup / non
 *
 * storeId - Type: guid.
 *
 * uuid - Type: guid. Desc: uuid
 *
 * viewMode - Type: string. Desc: editor / site / preview
 *
 * visitor_id - Type: guid. Desc: visitor_id
 * @param {thankYouPageLoadSfParams} params The parameters for this event.
 * @return {Object} LogObject
**/
export var thankYouPageLoadSf = function(params) {
    return {
        evid: 174,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
};
/**
 * @typedef {Object} giftCardCheckoutRemoveCodeParams
 * @property {string} appName - null
 * @property {GUID} cartId - cart_id
 * @property {GUID} checkoutId - null
 * @property {string} giftCardId - null
 * @property {boolean} isMember - true if visitor is member
 * @property {boolean} isMerchant - null
 * @property {GUID} bi_token - null
 * @property {GUID} siteMemberId - null
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - null
 **/
/**
 * Name: gift card checkout -> remove Code. Evid: 536.
 * Event description: when visitor clicks "remove" after applying Gift Card Codein Payment stage of Checkout.

 * appName - Type: string.
 *
 * cartId - Type: guid. Desc: cart_id
 *
 * checkoutId - Type: guid.
 *
 * giftCardId - Type: string.
 *
 * isMember - Type: bool. Desc: true if visitor is member
 *
 * isMerchant - Type: bool.
 *
 * bi_token - Type: guid.
 *
 * siteMemberId - Type: guid.
 *
 * storeId - Type: guid. Desc: store_id
 *
 * visitor_id - Type: guid.
 * @param {giftCardCheckoutRemoveCodeParams} params The parameters for this event.
 * @return {Object} LogObject
**/
export var giftCardCheckoutRemoveCode = function(params) {
    return {
        evid: 536,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
};
/**
 * @typedef {Object} addCustomFilterSfeParams
 * @property {string} appName - null
 * @property {string} component_id - grid gallery, slider gallery, product page
 * @property {boolean} isMerchant - isMerchant status
 * @property {GUID} bi_token - null
 * @property {GUID} storeId - null
 * @property {GUID} userGuid - userGuid
 **/
/**
 * Name: Add custom filter SFE. Evid: 839.
 * Event description: add custom filter- right now it is for collections filter only.

 * appName - Type: string.
 *
 * component_id - Type: string. Desc: grid gallery, slider gallery, product page
 *
 * isMerchant - Type: bool. Desc: isMerchant status
 *
 * bi_token - Type: guid.
 *
 * storeId - Type: guid.
 *
 * userGuid - Type: guid. Desc: userGuid
 * @param {addCustomFilterSfeParams} params The parameters for this event.
 * @return {Object} LogObject
**/
export var addCustomFilterSfe = function(params) {
    return {
        evid: 839,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
};
/**
 * @typedef {Object} selectPaymentCategorySfCashierParams
 * @property {GUID} app_instance_id - store_Id
 * @property {string} appName - null
 * @property {GUID} cartId - cartId
 * @property {GUID} checkoutId - checkout_id
 * @property {boolean} isMerchant - isMerchant status
 * @property {GUID} bi_token - null
 * @property {string} paymentCategory - CreditCard/Ewallet
 * @property {string} paymentMethod - authorize-net/Stripe
 * @property {GUID} storeId - null
 * @property {GUID} visitor_id - visitor_id
 **/
/**
 * Name: Select payment category SF cashier. Evid: 200.
 * Event description: Select payment category SF cashier - select radio button.

 * app_instance_id - Type: guid. Desc: store_Id
 *
 * appName - Type: string.
 *
 * cartId - Type: guid. Desc: cartId
 *
 * checkoutId - Type: guid. Desc: checkout_id
 *
 * isMerchant - Type: bool. Desc: isMerchant status
 *
 * bi_token - Type: guid.
 *
 * paymentCategory - Type: string. Desc: CreditCard/Ewallet
 *
 * paymentMethod - Type: string. Desc: authorize-net/Stripe
 *
 * storeId - Type: guid.
 *
 * visitor_id - Type: guid. Desc: visitor_id
 * @param {selectPaymentCategorySfCashierParams} params The parameters for this event.
 * @return {Object} LogObject
**/
export var selectPaymentCategorySfCashier = function(params) {
    return {
        evid: 200,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
};
/**
 * @typedef {Object} duplicateCollectionClickedSmParams
 * @property {string} appName - null
 * @property {string} categoryId - category id (collection by legacy)
 * @property {boolean} isMerchant - null
 * @property {GUID} bi_token - null
 * @property {string} origin - Categories list/Categories page
 * @property {GUID} storeId - null
 **/
/**
 * Name: Duplicate collection clicked SM. Evid: 804.
 * Event description: Duplicate collection clicked SM.

 * appName - Type: string.
 *
 * categoryId - Type: string. Desc: category id (collection by legacy)
 *
 * isMerchant - Type: bool.
 *
 * bi_token - Type: guid.
 *
 * origin - Type: string. Desc: Categories list/Categories page
 *
 * storeId - Type: guid.
 * @param {duplicateCollectionClickedSmParams} params The parameters for this event.
 * @return {Object} LogObject
**/
export var duplicateCollectionClickedSm = function(params) {
    return {
        evid: 804,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
};
/**
 * @typedef {Object} migrationClickOnMigrationPopUpParams
 * @property {string} appName - appname
 * @property {GUID} button_type - blank
 * @property {string} button_name - learn_more / close / switch_now / got_it
 * @property {boolean} isMerchant - isMerchant status
 * @property {string} magentoStoreId - magento store id (As a string)
 * @property {GUID} bi_token - null
 * @property {GUID} storeId - store_id
 **/
/**
 * Name: migration - click on migration pop-up. Evid: 302.
 * Event description: click on migration pop up that shown for the owners of eligible to migration stores every time they enter the old WYSIWYG editor..

 * appName - Type: string. Desc: appname
 *
 * button_type - Type: guid. Desc: blank
 *
 * button_name - Type: string. Desc: learn_more / close / switch_now / got_it
 *
 * isMerchant - Type: bool. Desc: isMerchant status
 *
 * magentoStoreId - Type: string. Desc: magento store id (As a string)
 *
 * bi_token - Type: guid.
 *
 * storeId - Type: guid. Desc: store_id
 * @param {migrationClickOnMigrationPopUpParams} params The parameters for this event.
 * @return {Object} LogObject
**/
export var migrationClickOnMigrationPopUp = function(params) {
    return {
        evid: 302,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
};
/**
 * @typedef {Object} showMerchantUpgradePopupSfParams
 * @property {string} appName - null
 * @property {boolean} isMerchant - isMerchant status
 * @property {string} mode - null
 * @property {GUID} bi_token - null
 * @property {string} origin - where the modal pops up (cart / product page...)
 * @property {GUID} storeId - null
 * @property {GUID} visitor_id - null
 **/
/**
 * Name: Show merchant upgrade popup SF. Evid: 165.


 * appName - Type: string.
 *
 * isMerchant - Type: bool. Desc: isMerchant status
 *
 * mode - Type: string.
 *
 * bi_token - Type: guid.
 *
 * origin - Type: string. Desc: where the modal pops up (cart / product page...)
 *
 * storeId - Type: guid.
 *
 * visitor_id - Type: guid.
 * @param {showMerchantUpgradePopupSfParams} params The parameters for this event.
 * @return {Object} LogObject
**/
export var showMerchantUpgradePopupSf = function(params) {
    return {
        evid: 165,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
};
/**
 * @typedef {Object} linkChangedInSettingsSfeParams
 * @property {string} appName - app name
 * @property {string} component_id - thank you page / cart page / my orders
 * @property {string} element - continue shopping / empty state / back to store
 * @property {string} value - deprecated
 * @property {boolean} isMerchant - isMerchant status
 * @property {string} link - new link changed
 * @property {GUID} bi_token - msid
 * @property {GUID} storeId - store_id
 **/
/**
 * Name: Link changed in settings SFE. Evid: 197.
 * Event description: when the link changed in the settings of the cart or the thank you page / my orders.

 * appName - Type: string. Desc: app name
 *
 * component_id - Type: string. Desc: thank you page / cart page / my orders
 *
 * element - Type: string. Desc: continue shopping / empty state / back to store
 *
 * value - Type: string. Desc: deprecated
 *
 * isMerchant - Type: bool. Desc: isMerchant status
 *
 * link - Type: string. Desc: new link changed
 *
 * bi_token - Type: guid. Desc: msid
 *
 * storeId - Type: guid. Desc: store_id
 * @param {linkChangedInSettingsSfeParams} params The parameters for this event.
 * @return {Object} LogObject
**/
export var linkChangedInSettingsSfe = function(params) {
    return {
        evid: 197,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
};
/**
 * @typedef {Object} paymentDetailsCompletedSfParams
 * @property {string} appName - appname
 * @property {GUID} cartId - cartid
 * @property {string} cartType - Digital/ Physical/ mixed (Digital &Physical)
 * @property {GUID} checkoutId - checkout_id
 * @property {number} optionscount - number of payment options
 * @property {number} selectedoptionindex - index of selected option
 * @property {boolean} isMerchant - isMerchant status
 * @property {boolean} isOwner - true is it is owner
 * @property {GUID} bi_token - null
 * @property {string} origin - OA StoreFront
 * @property {string} paymentProvider - payment provider that was chosen
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_id
 **/
/**
 * Name: Payment details completed SF. Evid: 177.
 * Event description: UoU clicked continue on payment details step in new checkout funnel. since june 2019 also sent from OA StoreFront (with origin).

 * appName - Type: string. Desc: appname
 *
 * cartId - Type: guid. Desc: cartid
 *
 * cartType - Type: string. Desc: Digital/ Physical/ mixed (Digital &Physical)
 *
 * checkoutId - Type: guid. Desc: checkout_id
 *
 * optionscount - Type: numeric. Desc: number of payment options
 *
 * selectedoptionindex - Type: numeric. Desc: index of selected option
 *
 * isMerchant - Type: bool. Desc: isMerchant status
 *
 * isOwner - Type: bool. Desc: true is it is owner
 *
 * bi_token - Type: guid.
 *
 * origin - Type: string. Desc: OA StoreFront
 *
 * paymentProvider - Type: string. Desc: payment provider that was chosen
 *
 * storeId - Type: guid. Desc: store_id
 *
 * visitor_id - Type: guid. Desc: visitor_id
 * @param {paymentDetailsCompletedSfParams} params The parameters for this event.
 * @return {Object} LogObject
**/
export var paymentDetailsCompletedSf = function(params) {
    return {
        evid: 177,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
};
/**
 * @typedef {Object} oaSfCustomizeProductGalleryParams
 * @property {string} appName - null
 * @property {string} categoryId - id of collection
 * @property {boolean} collectionChanged - only for type = edit
 * @property {string} collectionName - allProducts / spedific
 * @property {boolean} filterChanged - only for type = edit
 * @property {string} filtersList - list of filters to show
 * @property {boolean} isMerchant - null
 * @property {string} layoutSettings - crop / fit
 * @property {GUID} bi_token - null
 * @property {string} section - stores_products_grid_section / stores_products_carousel_section
 * @property {boolean} showFilter - true/false
 * @property {GUID} storeId - store_id
 * @property {string} tab - tab
 * @property {string} type - add /edit
 **/
/**
 * Name: OA SF - add / edit Shop section. Evid: 595.
 * Event description: when merchant clicks "Add" /"Save" in Add/Edit Product Gallery screen in Add/Edit Shop flow in Customize Member View.

 * appName - Type: string.
 *
 * categoryId - Type: string. Desc: id of collection
 *
 * collectionChanged - Type: bool. Desc: only for type = edit
 *
 * collectionName - Type: string. Desc: allProducts / spedific
 *
 * filterChanged - Type: bool. Desc: only for type = edit
 *
 * filtersList - Type: string. Desc: list of filters to show
 *
 * isMerchant - Type: bool.
 *
 * layoutSettings - Type: string. Desc: crop / fit
 *
 * bi_token - Type: guid.
 *
 * section - Type: string. Desc: stores_products_grid_section / stores_products_carousel_section
 *
 * showFilter - Type: bool. Desc: true/false
 *
 * storeId - Type: guid. Desc: store_id
 *
 * tab - Type: string. Desc: tab
 *
 * type - Type: string. Desc: add /edit
 * @param {oaSfCustomizeProductGalleryParams} params The parameters for this event.
 * @return {Object} LogObject
**/
export var oaSfCustomizeProductGallery = function(params) {
    return {
        evid: 595,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
};
/**
 * @typedef {Object} logoutModalInCheckoutLoadedSfParams
 * @property {string} appName - app_name
 * @property {GUID} cartId - cart_id
 * @property {string} cartType - Digital/ Physical/ mixed (Digital &Physical)
 * @property {GUID} checkoutId - checkout_id
 * @property {string} flowType - 'quick flow' / 'full flow'
 * @property {boolean} is_member - true if the visitor signed in as a member, false otherwise
 * @property {boolean} isMerchant - null
 * @property {GUID} bi_token - null
 * @property {GUID} owner_id - uuid of site owner
 * @property {boolean} savedAddress - true if the member has saved address
 * @property {GUID} siteMemberId - member id
 * @property {GUID} storeId - store_id
 **/
/**
 * Name: logout modal in checkout loaded  SF. Evid: 602.
 * Event description: logout modal loaded in checkout after member presses logout.

 * appName - Type: string. Desc: app_name
 *
 * cartId - Type: guid. Desc: cart_id
 *
 * cartType - Type: string. Desc: Digital/ Physical/ mixed (Digital &Physical)
 *
 * checkoutId - Type: guid. Desc: checkout_id
 *
 * flowType - Type: string. Desc: 'quick flow' / 'full flow'
 *
 * is_member - Type: bool. Desc: true if the visitor signed in as a member, false otherwise
 *
 * isMerchant - Type: bool.
 *
 * bi_token - Type: guid.
 *
 * owner_id - Type: guid. Desc: uuid of site owner
 *
 * savedAddress - Type: bool. Desc: true if the member has saved address
 *
 * siteMemberId - Type: guid. Desc: member id
 *
 * storeId - Type: guid. Desc: store_id
 * @param {logoutModalInCheckoutLoadedSfParams} params The parameters for this event.
 * @return {Object} LogObject
**/
export var logoutModalInCheckoutLoadedSf = function(params) {
    return {
        evid: 602,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
};
/**
 * @typedef {Object} zoomModalIsClosedSfParams
 * @property {string} appName - app_name
 * @property {boolean} hasOptions - does the product has options
 * @property {boolean} isMerchant - null
 * @property {GUID} bi_token - null
 * @property {GUID} owner_id - uuid of site owner
 * @property {string} productId - product_guid
 * @property {string} productType - Digital/ Physical
 * @property {GUID} storeId - store_id
 **/
/**
 * Name: Zoom modal is closed SF. Evid: 492.
 * Event description: When the zoom modal in product page is closed by clicking on the X or swiping up / down.

 * appName - Type: string. Desc: app_name
 *
 * hasOptions - Type: bool. Desc: does the product has options
 *
 * isMerchant - Type: bool.
 *
 * bi_token - Type: guid.
 *
 * owner_id - Type: guid. Desc: uuid of site owner
 *
 * productId - Type: string. Desc: product_guid
 *
 * productType - Type: string. Desc: Digital/ Physical
 *
 * storeId - Type: guid. Desc: store_id
 * @param {zoomModalIsClosedSfParams} params The parameters for this event.
 * @return {Object} LogObject
**/
export var zoomModalIsClosedSf = function(params) {
    return {
        evid: 492,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
};
/**
 * @typedef {Object} clickOnAdditionalPicturesParams
 * @property {string} appName - null
 * @property {boolean} isBlocks - Is the product page is using Blocks.
 * @property {boolean} isMerchant - null
 * @property {GUID} bi_token - null
 * @property {GUID} storeId - null
 **/
/**
 * Name: Click on Additional Pictures. Evid: 855.
 * Event description: When UoU is choosing to see more pictures of the product at product page..

 * appName - Type: string.
 *
 * isBlocks - Type: bool. Desc: Is the product page is using Blocks.
 *
 * isMerchant - Type: bool.
 *
 * bi_token - Type: guid.
 *
 * storeId - Type: guid.
 * @param {clickOnAdditionalPicturesParams} params The parameters for this event.
 * @return {Object} LogObject
**/
export var clickOnAdditionalPictures = function(params) {
    return {
        evid: 855,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
};
/**
 * @typedef {Object} clickOnLeftBarTabsOnComponentSettingsSfeParams
 * @property {string} appName - app_name
 * @property {string} component_id - grid gallery, slider galeery, product page, CurrencyConverter
 * @property {boolean} isMerchant - isMerchant status
 * @property {boolean} isPremiumEligible - Does the site have a premium package that allows using the feature (if not relevant null)
 * @property {GUID} bi_token - null
 * @property {string} origin - editor / onboarding
 * @property {GUID} storeId - store_id
 * @property {string} tab - design / text / Manage
 **/
/**
 * Name: click on left bar tabs on component settings  SFE. Evid: 33.
 * Event description: click to view tab in the settings component (left bar).

 * appName - Type: string. Desc: app_name
 *
 * component_id - Type: string. Desc: grid gallery, slider galeery, product page, CurrencyConverter
 *
 * isMerchant - Type: bool. Desc: isMerchant status
 *
 * isPremiumEligible - Type: bool. Desc: Does the site have a premium package that allows using the feature (if not relevant null)
 *
 * bi_token - Type: guid.
 *
 * origin - Type: string. Desc: editor / onboarding
 *
 * storeId - Type: guid. Desc: store_id
 *
 * tab - Type: string. Desc: design / text / Manage
 * @param {clickOnLeftBarTabsOnComponentSettingsSfeParams} params The parameters for this event.
 * @return {Object} LogObject
**/
export var clickOnLeftBarTabsOnComponentSettingsSfe = function(params) {
    return {
        evid: 33,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
};
/**
 * @typedef {Object} clickOnProductOptionSfParams
 * @property {string} action - checked / unchecked
 * @property {string} appName - app_name
 * @property {boolean} hasNotifyMe - did the merchant activated back in stock notification for the buyer
 * @property {boolean} hasStockIndicator - True if the user enabled stock indicator in product page false if not
 * @property {boolean} inStock - is the product option in/ out of stock
 * @property {boolean} isBlocks - Is the product page is using Blocks.
 * @property {boolean} isMerchant - null
 * @property {GUID} bi_token - null
 * @property {string} optiontype - list / color
 * @property {string} origin - product-page / gallery-page / slider-gallery / quick-view
 * @property {string} productId - product_guid
 * @property {string} productType - Digital/ Physical
 * @property {number} remainingItemCount - The inventory quantity that is shown to the user
 * @property {GUID} storeId - store_id
 * @property {string} viewMode - editor / site / preview
 **/
/**
 * Name: click on product option SF. Evid: 486.
 * Event description: buyer clicks to choose a product option (color / list) on product page, gallery or quickView.

 * action - Type: string. Desc: checked / unchecked
 *
 * appName - Type: string. Desc: app_name
 *
 * hasNotifyMe - Type: bool. Desc: did the merchant activated back in stock notification for the buyer
 *
 * hasStockIndicator - Type: bool. Desc: True if the user enabled stock indicator in product page false if not
 *
 * inStock - Type: bool. Desc: is the product option in/ out of stock
 *
 * isBlocks - Type: bool. Desc: Is the product page is using Blocks.
 *
 * isMerchant - Type: bool.
 *
 * bi_token - Type: guid.
 *
 * optiontype - Type: string. Desc: list / color
 *
 * origin - Type: string. Desc: product-page / gallery-page / slider-gallery / quick-view
 *
 * productId - Type: string. Desc: product_guid
 *
 * productType - Type: string. Desc: Digital/ Physical
 *
 * remainingItemCount - Type: numeric. Desc: The inventory quantity that is shown to the user
 *
 * storeId - Type: guid. Desc: store_id
 *
 * viewMode - Type: string. Desc: editor / site / preview
 * @param {clickOnProductOptionSfParams} params The parameters for this event.
 * @return {Object} LogObject
**/
export var clickOnProductOptionSf = function(params) {
    return {
        evid: 486,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
};
/**
 * @typedef {Object} productRemovedFromWishlistSfParams
 * @property {string} appName - app_name
 * @property {boolean} hasOptions - does the product have options
 * @property {boolean} hasRibbon - does the product have ribbon
 * @property {boolean} isMerchant - null
 * @property {boolean} isOwner - true for owner false for member. since june 2019
 * @property {GUID} bi_token - null
 * @property {string} origin - product-page / gallery-page / quick-view / product-widget
 * @property {GUID} owner_id - id of site's owner. since june 2019
 * @property {string} productId - product_guid
 * @property {string} productType - Digital/ Physical
 * @property {GUID} storeId - store_id
 * @property {string} viewMode - editor / site / preview
 **/
/**
 * Name: Product removed from wishlist SF. Evid: 268.
 * Event description: when a product was successfully removed from wishlist after the buyer clicks on button.

 * appName - Type: string. Desc: app_name
 *
 * hasOptions - Type: bool. Desc: does the product have options
 *
 * hasRibbon - Type: bool. Desc: does the product have ribbon
 *
 * isMerchant - Type: bool.
 *
 * isOwner - Type: bool. Desc: true for owner false for member. since june 2019
 *
 * bi_token - Type: guid.
 *
 * origin - Type: string. Desc: product-page / gallery-page / quick-view / product-widget
 *
 * owner_id - Type: guid. Desc: id of site's owner. since june 2019
 *
 * productId - Type: string. Desc: product_guid
 *
 * productType - Type: string. Desc: Digital/ Physical
 *
 * storeId - Type: guid. Desc: store_id
 *
 * viewMode - Type: string. Desc: editor / site / preview
 * @param {productRemovedFromWishlistSfParams} params The parameters for this event.
 * @return {Object} LogObject
**/
export var productRemovedFromWishlistSf = function(params) {
    return {
        evid: 268,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
};
/**
 * @typedef {Object} removeACouponSfParams
 * @property {number} additionalFeesPrice - INT, multiplied by 100 000 - sum of all additional fees price in cart
 * @property {string} appName - null
 * @property {GUID} cartId - null
 * @property {GUID} checkoutId - checkout_id
 * @property {string} couponCode - null
 * @property {string} couponId - null
 * @property {boolean} isMember - is_member
 * @property {boolean} isMerchant - isMerchant status
 * @property {boolean} isOwner - is_owner
 * @property {GUID} bi_token - null
 * @property {number} numberOfAdditionalFees - number of all additional fees in the cart
 * @property {string} origin - OA StoreFront
 * @property {GUID} owner_id - owner_id
 * @property {GUID} storeId - null
 * @property {GUID} uuid - uuid
 * @property {GUID} visitor_id - null
 **/
/**
 * Name: Remove a coupon SF. Evid: 118.


 * additionalFeesPrice - Type: numeric. Desc: INT, multiplied by 100 000 - sum of all additional fees price in cart
 *
 * appName - Type: string.
 *
 * cartId - Type: guid.
 *
 * checkoutId - Type: guid. Desc: checkout_id
 *
 * couponCode - Type: string.
 *
 * couponId - Type: string.
 *
 * isMember - Type: bool. Desc: is_member
 *
 * isMerchant - Type: bool. Desc: isMerchant status
 *
 * isOwner - Type: bool. Desc: is_owner
 *
 * bi_token - Type: guid.
 *
 * numberOfAdditionalFees - Type: numeric. Desc: number of all additional fees in the cart
 *
 * origin - Type: string. Desc: OA StoreFront
 *
 * owner_id - Type: guid. Desc: owner_id
 *
 * storeId - Type: guid.
 *
 * uuid - Type: guid. Desc: uuid
 *
 * visitor_id - Type: guid.
 * @param {removeACouponSfParams} params The parameters for this event.
 * @return {Object} LogObject
**/
export var removeACouponSf = function(params) {
    return {
        evid: 118,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
};
/**
 * @typedef {Object} viewStoresPanelInEditorParams
 * @property {string} actions - json with all the quick actions the user sees
 * @property {string} app_id - stores app_id
 * @property {string} appName - WixStores
 * @property {GUID} esi - esi
 * @property {boolean} isMerchant - null
 * @property {GUID} bi_token - null
 * @property {GUID} site_id - site_id
 * @property {string} state - what does the user sees when the panel is open
 * @property {GUID} storeId - null
 * @property {string} type - automatic open / click on button
 * @property {string} viewMode - DESKTOP etc.
 **/
/**
 * Name: View Stores Panel in Editor. Evid: 810.
 * Event description: When the Stores panel is open in the Editor.

 * actions - Type: string. Desc: json with all the quick actions the user sees
 *
 * app_id - Type: string. Desc: stores app_id
 *
 * appName - Type: string. Desc: WixStores
 *
 * esi - Type: guid. Desc: esi
 *
 * isMerchant - Type: bool.
 *
 * bi_token - Type: guid.
 *
 * site_id - Type: guid. Desc: site_id
 *
 * state - Type: string. Desc: what does the user sees when the panel is open
 *
 * storeId - Type: guid.
 *
 * type - Type: string. Desc: automatic open / click on button
 *
 * viewMode - Type: string. Desc: DESKTOP etc.
 * @param {viewStoresPanelInEditorParams} params The parameters for this event.
 * @return {Object} LogObject
**/
export var viewStoresPanelInEditor = function(params) {
    return {
        evid: 810,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
};
/**
 * @typedef {Object} clickOnShippingDestinationInCartPageSfParams
 * @property {string} appName - appName
 * @property {GUID} cartId - cartId
 * @property {string} cartType - Digital/ Physical/ mixed (Digital &Physical)
 * @property {GUID} checkoutId - checkout_id
 * @property {boolean} isMerchant - is_merchant
 * @property {GUID} bi_token - msid
 * @property {string} shippingDestinationCountry - shipping destination country
 * @property {string} shippingDestinationState - shipping destination state
 * @property {GUID} storeId - store_id
 **/
/**
 * Name: Click on shipping destination in cart page SF. Evid: 223.
 * Event description: When a visitor clicks to change the shipping destination on the cart page.

 * appName - Type: string. Desc: appName
 *
 * cartId - Type: guid. Desc: cartId
 *
 * cartType - Type: string. Desc: Digital/ Physical/ mixed (Digital &Physical)
 *
 * checkoutId - Type: guid. Desc: checkout_id
 *
 * isMerchant - Type: bool. Desc: is_merchant
 *
 * bi_token - Type: guid. Desc: msid
 *
 * shippingDestinationCountry - Type: string. Desc: shipping destination country
 *
 * shippingDestinationState - Type: string. Desc: shipping destination state
 *
 * storeId - Type: guid. Desc: store_id
 * @param {clickOnShippingDestinationInCartPageSfParams} params The parameters for this event.
 * @return {Object} LogObject
**/
export var clickOnShippingDestinationInCartPageSf = function(params) {
    return {
        evid: 223,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
};
/**
 * @typedef {Object} viewZoomModalSfParams
 * @property {string} appName - app_name
 * @property {boolean} hasOptions - does the product has options
 * @property {boolean} isMerchant - null
 * @property {GUID} bi_token - null
 * @property {GUID} owner_id - uuid of site owner
 * @property {string} productId - product_guid
 * @property {string} productType - Digital/ Physical
 * @property {GUID} storeId - store_id
 **/
/**
 * Name: View zoom modal SF. Evid: 491.
 * Event description: When the zoom modal in product page loads.

 * appName - Type: string. Desc: app_name
 *
 * hasOptions - Type: bool. Desc: does the product has options
 *
 * isMerchant - Type: bool.
 *
 * bi_token - Type: guid.
 *
 * owner_id - Type: guid. Desc: uuid of site owner
 *
 * productId - Type: string. Desc: product_guid
 *
 * productType - Type: string. Desc: Digital/ Physical
 *
 * storeId - Type: guid. Desc: store_id
 * @param {viewZoomModalSfParams} params The parameters for this event.
 * @return {Object} LogObject
**/
export var viewZoomModalSf = function(params) {
    return {
        evid: 491,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
};
/**
 * @typedef {Object} changeImageRatioInGallerySfeParams
 * @property {string} appName - null
 * @property {string} component_id - grid gallery, slider galeery, product page
 * @property {string} imageRatio - selected image ratio (2X2. 2X3...)
 * @property {boolean} isMerchant - isMerchant status
 * @property {GUID} bi_token - null
 * @property {GUID} storeId - null
 * @property {GUID} userGuid - userGuid
 **/
/**
 * Name: change image ratio in gallery SFE. Evid: 815.
 * Event description: change image ratio in gallery.

 * appName - Type: string.
 *
 * component_id - Type: string. Desc: grid gallery, slider galeery, product page
 *
 * imageRatio - Type: string. Desc: selected image ratio (2X2. 2X3...)
 *
 * isMerchant - Type: bool. Desc: isMerchant status
 *
 * bi_token - Type: guid.
 *
 * storeId - Type: guid.
 *
 * userGuid - Type: guid. Desc: userGuid
 * @param {changeImageRatioInGallerySfeParams} params The parameters for this event.
 * @return {Object} LogObject
**/
export var changeImageRatioInGallerySfe = function(params) {
    return {
        evid: 815,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
};
/**
 * @typedef {Object} highRpuFeatureAdAssetShownParams
 * @property {string} appName - app_name
 * @property {string} component_id - CurrencyConverter, AvalaraTax, Subscription
 * @property {boolean} isMerchant - isMerchant status
 * @property {GUID} bi_token - msid
 * @property {string} origin - editor / onboarding / StoresBO / Live site
 * @property {string} paymentStatus - the merchant payment connection status. no payment / both / only payment
 * @property {GUID} storeId - store_id
 * @property {string} type - banner / tooltip / UoU popup
 **/
/**
 * Name: High RPU -> Feature Ad asset shown. Evid: 236.
 * Event description: when Ad asset (e.g. banner, tooltip) to Upgrade to High ARPU to get feature is shown.

 * appName - Type: string. Desc: app_name
 *
 * component_id - Type: string. Desc: CurrencyConverter, AvalaraTax, Subscription
 *
 * isMerchant - Type: bool. Desc: isMerchant status
 *
 * bi_token - Type: guid. Desc: msid
 *
 * origin - Type: string. Desc: editor / onboarding / StoresBO / Live site
 *
 * paymentStatus - Type: string. Desc: the merchant payment connection status. no payment / both / only payment
 *
 * storeId - Type: guid. Desc: store_id
 *
 * type - Type: string. Desc: banner / tooltip / UoU popup
 * @param {highRpuFeatureAdAssetShownParams} params The parameters for this event.
 * @return {Object} LogObject
**/
export var highRpuFeatureAdAssetShown = function(params) {
    return {
        evid: 236,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
};
/**
 * @typedef {Object} clickLoadMoreInGallerySfParams
 * @property {string} appName - app_name
 * @property {GUID} categoryId - category_id
 * @property {boolean} isMerchant - isMerchant status
 * @property {GUID} bi_token - msid
 * @property {GUID} storeId - store_id
 * @property {string} type - button / pagination
 * @property {GUID} visitor_id - visitor_id
 **/
/**
 * Name: Click to load more in gallery SF. Evid: 14.
 * Event description: when a buyer clicks to view more products in the gallery (load more/next page/ etc.).

 * appName - Type: string. Desc: app_name
 *
 * categoryId - Type: guid. Desc: category_id
 *
 * isMerchant - Type: bool. Desc: isMerchant status
 *
 * bi_token - Type: guid. Desc: msid
 *
 * storeId - Type: guid. Desc: store_id
 *
 * type - Type: string. Desc: button / pagination
 *
 * visitor_id - Type: guid. Desc: visitor_id
 * @param {clickLoadMoreInGallerySfParams} params The parameters for this event.
 * @return {Object} LogObject
**/
export var clickLoadMoreInGallerySf = function(params) {
    return {
        evid: 14,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
};
/**
 * @typedef {Object} viewOrderDetailsPageSfParams
 * @property {string} appName - appName
 * @property {string} cartType - Digital/ Physical/ mixed (Digital &Physical)
 * @property {string} contact_id - contact_id
 * @property {number} itemsCount - number of items in the order
 * @property {boolean} isMerchant - isMerchant status
 * @property {GUID} bi_token - null
 * @property {string} orderId - orderId
 * @property {string} origin - order_page
 * @property {GUID} site_member_id - member id
 * @property {GUID} storeId - instance id
 * @property {GUID} visitorId - visitorId
 **/
/**
 * Name: view order_details page SF. Evid: 128.
 * Event description: view order details in order history page.

 * appName - Type: string. Desc: appName
 *
 * cartType - Type: string. Desc: Digital/ Physical/ mixed (Digital &Physical)
 *
 * contact_id - Type: string. Desc: contact_id
 *
 * itemsCount - Type: numeric. Desc: number of items in the order
 *
 * isMerchant - Type: bool. Desc: isMerchant status
 *
 * bi_token - Type: guid.
 *
 * orderId - Type: string. Desc: orderId
 *
 * origin - Type: string. Desc: order_page
 *
 * site_member_id - Type: guid. Desc: member id
 *
 * storeId - Type: guid. Desc: instance id
 *
 * visitorId - Type: guid. Desc: visitorId
 * @param {viewOrderDetailsPageSfParams} params The parameters for this event.
 * @return {Object} LogObject
**/
export var viewOrderDetailsPageSf = function(params) {
    return {
        evid: 128,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
};
/**
 * @typedef {Object} clickOnViewItemsInReviewOrderScreenOaStoreFrontParams
 * @property {string} appName - null
 * @property {GUID} cartId - cartId
 * @property {string} cartType - Digital/ Physical/ mixed (Digital &Physical)
 * @property {number} itemsCount - number of items in the cart
 * @property {boolean} isMerchant - null
 * @property {boolean} isOwner - is_owner
 * @property {GUID} bi_token - msid
 * @property {GUID} storeId - store_id
 **/
/**
 * Name: Click on "View items" in Review order screen OA StoreFront. Evid: 186.
 * Event description: buyer in OneApp StoreFront (member view) in checkout on review order (place order in other words) stage clicks on View items(leads to open "Your items" screen - entry point to edit cart).

 * appName - Type: string.
 *
 * cartId - Type: guid. Desc: cartId
 *
 * cartType - Type: string. Desc: Digital/ Physical/ mixed (Digital &Physical)
 *
 * itemsCount - Type: numeric. Desc: number of items in the cart
 *
 * isMerchant - Type: bool.
 *
 * isOwner - Type: bool. Desc: is_owner
 *
 * bi_token - Type: guid. Desc: msid
 *
 * storeId - Type: guid. Desc: store_id
 * @param {clickOnViewItemsInReviewOrderScreenOaStoreFrontParams} params The parameters for this event.
 * @return {Object} LogObject
**/
export var clickOnViewItemsInReviewOrderScreenOaStoreFront = function(params) {
    return {
        evid: 186,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
};
/**
 * @typedef {Object} shippingAddressSetSfParams
 * @property {string} appName - null
 * @property {GUID} cartId - null
 * @property {string} cartType - Digital/ Physical/ mixed (Digital &Physical)
 * @property {GUID} checkoutId - checkout_id
 * @property {boolean} isChecked - is billing address the same as delivery address
 * @property {boolean} isFormValid - is form valid (all mandatory fields are compatible)
 * @property {boolean} isMerchant - isMerchant status
 * @property {boolean} isOwner - true for merchant
 * @property {GUID} bi_token - null
 * @property {string} origin - OA StoreFront
 * @property {GUID} owner_id - uuid of merchant
 * @property {GUID} storeId - null
 * @property {GUID} uuid - uuid
 * @property {GUID} visitor_id - null
 **/
/**
 * Name: Shipping address set SF. Evid: 161.
 * Event description: Shipping address set SF. since june 2019 is also sentt from OneApp (origin =OA StoreFront).

 * appName - Type: string.
 *
 * cartId - Type: guid.
 *
 * cartType - Type: string. Desc: Digital/ Physical/ mixed (Digital &Physical)
 *
 * checkoutId - Type: guid. Desc: checkout_id
 *
 * isChecked - Type: bool. Desc: is billing address the same as delivery address
 *
 * isFormValid - Type: bool. Desc: is form valid (all mandatory fields are compatible)
 *
 * isMerchant - Type: bool. Desc: isMerchant status
 *
 * isOwner - Type: bool. Desc: true for merchant
 *
 * bi_token - Type: guid.
 *
 * origin - Type: string. Desc: OA StoreFront
 *
 * owner_id - Type: guid. Desc: uuid of merchant
 *
 * storeId - Type: guid.
 *
 * uuid - Type: guid. Desc: uuid
 *
 * visitor_id - Type: guid.
 * @param {shippingAddressSetSfParams} params The parameters for this event.
 * @return {Object} LogObject
**/
export var shippingAddressSetSf = function(params) {
    return {
        evid: 161,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
};
/**
 * @typedef {Object} clickOnCartIconToOpenMiniCartSfParams
 * @property {string} appName - app
 * @property {GUID} cartId - cartId
 * @property {string} cartType - Digital/ Physical/ mixed (Digital &Physical)
 * @property {number} itemsCount - number of items in the cart
 * @property {boolean} isMerchant - isMerchant status
 * @property {boolean} isNavigateCart - hard coded false (for Anodot)
 * @property {GUID} bi_token - msid
 * @property {GUID} storeId - store_id
 * @property {string} viewMode - editor / site / preview
 * @property {GUID} visitorId - visitorId
 **/
/**
 * Name: Click on cart icon to open mini cart SF. Evid: 49.
 * Event description: click on cart icon to open the mini cart.

 * appName - Type: string. Desc: app
 *
 * cartId - Type: guid. Desc: cartId
 *
 * cartType - Type: string. Desc: Digital/ Physical/ mixed (Digital &Physical)
 *
 * itemsCount - Type: numeric. Desc: number of items in the cart
 *
 * isMerchant - Type: bool. Desc: isMerchant status
 *
 * isNavigateCart - Type: bool. Desc: hard coded false (for Anodot)
 *
 * bi_token - Type: guid. Desc: msid
 *
 * storeId - Type: guid. Desc: store_id
 *
 * viewMode - Type: string. Desc: editor / site / preview
 *
 * visitorId - Type: guid. Desc: visitorId
 * @param {clickOnCartIconToOpenMiniCartSfParams} params The parameters for this event.
 * @return {Object} LogObject
**/
export var clickOnCartIconToOpenMiniCartSf = function(params) {
    return {
        evid: 49,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
};
/**
 * @typedef {Object} thankYouPageContinueShoppingClickedSfParams
 * @property {string} appName - null
 * @property {GUID} cartId - cartId
 * @property {boolean} isMerchant - isMerchant status
 * @property {GUID} bi_token - null
 * @property {string} orderId - orderId
 * @property {GUID} storeId - null
 * @property {GUID} visitorId - visitorId
 **/
/**
 * Name: Thank you page Continue Shopping clicked SF. Evid: 176.
 * Event description: buyer clicked on download file  in Thank you page.

 * appName - Type: string.
 *
 * cartId - Type: guid. Desc: cartId
 *
 * isMerchant - Type: bool. Desc: isMerchant status
 *
 * bi_token - Type: guid.
 *
 * orderId - Type: string. Desc: orderId
 *
 * storeId - Type: guid.
 *
 * visitorId - Type: guid. Desc: visitorId
 * @param {thankYouPageContinueShoppingClickedSfParams} params The parameters for this event.
 * @return {Object} LogObject
**/
export var thankYouPageContinueShoppingClickedSf = function(params) {
    return {
        evid: 176,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
};
/**
 * @typedef {Object} errorInAddProductToCartOneAppStoreFrontParams
 * @property {string} appName - null
 * @property {string} field - list of invalid fields (comma delimited) from quantity / product_options / custom_field
 * @property {boolean} isMerchant - null
 * @property {boolean} isOwner - is_owner
 * @property {string} message - validation error
 * @property {GUID} bi_token - msid
 * @property {GUID} owner_id - owner_id
 * @property {string} productId - product_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} uuid - uuid
 **/
/**
 * Name: Error in add product to cart OneApp StoreFront. Evid: 183.
 * Event description: when buyer clicked "Add to Cart" in product page but it doesn't work because buyer didn't selected product option / custom field / product with this product options is out of stock (if the quantity of selected).

 * appName - Type: string.
 *
 * field - Type: string. Desc: list of invalid fields (comma delimited) from quantity / product_options / custom_field
 *
 * isMerchant - Type: bool.
 *
 * isOwner - Type: bool. Desc: is_owner
 *
 * message - Type: string. Desc: validation error
 *
 * bi_token - Type: guid. Desc: msid
 *
 * owner_id - Type: guid. Desc: owner_id
 *
 * productId - Type: string. Desc: product_guid
 *
 * storeId - Type: guid. Desc: store_id
 *
 * uuid - Type: guid. Desc: uuid
 * @param {errorInAddProductToCartOneAppStoreFrontParams} params The parameters for this event.
 * @return {Object} LogObject
**/
export var errorInAddProductToCartOneAppStoreFront = function(params) {
    return {
        evid: 183,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
};
/**
 * @typedef {Object} cartWidgetLoadedSfParams
 * @property {string} appName - fucj
 * @property {boolean} isMerchant - isMerchant status
 * @property {GUID} bi_token - null
 * @property {GUID} storeId - null
 * @property {GUID} visitor_id - null
 **/
/**
 * Name: Mini Cart loaded SF. Evid: 211.
 * Event description: Sent for Ecom (with catalog_app_id) here (instead of src 130) until the rewrite of mini-cart)..

 * appName - Type: string. Desc: fucj
 *
 * isMerchant - Type: bool. Desc: isMerchant status
 *
 * bi_token - Type: guid.
 *
 * storeId - Type: guid.
 *
 * visitor_id - Type: guid.
 * @param {cartWidgetLoadedSfParams} params The parameters for this event.
 * @return {Object} LogObject
**/
export var cartWidgetLoadedSf = function(params) {
    return {
        evid: 211,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
};
/**
 * @typedef {Object} clickOnProductQuickViewVeloParams
 * @property {string} appName - null
 * @property {GUID} impressionId - unique guid for the gallery loading session
 * @property {boolean} isMerchant - null
 * @property {string} model - model of the recommended products
 * @property {GUID} bi_token - null
 * @property {string} productId - product_guid
 * @property {string} productList - array of the prdocutIds in the gallery (sorted by ranking)
 * @property {number} rank - The ranking of the product in the gallery
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_id
 **/
/**
 * Name: Click on product quick view Velo. Evid: 641.
 * Event description: sent from product gallery made by Velo..

 * appName - Type: string.
 *
 * impressionId - Type: guid. Desc: unique guid for the gallery loading session
 *
 * isMerchant - Type: bool.
 *
 * model - Type: string. Desc: model of the recommended products
 *
 * bi_token - Type: guid.
 *
 * productId - Type: string. Desc: product_guid
 *
 * productList - Type: string. Desc: array of the prdocutIds in the gallery (sorted by ranking)
 *
 * rank - Type: numeric. Desc: The ranking of the product in the gallery
 *
 * storeId - Type: guid. Desc: store_id
 *
 * visitor_id - Type: guid. Desc: visitor_id
 * @param {clickOnProductQuickViewVeloParams} params The parameters for this event.
 * @return {Object} LogObject
**/
export var clickOnProductQuickViewVelo = function(params) {
    return {
        evid: 641,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
};
/**
 * @typedef {Object} clickOnImageOfProductOaParams
 * @property {string} appName - null
 * @property {boolean} isMerchant - null
 * @property {GUID} bi_token - msid
 * @property {string} productId - product_id of main product
 * @property {GUID} storeId - store_id
 * @property {GUID} uuid - uuid
 **/
/**
 * Name: Click on image of product OA SF. Evid: 232.
 * Event description: member clicked on image in product screen OA SF (opens gallery).

 * appName - Type: string.
 *
 * isMerchant - Type: bool.
 *
 * bi_token - Type: guid. Desc: msid
 *
 * productId - Type: string. Desc: product_id of main product
 *
 * storeId - Type: guid. Desc: store_id
 *
 * uuid - Type: guid. Desc: uuid
 * @param {clickOnImageOfProductOaParams} params The parameters for this event.
 * @return {Object} LogObject
**/
export var clickOnImageOfProductOa = function(params) {
    return {
        evid: 232,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
};
/**
 * @typedef {Object} cancelClickedInSelectYourShippingDestinationPopupSfParams
 * @property {string} appName - appName
 * @property {GUID} cartId - cartId
 * @property {string} cartType - Digital/ Physical/ mixed (Digital &Physical)
 * @property {GUID} checkoutId - checkout_id
 * @property {boolean} isMerchant - is_merchant
 * @property {GUID} bi_token - null
 * @property {GUID} storeId - storeId
 * @property {GUID} visitorId - visitorId
 **/
/**
 * Name: cancel clicked in select your shipping destination popup SF. Evid: 126.
 * Event description: in the cart page, when a user want to change is shipping address, to re calculate shipping cost estimation- cancel or x clicked.

 * appName - Type: string. Desc: appName
 *
 * cartId - Type: guid. Desc: cartId
 *
 * cartType - Type: string. Desc: Digital/ Physical/ mixed (Digital &Physical)
 *
 * checkoutId - Type: guid. Desc: checkout_id
 *
 * isMerchant - Type: bool. Desc: is_merchant
 *
 * bi_token - Type: guid.
 *
 * storeId - Type: guid. Desc: storeId
 *
 * visitorId - Type: guid. Desc: visitorId
 * @param {cancelClickedInSelectYourShippingDestinationPopupSfParams} params The parameters for this event.
 * @return {Object} LogObject
**/
export var cancelClickedInSelectYourShippingDestinationPopupSf = function(params) {
    return {
        evid: 126,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
};
/**
 * @typedef {Object} showHideFiltersSortingSfeParams
 * @property {string} action - checked / unchecked
 * @property {string} appName - null
 * @property {string} component_id - grid gallery, slider gallery, product page
 * @property {boolean} isMerchant - isMerchant status
 * @property {GUID} bi_token - null
 * @property {GUID} storeId - null
 * @property {string} type - sorting options / filters
 * @property {GUID} userGuid - userGuid
 **/
/**
 * Name: show/hide filters/sorting SFE. Evid: 835.
 * Event description: check/uncheck show all filters or sorting options in the 'sorting & filters' tab.

 * action - Type: string. Desc: checked / unchecked
 *
 * appName - Type: string.
 *
 * component_id - Type: string. Desc: grid gallery, slider gallery, product page
 *
 * isMerchant - Type: bool. Desc: isMerchant status
 *
 * bi_token - Type: guid.
 *
 * storeId - Type: guid.
 *
 * type - Type: string. Desc: sorting options / filters
 *
 * userGuid - Type: guid. Desc: userGuid
 * @param {showHideFiltersSortingSfeParams} params The parameters for this event.
 * @return {Object} LogObject
**/
export var showHideFiltersSortingSfe = function(params) {
    return {
        evid: 835,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
};
/**
 * @typedef {Object} clickOnEditProductsInProductWidgetSfeParams
 * @property {string} appName - null
 * @property {string} component_id - grid gallery, slider galery, product page, product widget
 * @property {boolean} isMerchant - isMerchant status
 * @property {GUID} bi_token - null
 * @property {string} origin - editor / onboarding
 * @property {GUID} storeId - null
 * @property {GUID} userGuid - userGuid
 **/
/**
 * Name: click on edit products in product widget SFE. Evid: 827.
 * Event description: merchant clicks on edit products in product widget settings.

 * appName - Type: string.
 *
 * component_id - Type: string. Desc: grid gallery, slider galery, product page, product widget
 *
 * isMerchant - Type: bool. Desc: isMerchant status
 *
 * bi_token - Type: guid.
 *
 * origin - Type: string. Desc: editor / onboarding
 *
 * storeId - Type: guid.
 *
 * userGuid - Type: guid. Desc: userGuid
 * @param {clickOnEditProductsInProductWidgetSfeParams} params The parameters for this event.
 * @return {Object} LogObject
**/
export var clickOnEditProductsInProductWidgetSfe = function(params) {
    return {
        evid: 827,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
};
/**
 * @typedef {Object} clickOnProductBoxSfParams
 * @property {string} appName - null
 * @property {string} galleryInputId - productId/ collectionId. the input ID of the gallery - when it shows collection -> collection id, when it shows related products - product id (when on product page) null when (other pages), when it shows all products -> null
 * @property {string} galleryProductsLogic - the logic of the gallery the user clicked on (all-products, collection, related-products)
 * @property {string} galleryType - The gallery that the user clocked on (slider-gallery, grid-gallery,shop-page)
 * @property {boolean} hasOptions - null
 * @property {boolean} hasRibbon - null
 * @property {GUID} impressionId - unique guid for the gallery loading session
 * @property {number} index - null
 * @property {boolean} isMerchant - isMerchant status
 * @property {boolean} isOwner - true for owner and false for member
 * @property {GUID} bi_token - null
 * @property {string} origin - catalog_OA / cart_OA (from OneApp Stores front) / quick-view
 * @property {GUID} owner_id - uuid of site owner
 * @property {string} productId - null
 * @property {string} productType - Digital/ Physical
 * @property {number} rank - the rank of the product that was clicked
 * @property {GUID} storeId - null
 * @property {GUID} uuid - uuid
 * @property {GUID} visitor_id - null
 **/
/**
 * Name: Click to View Product SF. Evid: 11.
 * Event description: sent from web from product gallery. also since june 2019 started to be sent from OneApp Store Front (member view).

 * appName - Type: string.
 *
 * galleryInputId - Type: string. Desc: productId/ collectionId. the input ID of the gallery - when it shows collection -> collection id, when it shows related products - product id (when on product page) null when (other pages), when it shows all products -> null
 *
 * galleryProductsLogic - Type: string. Desc: the logic of the gallery the user clicked on (all-products, collection, related-products)
 *
 * galleryType - Type: string. Desc: The gallery that the user clocked on (slider-gallery, grid-gallery,shop-page)
 *
 * hasOptions - Type: bool.
 *
 * hasRibbon - Type: bool.
 *
 * impressionId - Type: guid. Desc: unique guid for the gallery loading session
 *
 * index - Type: numeric.
 *
 * isMerchant - Type: bool. Desc: isMerchant status
 *
 * isOwner - Type: bool. Desc: true for owner and false for member
 *
 * bi_token - Type: guid.
 *
 * origin - Type: string. Desc: catalog_OA / cart_OA (from OneApp Stores front) / quick-view
 *
 * owner_id - Type: guid. Desc: uuid of site owner
 *
 * productId - Type: string.
 *
 * productType - Type: string. Desc: Digital/ Physical
 *
 * rank - Type: numeric. Desc: the rank of the product that was clicked
 *
 * storeId - Type: guid.
 *
 * uuid - Type: guid. Desc: uuid
 *
 * visitor_id - Type: guid.
 * @param {clickOnProductBoxSfParams} params The parameters for this event.
 * @return {Object} LogObject
**/
export var clickOnProductBoxSf = function(params) {
    return {
        evid: 11,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
};
/**
* @typedef {Object} proPlanUpgradeModalLoadedParams
* @property {string} appName - null
* @property {string} component_id - From which component the modal was opened (
CurrencyConverter, AvalaraTax, subscriptions)
* @property {boolean} isMerchant - isMerchant status
* @property {GUID} bi_token - null
* @property {string} origin - editor / onboarding / StoresBO
* @property {GUID} storeId - store_id
* @property {string} type - button / tooltip / banner
**/
/**
 * Name: High RPU -> Upgrade modal loaded. Evid: 846.
 * Event description: when the pro plan upgrade modal is loaded in the editor/ADI OR when in Stores BO Upgrade modal loaded for High RPU.

 * appName - Type: string.
 *
 * component_id - Type: string. Desc: From which component the modal was opened (
CurrencyConverter, AvalaraTax, subscriptions)
 *
 * isMerchant - Type: bool. Desc: isMerchant status
 *
 * bi_token - Type: guid.
 *
 * origin - Type: string. Desc: editor / onboarding / StoresBO
 *
 * storeId - Type: guid. Desc: store_id
 *
 * type - Type: string. Desc: button / tooltip / banner
 * @param {proPlanUpgradeModalLoadedParams} params The parameters for this event.
 * @return {Object} LogObject
**/
export var proPlanUpgradeModalLoaded = function(params) {
    return {
        evid: 846,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
};
/**
 * @typedef {Object} clickOnQuickActionStoresPanelInEditorParams
 * @property {string} app_id - stores app_id
 * @property {string} appName - WixStores
 * @property {string} buttonName - name of the button (find products,add payment...)
 * @property {GUID} esi - esi
 * @property {boolean} isMerchant - null
 * @property {GUID} bi_token - null
 * @property {string} origin - the state of the panel when the user clicked on the button
 * @property {GUID} site_id - site_id
 * @property {GUID} storeId - store_id
 * @property {string} viewMode - DESKTOP etc.
 **/
/**
 * Name: Click on QuickAction Stores Panel in Editor. Evid: 850.
 * Event description: When the user clicks on one of the quick actions in the Stores 6th button in the editor.

 * app_id - Type: string. Desc: stores app_id
 *
 * appName - Type: string. Desc: WixStores
 *
 * buttonName - Type: string. Desc: name of the button (find products,add payment...)
 *
 * esi - Type: guid. Desc: esi
 *
 * isMerchant - Type: bool.
 *
 * bi_token - Type: guid.
 *
 * origin - Type: string. Desc: the state of the panel when the user clicked on the button
 *
 * site_id - Type: guid. Desc: site_id
 *
 * storeId - Type: guid. Desc: store_id
 *
 * viewMode - Type: string. Desc: DESKTOP etc.
 * @param {clickOnQuickActionStoresPanelInEditorParams} params The parameters for this event.
 * @return {Object} LogObject
**/
export var clickOnQuickActionStoresPanelInEditor = function(params) {
    return {
        evid: 850,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
};
/**
 * @typedef {Object} clickOnProductDetailsSfParams
 * @property {string} appName - null
 * @property {number} index - null
 * @property {boolean} isBlocks - Is the product page is using Blocks.
 * @property {boolean} isMerchant - isMerchant status
 * @property {GUID} bi_token - null
 * @property {string} productId - null
 * @property {GUID} storeId - null
 * @property {string} type - product details type (tab, expand...)
 * @property {GUID} visitor_id - null
 **/
/**
 * Name: Click on product details SF. Evid: 61.
 * Event description: When clicking a product info title in the product page.

 * appName - Type: string.
 *
 * index - Type: numeric.
 *
 * isBlocks - Type: bool. Desc: Is the product page is using Blocks.
 *
 * isMerchant - Type: bool. Desc: isMerchant status
 *
 * bi_token - Type: guid.
 *
 * productId - Type: string.
 *
 * storeId - Type: guid.
 *
 * type - Type: string. Desc: product details type (tab, expand...)
 *
 * visitor_id - Type: guid.
 * @param {clickOnProductDetailsSfParams} params The parameters for this event.
 * @return {Object} LogObject
**/
export var clickOnProductDetailsSf = function(params) {
    return {
        evid: 61,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
};
/**
 * @typedef {Object} clickLogoutInCheckoutSfParams
 * @property {string} appName - app_name
 * @property {GUID} cartId - cart_id
 * @property {string} cartType - Digital/ Physical/ mixed (Digital &Physical)
 * @property {GUID} checkoutId - null
 * @property {string} flowType - 'quick flow' / 'full flow'
 * @property {boolean} is_member - true if the visitor signed in as a member, false otherwise
 * @property {boolean} isMerchant - null
 * @property {GUID} bi_token - null
 * @property {GUID} owner_id - uuid of site owner
 * @property {boolean} savedAddress - true if the member has saved address
 * @property {GUID} siteMemberId - member id
 * @property {GUID} storeId - store_id
 **/
/**
 * Name: click logout in checkout SF. Evid: 601.
 * Event description: when  site member clicks to logout in checkout, opening logout modal.

 * appName - Type: string. Desc: app_name
 *
 * cartId - Type: guid. Desc: cart_id
 *
 * cartType - Type: string. Desc: Digital/ Physical/ mixed (Digital &Physical)
 *
 * checkoutId - Type: guid.
 *
 * flowType - Type: string. Desc: 'quick flow' / 'full flow'
 *
 * is_member - Type: bool. Desc: true if the visitor signed in as a member, false otherwise
 *
 * isMerchant - Type: bool.
 *
 * bi_token - Type: guid.
 *
 * owner_id - Type: guid. Desc: uuid of site owner
 *
 * savedAddress - Type: bool. Desc: true if the member has saved address
 *
 * siteMemberId - Type: guid. Desc: member id
 *
 * storeId - Type: guid. Desc: store_id
 * @param {clickLogoutInCheckoutSfParams} params The parameters for this event.
 * @return {Object} LogObject
**/
export var clickLogoutInCheckoutSf = function(params) {
    return {
        evid: 601,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
};
/**
 * @typedef {Object} oneAppStoreFrontClearCartSfParams
 * @property {string} appName - null
 * @property {GUID} cartId - cart_id
 * @property {number} itemsCount - # of products in cart
 * @property {boolean} isMerchant - isMerchant status
 * @property {boolean} isOwner - true  - for merchant false for member
 * @property {GUID} bi_token - msid
 * @property {GUID} owner_id - uuid of site owner
 * @property {GUID} storeId - store_id
 * @property {GUID} uuid - uuid
 **/
/**
 * Name: OneApp StoreFront -> Clear cart SF. Evid: 184.
 * Event description: buyer cleared cart (in cart page from 3dots menu) after it the cart becomes innactive (will get neww cart_id).

 * appName - Type: string.
 *
 * cartId - Type: guid. Desc: cart_id
 *
 * itemsCount - Type: numeric. Desc: # of products in cart
 *
 * isMerchant - Type: bool. Desc: isMerchant status
 *
 * isOwner - Type: bool. Desc: true  - for merchant false for member
 *
 * bi_token - Type: guid. Desc: msid
 *
 * owner_id - Type: guid. Desc: uuid of site owner
 *
 * storeId - Type: guid. Desc: store_id
 *
 * uuid - Type: guid. Desc: uuid
 * @param {oneAppStoreFrontClearCartSfParams} params The parameters for this event.
 * @return {Object} LogObject
**/
export var oneAppStoreFrontClearCartSf = function(params) {
    return {
        evid: 184,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
};
/**
 * @typedef {Object} productOptionsDeleteOptionFromCatalogParams
 * @property {string} appName - null
 * @property {boolean} isMerchant - null
 * @property {GUID} bi_token - null
 * @property {string} productId - product_id
 * @property {GUID} storeId - store_id
 **/
/**
 * Name: product options - delete option from catalog. Evid: 32.
 * Event description: when user click to delete an option from the catalog (in manage all product options menu).

 * appName - Type: string.
 *
 * isMerchant - Type: bool.
 *
 * bi_token - Type: guid.
 *
 * productId - Type: string. Desc: product_id
 *
 * storeId - Type: guid. Desc: store_id
 * @param {productOptionsDeleteOptionFromCatalogParams} params The parameters for this event.
 * @return {Object} LogObject
**/
export var productOptionsDeleteOptionFromCatalog = function(params) {
    return {
        evid: 32,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
};
/**
 * @typedef {Object} applyACouponSfParams
 * @property {string} appName - null
 * @property {GUID} cartId - null
 * @property {GUID} checkoutId - null
 * @property {string} couponCode - null
 * @property {string} couponId - null
 * @property {boolean} isMember - is_member
 * @property {boolean} isMerchant - isMerchant status
 * @property {boolean} isOwner - is_owner
 * @property {GUID} bi_token - null
 * @property {string} name - null
 * @property {string} origin - OA StoreFront
 * @property {GUID} owner_id - owner_id
 * @property {GUID} storeId - null
 * @property {number} total_long - amount of coupon INTEGER (multiplied by 1000000)
 * @property {number} total - null
 * @property {string} type - null
 * @property {GUID} uuid - uuid
 * @property {GUID} visitor_id - null
 **/
/**
 * Name: Coupon applied SF. Evid: 119.


 * appName - Type: string.
 *
 * cartId - Type: guid.
 *
 * checkoutId - Type: guid.
 *
 * couponCode - Type: string.
 *
 * couponId - Type: string.
 *
 * isMember - Type: bool. Desc: is_member
 *
 * isMerchant - Type: bool. Desc: isMerchant status
 *
 * isOwner - Type: bool. Desc: is_owner
 *
 * bi_token - Type: guid.
 *
 * name - Type: string.
 *
 * origin - Type: string. Desc: OA StoreFront
 *
 * owner_id - Type: guid. Desc: owner_id
 *
 * storeId - Type: guid.
 *
 * total_long - Type: numeric. Desc: amount of coupon INTEGER (multiplied by 1000000)
 *
 * total - Type: numeric.
 *
 * type - Type: string.
 *
 * uuid - Type: guid. Desc: uuid
 *
 * visitor_id - Type: guid.
 * @param {applyACouponSfParams} params The parameters for this event.
 * @return {Object} LogObject
**/
export var applyACouponSf = function(params) {
    return {
        evid: 119,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
};
/**
 * @typedef {Object} clickOnEditElementSettingsSfeParams
 * @property {string} appName - null
 * @property {string} component_id - grid gallery, slider galeery, product page
 * @property {string} element - product image, name&price&sku, product options&quantity, button, info sections, social media
 * @property {boolean} isMerchant - isMerchant status
 * @property {GUID} bi_token - null
 * @property {GUID} storeId - null
 * @property {GUID} userGuid - userGuid
 **/
/**
 * Name: click on edit element settings SFE. Evid: 830.
 * Event description: click on edit elements settings in product page settings.

 * appName - Type: string.
 *
 * component_id - Type: string. Desc: grid gallery, slider galeery, product page
 *
 * element - Type: string. Desc: product image, name&price&sku, product options&quantity, button, info sections, social media
 *
 * isMerchant - Type: bool. Desc: isMerchant status
 *
 * bi_token - Type: guid.
 *
 * storeId - Type: guid.
 *
 * userGuid - Type: guid. Desc: userGuid
 * @param {clickOnEditElementSettingsSfeParams} params The parameters for this event.
 * @return {Object} LogObject
**/
export var clickOnEditElementSettingsSfe = function(params) {
    return {
        evid: 830,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
};
/**
 * @typedef {Object} giftCardCheckoutCodeAppliedParams
 * @property {string} appName - null
 * @property {GUID} cartId - cart_id
 * @property {GUID} checkoutId - null
 * @property {string} giftCardId - gift_card_id
 * @property {boolean} isCartPaidOnlyWithGiftCard - True if payments options are hidden due to gift card fully cover the payment (with coupon or without)
 * @property {boolean} isMember - true if visitor is member
 * @property {boolean} isMerchant - null
 * @property {GUID} bi_token - null
 * @property {GUID} siteMemberId - member
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_id
 **/
/**
 * Name: gift card checkout -> code applied. Evid: 535.
 * Event description: when Gift Card Code was successfully applied in Payment stage of Checkout.

 * appName - Type: string.
 *
 * cartId - Type: guid. Desc: cart_id
 *
 * checkoutId - Type: guid.
 *
 * giftCardId - Type: string. Desc: gift_card_id
 *
 * isCartPaidOnlyWithGiftCard - Type: bool. Desc: True if payments options are hidden due to gift card fully cover the payment (with coupon or without)
 *
 * isMember - Type: bool. Desc: true if visitor is member
 *
 * isMerchant - Type: bool.
 *
 * bi_token - Type: guid.
 *
 * siteMemberId - Type: guid. Desc: member
 *
 * storeId - Type: guid. Desc: store_id
 *
 * visitor_id - Type: guid. Desc: visitor_id
 * @param {giftCardCheckoutCodeAppliedParams} params The parameters for this event.
 * @return {Object} LogObject
**/
export var giftCardCheckoutCodeApplied = function(params) {
    return {
        evid: 535,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
};
/**
 * @typedef {Object} clickToOpenZoomModalSfParams
 * @property {string} appName - app_name
 * @property {boolean} hasOptions - does the product has options
 * @property {boolean} isBlocks - Is the product page is using Blocks.
 * @property {boolean} isMerchant - null
 * @property {GUID} bi_token - null
 * @property {GUID} owner_id - uuid of site owner
 * @property {string} productId - product_guid
 * @property {string} productType - Digital/ Physical
 * @property {GUID} storeId - store_id
 **/
/**
 * Name: Click to open zoom modal SF. Evid: 490.
 * Event description: When a buyer clicks on product image in product page to open zoom modal.

 * appName - Type: string. Desc: app_name
 *
 * hasOptions - Type: bool. Desc: does the product has options
 *
 * isBlocks - Type: bool. Desc: Is the product page is using Blocks.
 *
 * isMerchant - Type: bool.
 *
 * bi_token - Type: guid.
 *
 * owner_id - Type: guid. Desc: uuid of site owner
 *
 * productId - Type: string. Desc: product_guid
 *
 * productType - Type: string. Desc: Digital/ Physical
 *
 * storeId - Type: guid. Desc: store_id
 * @param {clickToOpenZoomModalSfParams} params The parameters for this event.
 * @return {Object} LogObject
**/
export var clickToOpenZoomModalSf = function(params) {
    return {
        evid: 490,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
};
/**
 * @typedef {Object} showHideCategoriesClickedInModalParams
 * @property {string} appName - null
 * @property {string} categoryId - category id (collection by legacy)
 * @property {boolean} isMerchant - null
 * @property {GUID} bi_token - null
 * @property {string} origin - Categories list/Categories page
 * @property {GUID} storeId - null
 **/
/**
 * Name: Show/Hide categories clicked in modal. Evid: 806.
 * Event description: Show/Hide categories clicked in modal.

 * appName - Type: string.
 *
 * categoryId - Type: string. Desc: category id (collection by legacy)
 *
 * isMerchant - Type: bool.
 *
 * bi_token - Type: guid.
 *
 * origin - Type: string. Desc: Categories list/Categories page
 *
 * storeId - Type: guid.
 * @param {showHideCategoriesClickedInModalParams} params The parameters for this event.
 * @return {Object} LogObject
**/
export var showHideCategoriesClickedInModal = function(params) {
    return {
        evid: 806,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
};
/**
 * @typedef {Object} categoryPageHeroSectionReadMoreClickedParams
 * @property {string} appName - null
 * @property {boolean} isMerchant - isMerchant status
 * @property {GUID} bi_token - null
 * @property {GUID} storeId - null
 **/
/**
 * Name: Category page hero section  ‘read more’ clicked. Evid: 823.
 * Event description: Category page hero section  ‘read more’ clicked.

 * appName - Type: string.
 *
 * isMerchant - Type: bool. Desc: isMerchant status
 *
 * bi_token - Type: guid.
 *
 * storeId - Type: guid.
 * @param {categoryPageHeroSectionReadMoreClickedParams} params The parameters for this event.
 * @return {Object} LogObject
**/
export var categoryPageHeroSectionReadMoreClicked = function(params) {
    return {
        evid: 823,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
};
/**
 * @typedef {Object} clickOnBackToPaypalSfParams
 * @property {string} appName - appName
 * @property {string} cartId - cartId
 * @property {string} cartType - Digital/ Physical/ mixed (Digital &Physical)
 * @property {GUID} checkoutId - checkout_id
 * @property {boolean} isMerchant - isMerchant status
 * @property {GUID} bi_token - null
 * @property {string} orig_shipping_method - the shipping method that the visitor choose in the cart - free shipping/ Flat rate/ rate by weight/ rate by order price/store pickup (the same strings as in 163 event)
 * @property {GUID} storeId - storeId
 * @property {GUID} visitor_id - visitor_id
 **/
/**
 * Name: Click on Back to Paypal SF. Evid: 160.
 * Event description: buyer clicks on 'back to PayPal' in shipping screen in checkout.

 * appName - Type: string. Desc: appName
 *
 * cartId - Type: string. Desc: cartId
 *
 * cartType - Type: string. Desc: Digital/ Physical/ mixed (Digital &Physical)
 *
 * checkoutId - Type: guid. Desc: checkout_id
 *
 * isMerchant - Type: bool. Desc: isMerchant status
 *
 * bi_token - Type: guid.
 *
 * orig_shipping_method - Type: string. Desc: the shipping method that the visitor choose in the cart - free shipping/ Flat rate/ rate by weight/ rate by order price/store pickup (the same strings as in 163 event)
 *
 * storeId - Type: guid. Desc: storeId
 *
 * visitor_id - Type: guid. Desc: visitor_id
 * @param {clickOnBackToPaypalSfParams} params The parameters for this event.
 * @return {Object} LogObject
**/
export var clickOnBackToPaypalSf = function(params) {
    return {
        evid: 160,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
};
/**
 * @typedef {Object} clickOnEditCartSfParams
 * @property {string} appName - null
 * @property {GUID} cartId - cartId
 * @property {string} cartType - Digital/ Physical/ mixed (Digital &Physical)
 * @property {GUID} checkoutId - checkout_id
 * @property {boolean} isMerchant - isMerchant status
 * @property {GUID} bi_token - null
 * @property {string} origin - page in checkout (delivery, payment...)
 * @property {GUID} storeId - null
 * @property {GUID} visitor_id - visitor_id
 **/
/**
 * Name: click on edit cart SF. Evid: 171.
 * Event description: click on edit cart button in checkout process.

 * appName - Type: string.
 *
 * cartId - Type: guid. Desc: cartId
 *
 * cartType - Type: string. Desc: Digital/ Physical/ mixed (Digital &Physical)
 *
 * checkoutId - Type: guid. Desc: checkout_id
 *
 * isMerchant - Type: bool. Desc: isMerchant status
 *
 * bi_token - Type: guid.
 *
 * origin - Type: string. Desc: page in checkout (delivery, payment...)
 *
 * storeId - Type: guid.
 *
 * visitor_id - Type: guid. Desc: visitor_id
 * @param {clickOnEditCartSfParams} params The parameters for this event.
 * @return {Object} LogObject
**/
export var clickOnEditCartSf = function(params) {
    return {
        evid: 171,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
};
/**
 * @typedef {Object} changeGalleryCollectionSfeParams
 * @property {string} appName - null
 * @property {string} component_id - grid gallery, slider galeery, product page
 * @property {boolean} isMerchant - isMerchant status
 * @property {GUID} bi_token - null
 * @property {string} origin - editor / onboarding
 * @property {GUID} storeId - null
 * @property {GUID} userGuid - userGuid
 **/
/**
 * Name: change gallery collection SFE. Evid: 813.
 * Event description: change gallery collection for display.

 * appName - Type: string.
 *
 * component_id - Type: string. Desc: grid gallery, slider galeery, product page
 *
 * isMerchant - Type: bool. Desc: isMerchant status
 *
 * bi_token - Type: guid.
 *
 * origin - Type: string. Desc: editor / onboarding
 *
 * storeId - Type: guid.
 *
 * userGuid - Type: guid. Desc: userGuid
 * @param {changeGalleryCollectionSfeParams} params The parameters for this event.
 * @return {Object} LogObject
**/
export var changeGalleryCollectionSfe = function(params) {
    return {
        evid: 813,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
};
/**
 * @typedef {Object} viewStorePageSfParams
 * @property {string} appName - null
 * @property {boolean} isMerchant - isMerchant status
 * @property {GUID} bi_token - null
 * @property {string} pageId - page name - thank you page / product page...
 * @property {GUID} storeId - null
 * @property {GUID} visitorId - visitorId
 **/
/**
 * Name: view store page SF. Evid: 17.
 * Event description: view store page in viewer.

 * appName - Type: string.
 *
 * isMerchant - Type: bool. Desc: isMerchant status
 *
 * bi_token - Type: guid.
 *
 * pageId - Type: string. Desc: page name - thank you page / product page...
 *
 * storeId - Type: guid.
 *
 * visitorId - Type: guid. Desc: visitorId
 * @param {viewStorePageSfParams} params The parameters for this event.
 * @return {Object} LogObject
**/
export var viewStorePageSf = function(params) {
    return {
        evid: 17,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
};
/**
 * @typedef {Object} changeCartIconSfeParams
 * @property {string} appName - null
 * @property {boolean} isMerchant - isMerchant status
 * @property {GUID} bi_token - null
 * @property {GUID} storeId - null
 * @property {string} type - icon type
 * @property {GUID} userGuid - userGuid
 **/
/**
 * Name: change cart icon SFE. Evid: 820.
 * Event description: select a cart icon in mini cart settings.

 * appName - Type: string.
 *
 * isMerchant - Type: bool. Desc: isMerchant status
 *
 * bi_token - Type: guid.
 *
 * storeId - Type: guid.
 *
 * type - Type: string. Desc: icon type
 *
 * userGuid - Type: guid. Desc: userGuid
 * @param {changeCartIconSfeParams} params The parameters for this event.
 * @return {Object} LogObject
**/
export var changeCartIconSfe = function(params) {
    return {
        evid: 820,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
};
/**
 * @typedef {Object} clickOnChangeLinkInSettingsSfeParams
 * @property {string} appName - app name
 * @property {string} component_id - thank you page / cart page / my orders
 * @property {string} element - continue shopping / empty state / back to store
 * @property {boolean} isMerchant - isMerchant status
 * @property {string} link - current navigation link
 * @property {GUID} bi_token - msid
 * @property {GUID} storeId - store_id
 **/
/**
 * Name: Click on change link in settings SFE. Evid: 196.
 * Event description: when the user click on the change link in the settings of the cart or the thank you page / my orders.

 * appName - Type: string. Desc: app name
 *
 * component_id - Type: string. Desc: thank you page / cart page / my orders
 *
 * element - Type: string. Desc: continue shopping / empty state / back to store
 *
 * isMerchant - Type: bool. Desc: isMerchant status
 *
 * link - Type: string. Desc: current navigation link
 *
 * bi_token - Type: guid. Desc: msid
 *
 * storeId - Type: guid. Desc: store_id
 * @param {clickOnChangeLinkInSettingsSfeParams} params The parameters for this event.
 * @return {Object} LogObject
**/
export var clickOnChangeLinkInSettingsSfe = function(params) {
    return {
        evid: 196,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
};
/**
 * @typedef {Object} clickOnAddNoteToSellerSfParams
 * @property {string} appName - null
 * @property {GUID} cartId - cart id
 * @property {GUID} checkoutId - checkout_id
 * @property {boolean} isMerchant - isMerchant status
 * @property {boolean} isOwner - true for owner
 * @property {GUID} bi_token - null
 * @property {string} origin - OA StoreFront
 * @property {GUID} storeId - null
 * @property {GUID} visitor_id - visitor_id
 **/
/**
 * Name: Click on add note to seller SF. Evid: 121.
 * Event description: buyer clicks on 'add note to seller' in cart page. since june 2019 also sent from OA StoreFront (with origin).

 * appName - Type: string.
 *
 * cartId - Type: guid. Desc: cart id
 *
 * checkoutId - Type: guid. Desc: checkout_id
 *
 * isMerchant - Type: bool. Desc: isMerchant status
 *
 * isOwner - Type: bool. Desc: true for owner
 *
 * bi_token - Type: guid.
 *
 * origin - Type: string. Desc: OA StoreFront
 *
 * storeId - Type: guid.
 *
 * visitor_id - Type: guid. Desc: visitor_id
 * @param {clickOnAddNoteToSellerSfParams} params The parameters for this event.
 * @return {Object} LogObject
**/
export var clickOnAddNoteToSellerSf = function(params) {
    return {
        evid: 121,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
};
/**
 * @typedef {Object} notAcceptPaymentsVisitorPopupSfParams
 * @property {string} appName - app_name
 * @property {boolean} isMerchant - isMerchant status
 * @property {GUID} bi_token - null
 * @property {string} origin - where the modal pops up (cart / product page...)
 * @property {GUID} storeId - store_id
 * @property {string} viewMode - editor / live / preview
 * @property {GUID} visitor_id - visitor_id
 **/
/**
 * Name: Not able to accept payments visitor popup SF. Evid: 283.
 * Event description: Error pop-up opens when the buyer clicks on one of the checkout buttons, and If the store can't accept orders (not an Active Store / doesn't have any shipping rules)..

 * appName - Type: string. Desc: app_name
 *
 * isMerchant - Type: bool. Desc: isMerchant status
 *
 * bi_token - Type: guid.
 *
 * origin - Type: string. Desc: where the modal pops up (cart / product page...)
 *
 * storeId - Type: guid. Desc: store_id
 *
 * viewMode - Type: string. Desc: editor / live / preview
 *
 * visitor_id - Type: guid. Desc: visitor_id
 * @param {notAcceptPaymentsVisitorPopupSfParams} params The parameters for this event.
 * @return {Object} LogObject
**/
export var notAcceptPaymentsVisitorPopupSf = function(params) {
    return {
        evid: 283,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
};
/**
 * @typedef {Object} logoutModalInCheckoutClosedSfParams
 * @property {string} appName - app_name
 * @property {GUID} cartId - cart_id
 * @property {string} cartType - Digital/ Physical/ mixed (Digital &Physical)
 * @property {GUID} checkoutId - checkout_id
 * @property {string} flowType - 'quick flow' / 'full flow'
 * @property {boolean} is_member - true if the visitor signed in as a member, false otherwise
 * @property {boolean} isMerchant - null
 * @property {GUID} bi_token - null
 * @property {GUID} owner_id - uuid of site owner
 * @property {boolean} savedAddress - true if the member has saved address
 * @property {GUID} siteMemberId - member id
 * @property {GUID} storeId - store_id
 **/
/**
 * Name: Click on return to checkout in logout modal SF. Evid: 603.
 * Event description: buyer clicks on "return to checkout" or X in logout modal in checkout to close it.

 * appName - Type: string. Desc: app_name
 *
 * cartId - Type: guid. Desc: cart_id
 *
 * cartType - Type: string. Desc: Digital/ Physical/ mixed (Digital &Physical)
 *
 * checkoutId - Type: guid. Desc: checkout_id
 *
 * flowType - Type: string. Desc: 'quick flow' / 'full flow'
 *
 * is_member - Type: bool. Desc: true if the visitor signed in as a member, false otherwise
 *
 * isMerchant - Type: bool.
 *
 * bi_token - Type: guid.
 *
 * owner_id - Type: guid. Desc: uuid of site owner
 *
 * savedAddress - Type: bool. Desc: true if the member has saved address
 *
 * siteMemberId - Type: guid. Desc: member id
 *
 * storeId - Type: guid. Desc: store_id
 * @param {logoutModalInCheckoutClosedSfParams} params The parameters for this event.
 * @return {Object} LogObject
**/
export var logoutModalInCheckoutClosedSf = function(params) {
    return {
        evid: 603,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
};
/**
 * @typedef {Object} clickAddToWishlistSfParams
 * @property {string} appName - app_name
 * @property {boolean} hasOptions - does the product have options
 * @property {boolean} isMerchant - isMerchant status
 * @property {boolean} isOwner - true for owner false for member. since june 2019
 * @property {GUID} bi_token - null
 * @property {string} origin - product-page / gallery-page / quick-view / product-widget
 * @property {GUID} owner_id - id of site's owner. since june 2019
 * @property {string} productId - product_guid
 * @property {string} productType - Digital/ Physical
 * @property {GUID} storeId - store_id
 * @property {string} viewMode - editor / site / preview
 **/
/**
 * Name: Click add to wishlist SF. Evid: 260.
 * Event description: buyer clicks on to add product to wishlist.

 * appName - Type: string. Desc: app_name
 *
 * hasOptions - Type: bool. Desc: does the product have options
 *
 * isMerchant - Type: bool. Desc: isMerchant status
 *
 * isOwner - Type: bool. Desc: true for owner false for member. since june 2019
 *
 * bi_token - Type: guid.
 *
 * origin - Type: string. Desc: product-page / gallery-page / quick-view / product-widget
 *
 * owner_id - Type: guid. Desc: id of site's owner. since june 2019
 *
 * productId - Type: string. Desc: product_guid
 *
 * productType - Type: string. Desc: Digital/ Physical
 *
 * storeId - Type: guid. Desc: store_id
 *
 * viewMode - Type: string. Desc: editor / site / preview
 * @param {clickAddToWishlistSfParams} params The parameters for this event.
 * @return {Object} LogObject
**/
export var clickAddToWishlistSf = function(params) {
    return {
        evid: 260,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
};
/**
 * @typedef {Object} minimumOrderModalIsShownInCheckoutParams
 * @property {string} appName - null
 * @property {GUID} cartId - null
 * @property {GUID} checkoutId - only in EP
 * @property {string} currency - the currency that was shown in the message
 * @property {number} diffLong - The diff between the relevant order value and the minimum order threshold  multiplied by 10000
 * @property {boolean} hasPickup - null
 * @property {boolean} isMerchant - null
 * @property {number} minimumValueLong - null
 * @property {GUID} bi_token - null
 * @property {string} stage - the stage in the checkout the visitor was at when the modal was opened
 * @property {GUID} storeId - .
 * @property {GUID} visitor_id - visitor_id
 **/
/**
 * Name: Minimum order modal is shown in checkout. Evid: 654.


 * appName - Type: string.
 *
 * cartId - Type: guid.
 *
 * checkoutId - Type: guid. Desc: only in EP
 *
 * currency - Type: string. Desc: the currency that was shown in the message
 *
 * diffLong - Type: numeric. Desc: The diff between the relevant order value and the minimum order threshold  multiplied by 10000
 *
 * hasPickup - Type: bool.
 *
 * isMerchant - Type: bool.
 *
 * minimumValueLong - Type: numeric.
 *
 * bi_token - Type: guid.
 *
 * stage - Type: string. Desc: the stage in the checkout the visitor was at when the modal was opened
 *
 * storeId - Type: guid. Desc: .
 *
 * visitor_id - Type: guid. Desc: visitor_id
 * @param {minimumOrderModalIsShownInCheckoutParams} params The parameters for this event.
 * @return {Object} LogObject
**/
export var minimumOrderModalIsShownInCheckout = function(params) {
    return {
        evid: 654,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
};
/**
 * @typedef {Object} clickOnSubscriptionOptionParams
 * @property {string} appName - null
 * @property {boolean} isBlocks - Is the product page is using Blocks.
 * @property {boolean} isMerchant - null
 * @property {GUID} bi_token - null
 * @property {GUID} storeId - null
 * @property {string} value - one-time/recurring
 **/
/**
 * Name: Click on Subscription Option. Evid: 853.
 * Event description: When UoU is clicking on one of the subscription options at product page.

 * appName - Type: string.
 *
 * isBlocks - Type: bool. Desc: Is the product page is using Blocks.
 *
 * isMerchant - Type: bool.
 *
 * bi_token - Type: guid.
 *
 * storeId - Type: guid.
 *
 * value - Type: string. Desc: one-time/recurring
 * @param {clickOnSubscriptionOptionParams} params The parameters for this event.
 * @return {Object} LogObject
**/
export var clickOnSubscriptionOption = function(params) {
    return {
        evid: 853,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
};
/**
 * @typedef {Object} wishlistInstallationStageParams
 * @property {string} appName - null
 * @property {boolean} isMerchant - null
 * @property {GUID} bi_token - null
 * @property {string} stage - which stage in the wishlist installation process
 * @property {GUID} storeId - null
 **/
/**
 * Name: wishlist installation stage. Evid: 844.
 * Event description: wishlist installation stage.

 * appName - Type: string.
 *
 * isMerchant - Type: bool.
 *
 * bi_token - Type: guid.
 *
 * stage - Type: string. Desc: which stage in the wishlist installation process
 *
 * storeId - Type: guid.
 * @param {wishlistInstallationStageParams} params The parameters for this event.
 * @return {Object} LogObject
**/
export var wishlistInstallationStage = function(params) {
    return {
        evid: 844,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
};
/**
 * @typedef {Object} membersAddressInCheckoutWasChangedParams
 * @property {string} appName - app_name
 * @property {GUID} cartId - cart_id
 * @property {string} cartType - Digital/ Physical/ mixed (Digital &Physical)
 * @property {GUID} checkoutId - checkout_id
 * @property {boolean} isMerchant - isMerchant status
 * @property {GUID} bi_token - msid
 * @property {string} origin - addresses list / add address / edit address
 * @property {GUID} siteMemberId - member id
 * @property {string} stage - page in checkout (delivery, payment...)
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_id
 **/
/**
 * Name: members -> address in checkout was changed. Evid: 48.
 * Event description: when address was changed in the checkout.

 * appName - Type: string. Desc: app_name
 *
 * cartId - Type: guid. Desc: cart_id
 *
 * cartType - Type: string. Desc: Digital/ Physical/ mixed (Digital &Physical)
 *
 * checkoutId - Type: guid. Desc: checkout_id
 *
 * isMerchant - Type: bool. Desc: isMerchant status
 *
 * bi_token - Type: guid. Desc: msid
 *
 * origin - Type: string. Desc: addresses list / add address / edit address
 *
 * siteMemberId - Type: guid. Desc: member id
 *
 * stage - Type: string. Desc: page in checkout (delivery, payment...)
 *
 * storeId - Type: guid. Desc: store_id
 *
 * visitor_id - Type: guid. Desc: visitor_id
 * @param {membersAddressInCheckoutWasChangedParams} params The parameters for this event.
 * @return {Object} LogObject
**/
export var membersAddressInCheckoutWasChanged = function(params) {
    return {
        evid: 48,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
};
/**
 * @typedef {Object} clickOnBackInCheckoutProcessSfParams
 * @property {string} appName - null
 * @property {GUID} cartId - cart id
 * @property {GUID} checkoutId - checkout_id
 * @property {boolean} isMerchant - isMerchant status
 * @property {boolean} isOwner - is_owner
 * @property {GUID} bi_token - null
 * @property {string} origin - OA StoreFront
 * @property {GUID} owner_id - owner_id
 * @property {string} previousStage - the closed stage - payment / shippingDetails / deliveryMethod / payment-method / pickupDetails / shipping-method / customerDetails
 * @property {string} stage - delivery options, payment
 * @property {GUID} storeId - null
 * @property {GUID} uuid - uuid
 * @property {GUID} visitor_id - visitor_id
 **/
/**
 * Name: click on 'back' in checkout process SF. Evid: 170.
 * Event description: click on 'back' or 'edit' in checkout process. since june 2019 also sent from OneApp.

 * appName - Type: string.
 *
 * cartId - Type: guid. Desc: cart id
 *
 * checkoutId - Type: guid. Desc: checkout_id
 *
 * isMerchant - Type: bool. Desc: isMerchant status
 *
 * isOwner - Type: bool. Desc: is_owner
 *
 * bi_token - Type: guid.
 *
 * origin - Type: string. Desc: OA StoreFront
 *
 * owner_id - Type: guid. Desc: owner_id
 *
 * previousStage - Type: string. Desc: the closed stage - payment / shippingDetails / deliveryMethod / payment-method / pickupDetails / shipping-method / customerDetails
 *
 * stage - Type: string. Desc: delivery options, payment
 *
 * storeId - Type: guid.
 *
 * uuid - Type: guid. Desc: uuid
 *
 * visitor_id - Type: guid. Desc: visitor_id
 * @param {clickOnBackInCheckoutProcessSfParams} params The parameters for this event.
 * @return {Object} LogObject
**/
export var clickOnBackInCheckoutProcessSf = function(params) {
    return {
        evid: 170,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
};
/**
 * @typedef {Object} viewShippingInfoModalSfParams
 * @property {string} appName - app_name
 * @property {boolean} isMerchant - null
 * @property {GUID} bi_token - null
 * @property {number} num_of_shipping - number of shipping choices presented to the visitor
 * @property {string} origin - from which component
 * @property {string} productId - product_guid
 * @property {string} shippingRuleOptions - all the shipping types presented in the modal
 * @property {GUID} storeId - store_id
 **/
/**
 * Name: View Shipping Info modal SF. Evid: 596.
 * Event description: When the shipping modal loads, after the buyer clicks on shipping info link in one of the the SF components (not in cart)..

 * appName - Type: string. Desc: app_name
 *
 * isMerchant - Type: bool.
 *
 * bi_token - Type: guid.
 *
 * num_of_shipping - Type: numeric. Desc: number of shipping choices presented to the visitor
 *
 * origin - Type: string. Desc: from which component
 *
 * productId - Type: string. Desc: product_guid
 *
 * shippingRuleOptions - Type: string. Desc: all the shipping types presented in the modal
 *
 * storeId - Type: guid. Desc: store_id
 * @param {viewShippingInfoModalSfParams} params The parameters for this event.
 * @return {Object} LogObject
**/
export var viewShippingInfoModalSf = function(params) {
    return {
        evid: 596,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
};
/**
 * @typedef {Object} clickPlaceOrderWithSubscriptionParams
 * @property {string} appName - null
 * @property {GUID} cartId - cartId
 * @property {GUID} checkoutId - checkout_id
 * @property {boolean} default_state - true if was turned on by default by merchant settings
 * @property {boolean} isMerchant - null
 * @property {boolean} isOwner - is_owner
 * @property {GUID} bi_token - null
 * @property {string} origin - OA StoreFront
 * @property {GUID} storeId - storeId
 **/
/**
 * Name: Click Place order with Subscription. Evid: 58.
 * Event description: if "Subscription" checkbox was checked on clicking on place order (client event). since june 2019 also sent from OA StoreFront (with origin).

 * appName - Type: string.
 *
 * cartId - Type: guid. Desc: cartId
 *
 * checkoutId - Type: guid. Desc: checkout_id
 *
 * default_state - Type: bool. Desc: true if was turned on by default by merchant settings
 *
 * isMerchant - Type: bool.
 *
 * isOwner - Type: bool. Desc: is_owner
 *
 * bi_token - Type: guid.
 *
 * origin - Type: string. Desc: OA StoreFront
 *
 * storeId - Type: guid. Desc: storeId
 * @param {clickPlaceOrderWithSubscriptionParams} params The parameters for this event.
 * @return {Object} LogObject
**/
export var clickPlaceOrderWithSubscription = function(params) {
    return {
        evid: 58,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
};
/**
 * @typedef {Object} openAppSettingsSfeParams
 * @property {string} appName - app name
 * @property {string} component_id - grid gallery, slider galeery, product page, CurrencyConverter
 * @property {string} editorMode - mobile / desktop
 * @property {boolean} isMerchant - isMerchant status
 * @property {boolean} isPremiumEligible - Does the site have a premium package that allows using the feature (if not relevant null)
 * @property {GUID} bi_token - null
 * @property {string} origin - editor / onboarding
 * @property {GUID} storeId - store_id
 **/
/**
 * Name: open app settings SFE. Evid: 811.
 * Event description: double click / right click on a wixstores component.

 * appName - Type: string. Desc: app name
 *
 * component_id - Type: string. Desc: grid gallery, slider galeery, product page, CurrencyConverter
 *
 * editorMode - Type: string. Desc: mobile / desktop
 *
 * isMerchant - Type: bool. Desc: isMerchant status
 *
 * isPremiumEligible - Type: bool. Desc: Does the site have a premium package that allows using the feature (if not relevant null)
 *
 * bi_token - Type: guid.
 *
 * origin - Type: string. Desc: editor / onboarding
 *
 * storeId - Type: guid. Desc: store_id
 * @param {openAppSettingsSfeParams} params The parameters for this event.
 * @return {Object} LogObject
**/
export var openAppSettingsSfe = function(params) {
    return {
        evid: 811,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
};
/**
 * @typedef {Object} imageGalleryOpenedInProductOaParams
 * @property {string} appName - null
 * @property {boolean} isMerchant - null
 * @property {GUID} bi_token - msid
 * @property {string} productId - product_id of main product
 * @property {GUID} storeId - store_id
 * @property {GUID} uuid - uuid
 **/
/**
 * Name: Image gallery opened in product OA SF. Evid: 238.
 * Event description: after memeber clicked on image in product screen gallery opened (OA).

 * appName - Type: string.
 *
 * isMerchant - Type: bool.
 *
 * bi_token - Type: guid. Desc: msid
 *
 * productId - Type: string. Desc: product_id of main product
 *
 * storeId - Type: guid. Desc: store_id
 *
 * uuid - Type: guid. Desc: uuid
 * @param {imageGalleryOpenedInProductOaParams} params The parameters for this event.
 * @return {Object} LogObject
**/
export var imageGalleryOpenedInProductOa = function(params) {
    return {
        evid: 238,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
};
/**
 * @typedef {Object} categoryPageHeroSectionReadLessClickedParams
 * @property {string} appName - null
 * @property {boolean} isMerchant - null
 * @property {GUID} bi_token - null
 * @property {GUID} storeId - null
 **/
/**
 * Name: Category page hero section ‘read less’ clicked. Evid: 858.
 * Event description: Category page hero section ‘read less’ clicked.

 * appName - Type: string.
 *
 * isMerchant - Type: bool.
 *
 * bi_token - Type: guid.
 *
 * storeId - Type: guid.
 * @param {categoryPageHeroSectionReadLessClickedParams} params The parameters for this event.
 * @return {Object} LogObject
**/
export var categoryPageHeroSectionReadLessClicked = function(params) {
    return {
        evid: 858,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
};
/**
 * @typedef {Object} clickOnFilterInStoresOaParams
 * @property {string} appName - app_name
 * @property {boolean} archievedStatus - true / false
 * @property {number} collectionsFiltered - number of collections filtered in products filter
 * @property {string} dateRange - today, lastTwoDays, thisWeek, lastTwoWeeks, custom
 * @property {DateTime} dateRangeEnd - orderDate filter (for custom orderDateType)
 * @property {DateTime} dateRangeStart - orderDate filter (for custom orderDateType)
 * @property {string} filterScreen - relevant for SF : filterBy / collections
 * @property {string} filterValue - filter_value
 * @property {string} filtersList - list of filters applied
 * @property {string} fulfillmentStatus - fulfilled, partiallyFulfilled, canceled, notFulfilled
 * @property {string} inventoryStatus - product inventory status: in_stock,  out_of_stock,  partially_out_of_stock
 * @property {boolean} isMerchant - is_merchant
 * @property {GUID} bi_token - msid
 * @property {string} origin - name of current page (orders/products - from products dashboard / coupons_products  - products from apply coupon / SF_products - from list of products in StoreFront/coupons)
 * @property {string} paymentStatus - notPaid, paid, partiallyRefunded, refunded
 * @property {string} productType - product type: physical , digital
 * @property {number} productsFiltered - number of products filtered by in Order filter
 * @property {string} salesChannels - WEB, EBAY, POS, WIX_APP_STORE, OTHER_PLATFORM
 * @property {GUID} storeId - store_id
 * @property {string} subscriptions - withSubscription, withoutSubscription
 * @property {string} visibility - product visibility : visible , hidden
 **/
/**
 * Name: Apply  filter in Stores OA. Evid: 69.
 * Event description: when user applies filter in Stores (orders, products, coupons) Screen OneApp or POS OneApp.

 * appName - Type: string. Desc: app_name
 *
 * archievedStatus - Type: bool. Desc: true / false
 *
 * collectionsFiltered - Type: numeric. Desc: number of collections filtered in products filter
 *
 * dateRange - Type: string. Desc: today, lastTwoDays, thisWeek, lastTwoWeeks, custom
 *
 * dateRangeEnd - Type: datetime. Desc: orderDate filter (for custom orderDateType)
 *
 * dateRangeStart - Type: datetime. Desc: orderDate filter (for custom orderDateType)
 *
 * filterScreen - Type: string. Desc: relevant for SF : filterBy / collections
 *
 * filterValue - Type: string. Desc: filter_value
 *
 * filtersList - Type: string. Desc: list of filters applied
 *
 * fulfillmentStatus - Type: string. Desc: fulfilled, partiallyFulfilled, canceled, notFulfilled
 *
 * inventoryStatus - Type: string. Desc: product inventory status: in_stock,  out_of_stock,  partially_out_of_stock
 *
 * isMerchant - Type: bool. Desc: is_merchant
 *
 * bi_token - Type: guid. Desc: msid
 *
 * origin - Type: string. Desc: name of current page (orders/products - from products dashboard / coupons_products  - products from apply coupon / SF_products - from list of products in StoreFront/coupons)
 *
 * paymentStatus - Type: string. Desc: notPaid, paid, partiallyRefunded, refunded
 *
 * productType - Type: string. Desc: product type: physical , digital
 *
 * productsFiltered - Type: numeric. Desc: number of products filtered by in Order filter
 *
 * salesChannels - Type: string. Desc: WEB, EBAY, POS, WIX_APP_STORE, OTHER_PLATFORM
 *
 * storeId - Type: guid. Desc: store_id
 *
 * subscriptions - Type: string. Desc: withSubscription, withoutSubscription
 *
 * visibility - Type: string. Desc: product visibility : visible , hidden
 * @param {clickOnFilterInStoresOaParams} params The parameters for this event.
 * @return {Object} LogObject
**/
export var clickOnFilterInStoresOa = function(params) {
    return {
        evid: 69,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
};
/**
 * @typedef {Object} clickOnCallToActionInMerchantPopUpSfParams
 * @property {string} appName - null
 * @property {boolean} isMerchant - isMerchant status
 * @property {GUID} bi_token - null
 * @property {string} notificationType - payments/upgrade/shipping
 * @property {GUID} storeId - null
 * @property {string} type - merchant pop-up / buyer pop-up
 * @property {GUID} visitor_id - visitor_id
 **/
/**
 * Name: click on call to action in merchant pop-up SF. Evid: 169.
 * Event description: click on call to action (upgrade / set payment) in merchant pop-up.

 * appName - Type: string.
 *
 * isMerchant - Type: bool. Desc: isMerchant status
 *
 * bi_token - Type: guid.
 *
 * notificationType - Type: string. Desc: payments/upgrade/shipping
 *
 * storeId - Type: guid.
 *
 * type - Type: string. Desc: merchant pop-up / buyer pop-up
 *
 * visitor_id - Type: guid. Desc: visitor_id
 * @param {clickOnCallToActionInMerchantPopUpSfParams} params The parameters for this event.
 * @return {Object} LogObject
**/
export var clickOnCallToActionInMerchantPopUpSf = function(params) {
    return {
        evid: 169,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
};
/**
 * @typedef {Object} viewAddCollectionToSiteModalEditorParams
 * @property {string} appName - app name
 * @property {string} categoryId - collection id
 * @property {string} name - collection_name
 * @property {boolean} isMerchant - null
 * @property {GUID} bi_token - null
 * @property {GUID} storeId - store_id
 **/
/**
 * Name: View add collection to site modal Editor. Evid: 581.
 * Event description: in the editor, when adding a collection , coming from SM CTA - add collection to page..

 * appName - Type: string. Desc: app name
 *
 * categoryId - Type: string. Desc: collection id
 *
 * name - Type: string. Desc: collection_name
 *
 * isMerchant - Type: bool.
 *
 * bi_token - Type: guid.
 *
 * storeId - Type: guid. Desc: store_id
 * @param {viewAddCollectionToSiteModalEditorParams} params The parameters for this event.
 * @return {Object} LogObject
**/
export var viewAddCollectionToSiteModalEditor = function(params) {
    return {
        evid: 581,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
};
/**
 * @typedef {Object} viewMiniCartParams
 * @property {string} appName - app_name
 * @property {string} cartId - cartId
 * @property {string} cartType - Digital/ Physical/ mixed (Digital &Physical)
 * @property {number} itemsCount - number of items in the cart
 * @property {boolean} is_member - true is the visitor signed in as a member, false otherwise
 * @property {boolean} isMembersInstalled - true if members app installed on site, false otherwise
 * @property {boolean} isMerchant - isMerchant status
 * @property {GUID} bi_token - msid
 * @property {string} origin - cartIcon / addToCartButton
 * @property {string} priceBreakdown - list of displayed price breakdowns - tax, shipping, etc. NULL if not relevant
 * @property {GUID} siteMemberId - member guid
 * @property {GUID} storeId - storeId
 * @property {string} viewMode - editor / site / preview
 * @property {GUID} visitorId - visitorId
 **/
/**
 * Name: view mini cart. Evid: 50.
 * Event description: view mini cart pop-up. Sent for Ecom (with catalog_app_id) here (instead of src 130) until the rewrite of mini-cart)..

 * appName - Type: string. Desc: app_name
 *
 * cartId - Type: string. Desc: cartId
 *
 * cartType - Type: string. Desc: Digital/ Physical/ mixed (Digital &Physical)
 *
 * itemsCount - Type: numeric. Desc: number of items in the cart
 *
 * is_member - Type: bool. Desc: true is the visitor signed in as a member, false otherwise
 *
 * isMembersInstalled - Type: bool. Desc: true if members app installed on site, false otherwise
 *
 * isMerchant - Type: bool. Desc: isMerchant status
 *
 * bi_token - Type: guid. Desc: msid
 *
 * origin - Type: string. Desc: cartIcon / addToCartButton
 *
 * priceBreakdown - Type: string. Desc: list of displayed price breakdowns - tax, shipping, etc. NULL if not relevant
 *
 * siteMemberId - Type: guid. Desc: member guid
 *
 * storeId - Type: guid. Desc: storeId
 *
 * viewMode - Type: string. Desc: editor / site / preview
 *
 * visitorId - Type: guid. Desc: visitorId
 * @param {viewMiniCartParams} params The parameters for this event.
 * @return {Object} LogObject
**/
export var viewMiniCart = function(params) {
    return {
        evid: 50,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
};
/**
 * @typedef {Object} changeWidgetButtonActionSfeParams
 * @property {string} appName - null
 * @property {string} component_id - grid gallery, slider gallery, product page, product widget...
 * @property {boolean} isMerchant - isMerchant status
 * @property {GUID} bi_token - null
 * @property {string} origin - editor / onboarding
 * @property {GUID} storeId - null
 * @property {string} type - chosen button action type (add to cart, view details...)
 * @property {GUID} userGuid - userGuid
 **/
/**
 * Name: change widget button action SFE. Evid: 829.
 * Event description: merchant changes the widget button action in widget settings.

 * appName - Type: string.
 *
 * component_id - Type: string. Desc: grid gallery, slider gallery, product page, product widget...
 *
 * isMerchant - Type: bool. Desc: isMerchant status
 *
 * bi_token - Type: guid.
 *
 * origin - Type: string. Desc: editor / onboarding
 *
 * storeId - Type: guid.
 *
 * type - Type: string. Desc: chosen button action type (add to cart, view details...)
 *
 * userGuid - Type: guid. Desc: userGuid
 * @param {changeWidgetButtonActionSfeParams} params The parameters for this event.
 * @return {Object} LogObject
**/
export var changeWidgetButtonActionSfe = function(params) {
    return {
        evid: 829,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
};
/**
 * @typedef {Object} clickOnPriceBreakdownWidgetInPpSfParams
 * @property {string} appName - app_name
 * @property {boolean} isMerchant - null
 * @property {GUID} bi_token - null
 * @property {string} productId - product_guid
 * @property {string} productType - Digital/ Physical
 * @property {GUID} storeId - store_id
 * @property {string} type - type of installments app
 * @property {string} viewMode - editor / site / preview
 **/
/**
 * Name: click on price breakdown widget in PP SF. Evid: 550.
 * Event description: buyer clicks on the price breakdown widget in the product page.

 * appName - Type: string. Desc: app_name
 *
 * isMerchant - Type: bool.
 *
 * bi_token - Type: guid.
 *
 * productId - Type: string. Desc: product_guid
 *
 * productType - Type: string. Desc: Digital/ Physical
 *
 * storeId - Type: guid. Desc: store_id
 *
 * type - Type: string. Desc: type of installments app
 *
 * viewMode - Type: string. Desc: editor / site / preview
 * @param {clickOnPriceBreakdownWidgetInPpSfParams} params The parameters for this event.
 * @return {Object} LogObject
**/
export var clickOnPriceBreakdownWidgetInPpSf = function(params) {
    return {
        evid: 550,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
};
/**
 * @typedef {Object} viewEWalletModalSfParams
 * @property {string} appName - app_name
 * @property {GUID} cartId - cart_id
 * @property {string} cartType - Digital/ Physical/ mixed (Digital &Physical)
 * @property {number} itemsCount - number of items in the cart
 * @property {boolean} is_member - true if the visitor signed in as a member, false otherwise
 * @property {boolean} isMerchant - isMerchant status
 * @property {boolean} isOwner - true for merchant, false for member
 * @property {GUID} bi_token - msid
 * @property {number} num_of_shipping - number of shipping choices presented to the visitor
 * @property {string} origin - 'eWallet redirect - cancel' / 'eWallet redirect - continue' / 'cart'
 * @property {GUID} owner_id - uuid of site owner
 * @property {string} shippingMethodType - shipping /store pickup / none
 * @property {GUID} siteMemberId - member id
 * @property {GUID} storeId - store_id
 **/
/**
 * Name: View e-wallet Modal SF. Evid: 224.
 * Event description: When a visitor views e-wallet Modal after clicking on checkout with e-wallet..

 * appName - Type: string. Desc: app_name
 *
 * cartId - Type: guid. Desc: cart_id
 *
 * cartType - Type: string. Desc: Digital/ Physical/ mixed (Digital &Physical)
 *
 * itemsCount - Type: numeric. Desc: number of items in the cart
 *
 * is_member - Type: bool. Desc: true if the visitor signed in as a member, false otherwise
 *
 * isMerchant - Type: bool. Desc: isMerchant status
 *
 * isOwner - Type: bool. Desc: true for merchant, false for member
 *
 * bi_token - Type: guid. Desc: msid
 *
 * num_of_shipping - Type: numeric. Desc: number of shipping choices presented to the visitor
 *
 * origin - Type: string. Desc: 'eWallet redirect - cancel' / 'eWallet redirect - continue' / 'cart'
 *
 * owner_id - Type: guid. Desc: uuid of site owner
 *
 * shippingMethodType - Type: string. Desc: shipping /store pickup / none
 *
 * siteMemberId - Type: guid. Desc: member id
 *
 * storeId - Type: guid. Desc: store_id
 * @param {viewEWalletModalSfParams} params The parameters for this event.
 * @return {Object} LogObject
**/
export var viewEWalletModalSf = function(params) {
    return {
        evid: 224,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
};
/**
 * @typedef {Object} currencyConverterClickGeneralInfoSfeParams
 * @property {string} appName - currencyconverter-settings
 * @property {GUID} instance_id - instance_id
 * @property {boolean} isMerchant - isMerchant status
 * @property {GUID} bi_token - null
 * @property {GUID} storeId - store_id
 **/
/**
 * Name: currency converter - click 'General Info' SFE. Evid: 531.
 * Event description: click  'General Info' in currency converter settings (under 'Currencies' panel) in the stores currency tool tip..

 * appName - Type: string. Desc: currencyconverter-settings
 *
 * instance_id - Type: guid. Desc: instance_id
 *
 * isMerchant - Type: bool. Desc: isMerchant status
 *
 * bi_token - Type: guid.
 *
 * storeId - Type: guid. Desc: store_id
 * @param {currencyConverterClickGeneralInfoSfeParams} params The parameters for this event.
 * @return {Object} LogObject
**/
export var currencyConverterClickGeneralInfoSfe = function(params) {
    return {
        evid: 531,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
};
/**
 * @typedef {Object} productWidgetLoadedSfParams
 * @property {string} appName - app name
 * @property {string} buttonType - all the time / hover / never
 * @property {boolean} hasOptions - null
 * @property {boolean} hasPlans - product has subscriptions plans
 * @property {boolean} isMerchant - null
 * @property {boolean} isMobileFriendly - true if mobile friendly, false otherwise
 * @property {GUID} bi_token - null
 * @property {string} navigationClick - add to cart / view details
 * @property {string} priceBreakdown - list of displayed price breakdowns - tax, shipping, etc. NULL if not relevant
 * @property {string} productId - product_guid
 * @property {string} productType - digital/physical
 * @property {GUID} storeId - store_id
 * @property {string} type - layout - left / close-up / outline / add to cart / center
 **/
/**
 * Name: Product Widget Loaded SF. Evid: 544.
 * Event description: product widget loaded in SF
(preview, Editor & live site).

 * appName - Type: string. Desc: app name
 *
 * buttonType - Type: string. Desc: all the time / hover / never
 *
 * hasOptions - Type: bool.
 *
 * hasPlans - Type: bool. Desc: product has subscriptions plans
 *
 * isMerchant - Type: bool.
 *
 * isMobileFriendly - Type: bool. Desc: true if mobile friendly, false otherwise
 *
 * bi_token - Type: guid.
 *
 * navigationClick - Type: string. Desc: add to cart / view details
 *
 * priceBreakdown - Type: string. Desc: list of displayed price breakdowns - tax, shipping, etc. NULL if not relevant
 *
 * productId - Type: string. Desc: product_guid
 *
 * productType - Type: string. Desc: digital/physical
 *
 * storeId - Type: guid. Desc: store_id
 *
 * type - Type: string. Desc: layout - left / close-up / outline / add to cart / center
 * @param {productWidgetLoadedSfParams} params The parameters for this event.
 * @return {Object} LogObject
**/
export var productWidgetLoadedSf = function(params) {
    return {
        evid: 544,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
};
/**
 * @typedef {Object} clickTrackOrderInMyOrderOaStoreFrontParams
 * @property {string} appName - null
 * @property {boolean} isMerchant - null
 * @property {boolean} isOwner - is_owner
 * @property {GUID} bi_token - msid
 * @property {string} orderId - orderId
 * @property {GUID} storeId - store_id
 **/
/**
 * Name: Click track order in MyOrder OA StoreFront. Evid: 188.
 * Event description: in MyOrder OA StoreFront buyer (member) can click on "Track order" if merchant already added tracking # (with appropriate link).

 * appName - Type: string.
 *
 * isMerchant - Type: bool.
 *
 * isOwner - Type: bool. Desc: is_owner
 *
 * bi_token - Type: guid. Desc: msid
 *
 * orderId - Type: string. Desc: orderId
 *
 * storeId - Type: guid. Desc: store_id
 * @param {clickTrackOrderInMyOrderOaStoreFrontParams} params The parameters for this event.
 * @return {Object} LogObject
**/
export var clickTrackOrderInMyOrderOaStoreFront = function(params) {
    return {
        evid: 188,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
};
/**
 * @typedef {Object} pictureNavigationInZoomModalSfParams
 * @property {string} appName - app_name
 * @property {boolean} hasOptions - does the product has options
 * @property {boolean} isMerchant - null
 * @property {GUID} bi_token - null
 * @property {GUID} owner_id - uuid of site owner
 * @property {string} productId - product_guid
 * @property {string} productType - Digital/ Physical
 * @property {GUID} storeId - store_id
 * @property {string} value - previous / next
 **/
/**
 * Name: Picture navigation in zoom modal SF. Evid: 493.
 * Event description: When the buyer navigates between the product pictures in the zoom modal in product page.

 * appName - Type: string. Desc: app_name
 *
 * hasOptions - Type: bool. Desc: does the product has options
 *
 * isMerchant - Type: bool.
 *
 * bi_token - Type: guid.
 *
 * owner_id - Type: guid. Desc: uuid of site owner
 *
 * productId - Type: string. Desc: product_guid
 *
 * productType - Type: string. Desc: Digital/ Physical
 *
 * storeId - Type: guid. Desc: store_id
 *
 * value - Type: string. Desc: previous / next
 * @param {pictureNavigationInZoomModalSfParams} params The parameters for this event.
 * @return {Object} LogObject
**/
export var pictureNavigationInZoomModalSf = function(params) {
    return {
        evid: 493,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
};
/**
 * @typedef {Object} clickLinkInMembersWishlistSfParams
 * @property {string} appName - null
 * @property {boolean} isMerchant - null
 * @property {boolean} isOwner - true for owner false for member. since june 2019
 * @property {GUID} bi_token - null
 * @property {GUID} storeId - store_id
 * @property {string} viewMode - editor / site / preview
 **/
/**
 * Name: Click on link in wishlist gallery (empty) SF. Evid: 266.
 * Event description: buyer clicks on the 'add products to wishlist' link in the  wishlist in the Members area.

 * appName - Type: string.
 *
 * isMerchant - Type: bool.
 *
 * isOwner - Type: bool. Desc: true for owner false for member. since june 2019
 *
 * bi_token - Type: guid.
 *
 * storeId - Type: guid. Desc: store_id
 *
 * viewMode - Type: string. Desc: editor / site / preview
 * @param {clickLinkInMembersWishlistSfParams} params The parameters for this event.
 * @return {Object} LogObject
**/
export var clickLinkInMembersWishlistSf = function(params) {
    return {
        evid: 266,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
};
/**
 * @typedef {Object} clickToViewWishlistSfParams
 * @property {string} appName - null
 * @property {boolean} isMerchant - null
 * @property {boolean} isOwner - true for owner false for member. since june 2019
 * @property {GUID} bi_token - null
 * @property {string} origin - members-menu / login-menu
 * @property {GUID} storeId - store_id
 * @property {string} viewMode - editor / site / preview
 **/
/**
 * Name: Click to view wishlist SF. Evid: 265.
 * Event description: buyer clicks to view wishlist in the Members area / login menu.

 * appName - Type: string.
 *
 * isMerchant - Type: bool.
 *
 * isOwner - Type: bool. Desc: true for owner false for member. since june 2019
 *
 * bi_token - Type: guid.
 *
 * origin - Type: string. Desc: members-menu / login-menu
 *
 * storeId - Type: guid. Desc: store_id
 *
 * viewMode - Type: string. Desc: editor / site / preview
 * @param {clickToViewWishlistSfParams} params The parameters for this event.
 * @return {Object} LogObject
**/
export var clickToViewWishlistSf = function(params) {
    return {
        evid: 265,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
};
/**
 * @typedef {Object} galleryClickApplyFilterParams
 * @property {string} appName - app
 * @property {string} filterTypes - list of the filter types changed
 * @property {boolean} isMerchant - isMerchant status
 * @property {GUID} bi_token - null
 * @property {GUID} storeId - store_id
 **/
/**
 * Name: Gallery - Click  Apply Filter (Mobile). Evid: 141.
 * Event description: When a visitor clicks "Apply Filter" in mobile only! after he choose the filters.

 * appName - Type: string. Desc: app
 *
 * filterTypes - Type: string. Desc: list of the filter types changed
 *
 * isMerchant - Type: bool. Desc: isMerchant status
 *
 * bi_token - Type: guid.
 *
 * storeId - Type: guid. Desc: store_id
 * @param {galleryClickApplyFilterParams} params The parameters for this event.
 * @return {Object} LogObject
**/
export var galleryClickApplyFilter = function(params) {
    return {
        evid: 141,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
};
/**
 * @typedef {Object} giftCardCheckoutClickApplyParams
 * @property {string} appName - null
 * @property {GUID} cartId - cart_id
 * @property {GUID} checkoutId - checkout_id
 * @property {boolean} isMember - true if visitor is member
 * @property {boolean} isMerchant - null
 * @property {GUID} bi_token - null
 * @property {GUID} siteMemberId - null
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - null
 **/
/**
 * Name: gift card checkout -> click Apply. Evid: 529.
 * Event description: when visitor clicks "Apply" after entering Gift Card Code in Payment stage of Checkout.

 * appName - Type: string.
 *
 * cartId - Type: guid. Desc: cart_id
 *
 * checkoutId - Type: guid. Desc: checkout_id
 *
 * isMember - Type: bool. Desc: true if visitor is member
 *
 * isMerchant - Type: bool.
 *
 * bi_token - Type: guid.
 *
 * siteMemberId - Type: guid.
 *
 * storeId - Type: guid. Desc: store_id
 *
 * visitor_id - Type: guid.
 * @param {giftCardCheckoutClickApplyParams} params The parameters for this event.
 * @return {Object} LogObject
**/
export var giftCardCheckoutClickApply = function(params) {
    return {
        evid: 529,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
};
/**
 * @typedef {Object} giftCardCheckoutClickOnCheckboxParams
 * @property {string} appName - null
 * @property {GUID} cartId - cart_id
 * @property {GUID} checkoutId - null
 * @property {boolean} isMember - true if visitor is member
 * @property {boolean} isMerchant - null
 * @property {GUID} bi_token - null
 * @property {GUID} siteMemberId - member
 * @property {GUID} storeId - store_id
 * @property {string} value - checked / unchecked
 * @property {GUID} visitor_id - visitor_id
 **/
/**
 * Name: gift card checkout -> click on checkbox. Evid: 527.
 * Event description: when visitor checks / unchecks the Gift Card checkbox in Payment stage of Checkout.

 * appName - Type: string.
 *
 * cartId - Type: guid. Desc: cart_id
 *
 * checkoutId - Type: guid.
 *
 * isMember - Type: bool. Desc: true if visitor is member
 *
 * isMerchant - Type: bool.
 *
 * bi_token - Type: guid.
 *
 * siteMemberId - Type: guid. Desc: member
 *
 * storeId - Type: guid. Desc: store_id
 *
 * value - Type: string. Desc: checked / unchecked
 *
 * visitor_id - Type: guid. Desc: visitor_id
 * @param {giftCardCheckoutClickOnCheckboxParams} params The parameters for this event.
 * @return {Object} LogObject
**/
export var giftCardCheckoutClickOnCheckbox = function(params) {
    return {
        evid: 527,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
};
/**
 * @typedef {Object} galleryClickClearAllFiltersParams
 * @property {string} appName - app
 * @property {boolean} isMerchant - isMerchant status
 * @property {GUID} bi_token - null
 * @property {GUID} storeId - store_id
 **/
/**
 * Name: Gallery - Click  "clear All" filters. Evid: 142.
 * Event description: When a visitor clicks "Clear All" in mobile only! after he in the filters view.

 * appName - Type: string. Desc: app
 *
 * isMerchant - Type: bool. Desc: isMerchant status
 *
 * bi_token - Type: guid.
 *
 * storeId - Type: guid. Desc: store_id
 * @param {galleryClickClearAllFiltersParams} params The parameters for this event.
 * @return {Object} LogObject
**/
export var galleryClickClearAllFilters = function(params) {
    return {
        evid: 142,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
};
/**
 * @typedef {Object} storeFrontPopupShownClckedOaParams
 * @property {string} appName - null
 * @property {boolean} isMerchant - null
 * @property {GUID} bi_token - msid
 * @property {GUID} storeId - store_id
 * @property {string} type - shown / clicked
 **/
/**
 * Name: StoreFront popup shown/clcked OA. Evid: 189.
 * Event description: Merchant saw/ clicked on StoreFront popup (in MemberView)  . shown only for one time - first entering Store OA.

 * appName - Type: string.
 *
 * isMerchant - Type: bool.
 *
 * bi_token - Type: guid. Desc: msid
 *
 * storeId - Type: guid. Desc: store_id
 *
 * type - Type: string. Desc: shown / clicked
 * @param {storeFrontPopupShownClckedOaParams} params The parameters for this event.
 * @return {Object} LogObject
**/
export var storeFrontPopupShownClckedOa = function(params) {
    return {
        evid: 189,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
};
/**
 * @typedef {Object} changeProductInWidgetSfeParams
 * @property {string} appName - null
 * @property {string} component_id - grid gallery, slider galeery, product page
 * @property {boolean} isMerchant - isMerchant status
 * @property {GUID} bi_token - null
 * @property {string} origin - editor / onboarding
 * @property {GUID} storeId - null
 * @property {GUID} userGuid - userGuid
 **/
/**
 * Name: change product in widget SFE. Evid: 826.
 * Event description: merchant changed the product connected to a product widget.

 * appName - Type: string.
 *
 * component_id - Type: string. Desc: grid gallery, slider galeery, product page
 *
 * isMerchant - Type: bool. Desc: isMerchant status
 *
 * bi_token - Type: guid.
 *
 * origin - Type: string. Desc: editor / onboarding
 *
 * storeId - Type: guid.
 *
 * userGuid - Type: guid. Desc: userGuid
 * @param {changeProductInWidgetSfeParams} params The parameters for this event.
 * @return {Object} LogObject
**/
export var changeProductInWidgetSfe = function(params) {
    return {
        evid: 826,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
};
/**
 * @typedef {Object} clickOnCheckoutWithEWalletSfParams
 * @property {number} additionalFeesPrice - INT, multiplied by 100 000 - sum of all additional fees price in cart
 * @property {string} appName - null
 * @property {string} cartId - null
 * @property {string} cartType - Digital/ Physical/ mixed (Digital &Physical)
 * @property {GUID} checkoutId - checkout_id
 * @property {number} itemsCount - null
 * @property {boolean} isMerchant - isMerchant status
 * @property {boolean} is_with_ewallet_payment - does the store has an ewallet payment connected (and displaying in cart)
 * @property {boolean} is_with_offline_payment - does the store has an offline payment connected
 * @property {GUID} bi_token - null
 * @property {number} num_of_paymet_providers - How many payment providers does the store has connected
 * @property {number} num_of_shipping - number of shipping choices presented to the visitor at the first time
 * @property {number} numberOfAdditionalFees - number of all additional fees in the cart
 * @property {string} orig_shipping_method - the shipping method that the visitor choose in the cart - free shipping/ Flat rate/ rate by weight/ rate by order price/store pickup (the same strings as in 163 event)
 * @property {string} origin - null
 * @property {string} paymet_providers - array of payment providers connected to the store
 * @property {boolean} preOrder - True- if the item is pre-order
 * @property {string} productsList - json containing all product guids for products in the cart
 * @property {string} shippingMethodType - shipping /store pickup / none
 * @property {GUID} storeId - null
 * @property {string} type - e-wallet type
 * @property {GUID} visitor_id - null
 **/
/**
 * Name: Click on checkout with e-wallet SF. Evid: 113.
 * Event description: buyer clicks on checkout with e-wallwt in cart page.

 * additionalFeesPrice - Type: numeric. Desc: INT, multiplied by 100 000 - sum of all additional fees price in cart
 *
 * appName - Type: string.
 *
 * cartId - Type: string.
 *
 * cartType - Type: string. Desc: Digital/ Physical/ mixed (Digital &Physical)
 *
 * checkoutId - Type: guid. Desc: checkout_id
 *
 * itemsCount - Type: numeric.
 *
 * isMerchant - Type: bool. Desc: isMerchant status
 *
 * is_with_ewallet_payment - Type: bool. Desc: does the store has an ewallet payment connected (and displaying in cart)
 *
 * is_with_offline_payment - Type: bool. Desc: does the store has an offline payment connected
 *
 * bi_token - Type: guid.
 *
 * num_of_paymet_providers - Type: numeric. Desc: How many payment providers does the store has connected
 *
 * num_of_shipping - Type: numeric. Desc: number of shipping choices presented to the visitor at the first time
 *
 * numberOfAdditionalFees - Type: numeric. Desc: number of all additional fees in the cart
 *
 * orig_shipping_method - Type: string. Desc: the shipping method that the visitor choose in the cart - free shipping/ Flat rate/ rate by weight/ rate by order price/store pickup (the same strings as in 163 event)
 *
 * origin - Type: string.
 *
 * paymet_providers - Type: string. Desc: array of payment providers connected to the store
 *
 * preOrder - Type: bool. Desc: True- if the item is pre-order
 *
 * productsList - Type: string. Desc: json containing all product guids for products in the cart
 *
 * shippingMethodType - Type: string. Desc: shipping /store pickup / none
 *
 * storeId - Type: guid.
 *
 * type - Type: string. Desc: e-wallet type
 *
 * visitor_id - Type: guid.
 * @param {clickOnCheckoutWithEWalletSfParams} params The parameters for this event.
 * @return {Object} LogObject
**/
export var clickOnCheckoutWithEWalletSf = function(params) {
    return {
        evid: 113,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
};
/**
 * @typedef {Object} clickOnCheckoutSfParams
 * @property {number} additionalFeesPrice - INT, multiplied by 100 000 - sum of all additional fees price in cart
 * @property {string} appName - null
 * @property {GUID} cartId - null
 * @property {string} cartType - Digital/ Physical/ mixed (Digital &Physical)
 * @property {GUID} checkoutId - checkout_id
 * @property {number} itemsCount - null
 * @property {boolean} isMerchant - isMerchant status
 * @property {boolean} isOwner - true for merchant false for member
 * @property {boolean} is_with_ewallet_payment - does the store has an ewallet payment connected (and displaying in cart)
 * @property {boolean} is_with_offline_payment - does the store has an offline payment connected
 * @property {GUID} bi_token - null
 * @property {number} num_of_paymet_providers - How many payment providers does the store has connected
 * @property {number} num_of_shipping - number of shipping choices presented to the visitor at the first time
 * @property {number} numberOfAdditionalFees - number of all additional fees in the cart
 * @property {string} orig_shipping_method - the shipping method that the visitor choose in the cart
 * @property {string} origin - null
 * @property {GUID} owner_id - id of site owner
 * @property {string} paymet_providers - array of payment providers connected to the store
 * @property {string} productsList - json containing all product guids for products in the cart
 * @property {string} shippingMethodType - shipping (=shipping & local delivery) /store pickup / none (when digital product)
 * @property {GUID} storeId - null
 * @property {GUID} uuid - uuid
 * @property {GUID} visitor_id - null
 **/
/**
 * Name: Click on checkout SF. Evid: 114.
 * Event description: Click on checkout from Cart page. since june 2019 also sent from OneApp with origin = 'OA StoreFront'.

 * additionalFeesPrice - Type: numeric. Desc: INT, multiplied by 100 000 - sum of all additional fees price in cart
 *
 * appName - Type: string.
 *
 * cartId - Type: guid.
 *
 * cartType - Type: string. Desc: Digital/ Physical/ mixed (Digital &Physical)
 *
 * checkoutId - Type: guid. Desc: checkout_id
 *
 * itemsCount - Type: numeric.
 *
 * isMerchant - Type: bool. Desc: isMerchant status
 *
 * isOwner - Type: bool. Desc: true for merchant false for member
 *
 * is_with_ewallet_payment - Type: bool. Desc: does the store has an ewallet payment connected (and displaying in cart)
 *
 * is_with_offline_payment - Type: bool. Desc: does the store has an offline payment connected
 *
 * bi_token - Type: guid.
 *
 * num_of_paymet_providers - Type: numeric. Desc: How many payment providers does the store has connected
 *
 * num_of_shipping - Type: numeric. Desc: number of shipping choices presented to the visitor at the first time
 *
 * numberOfAdditionalFees - Type: numeric. Desc: number of all additional fees in the cart
 *
 * orig_shipping_method - Type: string. Desc: the shipping method that the visitor choose in the cart
 *
 * origin - Type: string.
 *
 * owner_id - Type: guid. Desc: id of site owner
 *
 * paymet_providers - Type: string. Desc: array of payment providers connected to the store
 *
 * productsList - Type: string. Desc: json containing all product guids for products in the cart
 *
 * shippingMethodType - Type: string. Desc: shipping (=shipping & local delivery) /store pickup / none (when digital product)
 *
 * storeId - Type: guid.
 *
 * uuid - Type: guid. Desc: uuid
 *
 * visitor_id - Type: guid.
 * @param {clickOnCheckoutSfParams} params The parameters for this event.
 * @return {Object} LogObject
**/
export var clickOnCheckoutSf = function(params) {
    return {
        evid: 114,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
};
/**
 * @typedef {Object} galleryClickSortByParams
 * @property {string} appName - app name
 * @property {boolean} isMerchant - isMerchant status
 * @property {GUID} bi_token - null
 * @property {GUID} storeId - store_id
 **/
/**
 * Name: Gallery -  Click 'Sort By'. Evid: 139.
 * Event description: When the user clicks the sort by button (mobile) / dropdown (desktop).

 * appName - Type: string. Desc: app name
 *
 * isMerchant - Type: bool. Desc: isMerchant status
 *
 * bi_token - Type: guid.
 *
 * storeId - Type: guid. Desc: store_id
 * @param {galleryClickSortByParams} params The parameters for this event.
 * @return {Object} LogObject
**/
export var galleryClickSortBy = function(params) {
    return {
        evid: 139,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
};
/**
 * @typedef {Object} clickToPreviewWishlistInMembersSfeParams
 * @property {string} appName - null
 * @property {boolean} isMerchant - null
 * @property {GUID} bi_token - null
 * @property {GUID} storeId - store_id
 **/
/**
 * Name: Click to preview Wishlist in Members SFE. Evid: 843.
 * Event description: when a user clicks in notification to preview Wishlist in Members.

 * appName - Type: string.
 *
 * isMerchant - Type: bool.
 *
 * bi_token - Type: guid.
 *
 * storeId - Type: guid. Desc: store_id
 * @param {clickToPreviewWishlistInMembersSfeParams} params The parameters for this event.
 * @return {Object} LogObject
**/
export var clickToPreviewWishlistInMembersSfe = function(params) {
    return {
        evid: 843,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
};
/**
 * @typedef {Object} changeTextFieldSfeParams
 * @property {string} appName - null
 * @property {string} component_id - grid gallery, slider galery, product page, mini cart....
 * @property {string} field - Icon text, button text, out of stock...
 * @property {boolean} isMerchant - isMerchant status
 * @property {GUID} bi_token - null
 * @property {string} origin - editor / onboarding
 * @property {GUID} storeId - null
 * @property {string} text - new text
 * @property {GUID} userGuid - userGuid
 **/
/**
 * Name: Change text field SFE. Evid: 833.
 * Event description: change the text in store front settings.

 * appName - Type: string.
 *
 * component_id - Type: string. Desc: grid gallery, slider galery, product page, mini cart....
 *
 * field - Type: string. Desc: Icon text, button text, out of stock...
 *
 * isMerchant - Type: bool. Desc: isMerchant status
 *
 * bi_token - Type: guid.
 *
 * origin - Type: string. Desc: editor / onboarding
 *
 * storeId - Type: guid.
 *
 * text - Type: string. Desc: new text
 *
 * userGuid - Type: guid. Desc: userGuid
 * @param {changeTextFieldSfeParams} params The parameters for this event.
 * @return {Object} LogObject
**/
export var changeTextFieldSfe = function(params) {
    return {
        evid: 833,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
};
/**
 * @typedef {Object} clickOnRightBarTabsWithinComponentSfeParams
 * @property {string} appName - app_name
 * @property {string} component_id - grid gallery, slider galeery, product page, CurrencyConverter
 * @property {boolean} isMerchant - null
 * @property {GUID} bi_token - msid
 * @property {string} origin - editor / onboarding
 * @property {string} parameter - general/product info & Image/Image Slideshow/product Options & Quantity./Ribbons/Add to cart Button/Quick view Button/Load More Button
 * @property {GUID} storeId - store_id
 * @property {string} tab - design / text / Manage
 **/
/**
 * Name: click on right bar tabs within component SFE. Evid: 53.
 * Event description: click to view tab in the component (right bar).

 * appName - Type: string. Desc: app_name
 *
 * component_id - Type: string. Desc: grid gallery, slider galeery, product page, CurrencyConverter
 *
 * isMerchant - Type: bool.
 *
 * bi_token - Type: guid. Desc: msid
 *
 * origin - Type: string. Desc: editor / onboarding
 *
 * parameter - Type: string. Desc: general/product info & Image/Image Slideshow/product Options & Quantity./Ribbons/Add to cart Button/Quick view Button/Load More Button
 *
 * storeId - Type: guid. Desc: store_id
 *
 * tab - Type: string. Desc: design / text / Manage
 * @param {clickOnRightBarTabsWithinComponentSfeParams} params The parameters for this event.
 * @return {Object} LogObject
**/
export var clickOnRightBarTabsWithinComponentSfe = function(params) {
    return {
        evid: 53,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
};
/**
 * @typedef {Object} viewGallerySfParams
 * @property {string} algorithmId - when a gallery is loaded with product from a algorithm (frequently bought together, frequently watched together) this field will contain the id of the algorithm
 * @property {GUID} algorithmProviderId - when a gallery is loaded with product from a algorithm (frequently bought together, frequently watched together) this field will contain the provider  id of the algorithm
 * @property {string} appName - app name
 * @property {string} categoryId - presented category (if not relevant NULL) (collection by legacy)
 * @property {string} filterName - ONLY custom filters names (can be NULL)
 * @property {string} filterType - if has filters > list of displayed filters, if no filters > null
 * @property {string} galleryInputId - productId/ collectionId. the input ID of the gallery - when it shows collection -> collection id, when it shows related products - product id (when on product page) list -> when (other pages), when it shows all products -> null, Best Sellers -> null
 * @property {boolean} addToCart - has add to cart button
 * @property {boolean} hasBreadcrumbs - has_breadcrumbs
 * @property {boolean} hasCategoryTree - Has category tree  (collections by legacy)
 * @property {boolean} hasHeroDescription - Has hero description
 * @property {boolean} hasHeroImage - Has hero image
 * @property {boolean} hasImageCarousel - has image carousel
 * @property {boolean} hasOptions - is options in gallery shown
 * @property {boolean} hasPrice - is price in gallery shown
 * @property {boolean} hasProductCounter - Has product counter
 * @property {boolean} hasQuantity - is quantity in gallery shown
 * @property {boolean} hasQuickView - has quick view
 * @property {boolean} hasSorting - is sorting in gallery shown
 * @property {string} hoverType - swap / zoom / border / nothing
 * @property {GUID} impressionId - unique guid for the gallery loading session
 * @property {boolean} isCategoryPage - Is category page  (collections by legacy)
 * @property {boolean} isMerchant - null
 * @property {boolean} isMobileFriendly - true if mobile friendly, false otherwise
 * @property {string} loadType - pagination / load more button / infinite scroll
 * @property {GUID} bi_token - null
 * @property {string} navigationClick - what happens when you click on add to cart (if no ATC button > NULL)
 * @property {number} numOfColumns - Presented gallery columns
 * @property {string} priceBreakdown - list of displayed price breakdowns - tax, shipping, etc. NULL if not relevant
 * @property {string} productsList - array of the prdocutIds in the gallery  (only in slider)
 * @property {string} productsLogic - collection / related products / all products
 * @property {GUID} storeId - store_id
 * @property {string} type - slider gallery / grid gallery / gallery page
 **/
/**
 * Name: View Gallery SF. Evid: 542.
 * Event description: view gallery (slider, grid ang gallery page) in SF
(preview, Editor & live site).

 * algorithmId - Type: string. Desc: when a gallery is loaded with product from a algorithm (frequently bought together, frequently watched together) this field will contain the id of the algorithm
 *
 * algorithmProviderId - Type: guid. Desc: when a gallery is loaded with product from a algorithm (frequently bought together, frequently watched together) this field will contain the provider  id of the algorithm
 *
 * appName - Type: string. Desc: app name
 *
 * categoryId - Type: string. Desc: presented category (if not relevant NULL) (collection by legacy)
 *
 * filterName - Type: string. Desc: ONLY custom filters names (can be NULL)
 *
 * filterType - Type: string. Desc: if has filters > list of displayed filters, if no filters > null
 *
 * galleryInputId - Type: string. Desc: productId/ collectionId. the input ID of the gallery - when it shows collection -> collection id, when it shows related products - product id (when on product page) list -> when (other pages), when it shows all products -> null, Best Sellers -> null
 *
 * addToCart - Type: bool. Desc: has add to cart button
 *
 * hasBreadcrumbs - Type: bool. Desc: has_breadcrumbs
 *
 * hasCategoryTree - Type: bool. Desc: Has category tree  (collections by legacy)
 *
 * hasHeroDescription - Type: bool. Desc: Has hero description
 *
 * hasHeroImage - Type: bool. Desc: Has hero image
 *
 * hasImageCarousel - Type: bool. Desc: has image carousel
 *
 * hasOptions - Type: bool. Desc: is options in gallery shown
 *
 * hasPrice - Type: bool. Desc: is price in gallery shown
 *
 * hasProductCounter - Type: bool. Desc: Has product counter
 *
 * hasQuantity - Type: bool. Desc: is quantity in gallery shown
 *
 * hasQuickView - Type: bool. Desc: has quick view
 *
 * hasSorting - Type: bool. Desc: is sorting in gallery shown
 *
 * hoverType - Type: string. Desc: swap / zoom / border / nothing
 *
 * impressionId - Type: guid. Desc: unique guid for the gallery loading session
 *
 * isCategoryPage - Type: bool. Desc: Is category page  (collections by legacy)
 *
 * isMerchant - Type: bool.
 *
 * isMobileFriendly - Type: bool. Desc: true if mobile friendly, false otherwise
 *
 * loadType - Type: string. Desc: pagination / load more button / infinite scroll
 *
 * bi_token - Type: guid.
 *
 * navigationClick - Type: string. Desc: what happens when you click on add to cart (if no ATC button > NULL)
 *
 * numOfColumns - Type: numeric. Desc: Presented gallery columns
 *
 * priceBreakdown - Type: string. Desc: list of displayed price breakdowns - tax, shipping, etc. NULL if not relevant
 *
 * productsList - Type: string. Desc: array of the prdocutIds in the gallery  (only in slider)
 *
 * productsLogic - Type: string. Desc: collection / related products / all products
 *
 * storeId - Type: guid. Desc: store_id
 *
 * type - Type: string. Desc: slider gallery / grid gallery / gallery page
 * @param {viewGallerySfParams} params The parameters for this event.
 * @return {Object} LogObject
**/
export var viewGallerySf = function(params) {
    return {
        evid: 542,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
};
/**
 * @typedef {Object} highRpuDismissFeatureAdAssetParams
 * @property {string} appName - app_name
 * @property {string} component_id - CurrencyConverter, AvalaraTax
 * @property {boolean} isMerchant - isMerchant status
 * @property {GUID} bi_token - msid
 * @property {string} origin - editor / onboarding / StoresBO
 * @property {GUID} storeId - store_id
 * @property {string} type - banner
 **/
/**
 * Name: High RPU -> Dismiss Feature Ad asset. Evid: 237.
 * Event description: when user dismisses Ad asset (e.g. banner) to Upgrade to High RPU to get feature - so it won't be shown any more.

 * appName - Type: string. Desc: app_name
 *
 * component_id - Type: string. Desc: CurrencyConverter, AvalaraTax
 *
 * isMerchant - Type: bool. Desc: isMerchant status
 *
 * bi_token - Type: guid. Desc: msid
 *
 * origin - Type: string. Desc: editor / onboarding / StoresBO
 *
 * storeId - Type: guid. Desc: store_id
 *
 * type - Type: string. Desc: banner
 * @param {highRpuDismissFeatureAdAssetParams} params The parameters for this event.
 * @return {Object} LogObject
**/
export var highRpuDismissFeatureAdAsset = function(params) {
    return {
        evid: 237,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
};
/**
 * @typedef {Object} clickToViewCartPageSfParams
 * @property {string} appName - app
 * @property {GUID} cartId - cartId
 * @property {string} cartType - Digital/ Physical/ mixed (Digital &Physical)
 * @property {GUID} checkoutId - checkout_id
 * @property {number} itemsCount - number of items in the cart
 * @property {boolean} isMerchant - isMerchant status
 * @property {boolean} isNavigateCart - hardcoded true -> for Anodot
 * @property {boolean} isOwner - is_owner
 * @property {GUID} bi_token - msid
 * @property {string} origin - add to cart / mini cart / cart widget / checkout...
 * @property {GUID} owner_id - owner_id
 * @property {GUID} storeId - store_id
 * @property {GUID} uuid - uuid
 * @property {string} viewMode - editor / site / preview
 * @property {GUID} visitorId - visitorId
 **/
/**
 * Name: Click to view cart page SF. Evid: 130.
 * Event description: click to view cart page. since june 2019 also for OneApp Store front. mini cart flor - sent for Ecom (with catalog_app_id) here (instead of src 130) until the rewrite of mini-cart)..

 * appName - Type: string. Desc: app
 *
 * cartId - Type: guid. Desc: cartId
 *
 * cartType - Type: string. Desc: Digital/ Physical/ mixed (Digital &Physical)
 *
 * checkoutId - Type: guid. Desc: checkout_id
 *
 * itemsCount - Type: numeric. Desc: number of items in the cart
 *
 * isMerchant - Type: bool. Desc: isMerchant status
 *
 * isNavigateCart - Type: bool. Desc: hardcoded true -> for Anodot
 *
 * isOwner - Type: bool. Desc: is_owner
 *
 * bi_token - Type: guid. Desc: msid
 *
 * origin - Type: string. Desc: add to cart / mini cart / cart widget / checkout...
 *
 * owner_id - Type: guid. Desc: owner_id
 *
 * storeId - Type: guid. Desc: store_id
 *
 * uuid - Type: guid. Desc: uuid
 *
 * viewMode - Type: string. Desc: editor / site / preview
 *
 * visitorId - Type: guid. Desc: visitorId
 * @param {clickToViewCartPageSfParams} params The parameters for this event.
 * @return {Object} LogObject
**/
export var clickToViewCartPageSf = function(params) {
    return {
        evid: 130,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
};
/**
 * @typedef {Object} productAddedToCartSfParams
 * @property {string} appName - null
 * @property {GUID} cartId - null
 * @property {string} cartType - Digital/ Physical/ mixed (Digital &Physical)
 * @property {number} quantity - number of quantity added to cart in the specific product
 * @property {boolean} isMerchant - null
 * @property {GUID} bi_token - null
 * @property {number} num_items - total # of quantity (for all products) in cart after adding the product to cart
 * @property {number} numOfLineItems - number of line items (# of products) in cart included the product just added
 * @property {string} product_id - null
 * @property {GUID} storeId - null
 * @property {GUID} visitorId - null
 **/
/**
 * Name: Product Added To Cart SF. Evid: 1052.
 * Event description: Product Added To Cart SF.

 * appName - Type: string.
 *
 * cartId - Type: guid.
 *
 * cartType - Type: string. Desc: Digital/ Physical/ mixed (Digital &Physical)
 *
 * quantity - Type: numeric. Desc: number of quantity added to cart in the specific product
 *
 * isMerchant - Type: bool.
 *
 * bi_token - Type: guid.
 *
 * num_items - Type: numeric. Desc: total # of quantity (for all products) in cart after adding the product to cart
 *
 * numOfLineItems - Type: numeric. Desc: number of line items (# of products) in cart included the product just added
 *
 * product_id - Type: string.
 *
 * storeId - Type: guid.
 *
 * visitorId - Type: guid.
 * @param {productAddedToCartSfParams} params The parameters for this event.
 * @return {Object} LogObject
**/
export var productAddedToCartSf = function(params) {
    return {
        evid: 1052,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
};
/**
 * @typedef {Object} clickOnFilterOaParams
 * @property {string} appName - null
 * @property {boolean} isMerchant - null
 * @property {GUID} bi_token - null
 * @property {string} origin - products / orders /pos
 * @property {GUID} storeId - store_id
 **/
/**
 * Name: Click on filter OA. Evid: 506.


 * appName - Type: string.
 *
 * isMerchant - Type: bool.
 *
 * bi_token - Type: guid.
 *
 * origin - Type: string. Desc: products / orders /pos
 *
 * storeId - Type: guid. Desc: store_id
 * @param {clickOnFilterOaParams} params The parameters for this event.
 * @return {Object} LogObject
**/
export var clickOnFilterOa = function(params) {
    return {
        evid: 506,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
};
/**
 * @typedef {Object} clickAddToCartWithOptionsSfParams
 * @property {string} appName - app_name
 * @property {string} galleryInputId - productId/ collectionId. the input ID of the gallery - when it shows collection -> collection id, when it shows related products - product id (when on product page) null when (other pages), when it shows all products -> null
 * @property {string} galleryProductsLogic - the logic of the gallery the user clicked on (all-products, collection, related-products)
 * @property {string} galleryType - The gallery that the user clocked on (slider-gallery, grid-gallery,shop-page)
 * @property {boolean} hasOptions - does the product has options
 * @property {GUID} impressionId - unique guid for the gallery loading session
 * @property {boolean} isMerchant - isMerchant status
 * @property {boolean} isOwner - true for owner false for member. since june 2019
 * @property {GUID} bi_token - msid
 * @property {string} navigationClick - quick-view / product-page
 * @property {string} options - a json containing the options selected for the product
 * @property {string} origin - add to cart button / gallery / product-widget
 * @property {GUID} owner_id - id of site's owner. since june 2019
 * @property {string} productId - product_guid
 * @property {string} productType - Digital/ Physical
 * @property {number} rank - the rank of the product that was clicked
 * @property {GUID} storeId - store_id
 * @property {string} viewMode - editor / site / preview
 **/
/**
 * Name: click add to cart with options SF. Evid: 248.
 * Event description: buyer clicks on 'Add to Cart' in product-widget / Add to cart button / gallery on a product with options, so the product is not added to the cart and the buyer is navigated to the Product Quick View (in Mobile - Product Page)..

 * appName - Type: string. Desc: app_name
 *
 * galleryInputId - Type: string. Desc: productId/ collectionId. the input ID of the gallery - when it shows collection -> collection id, when it shows related products - product id (when on product page) null when (other pages), when it shows all products -> null
 *
 * galleryProductsLogic - Type: string. Desc: the logic of the gallery the user clicked on (all-products, collection, related-products)
 *
 * galleryType - Type: string. Desc: The gallery that the user clocked on (slider-gallery, grid-gallery,shop-page)
 *
 * hasOptions - Type: bool. Desc: does the product has options
 *
 * impressionId - Type: guid. Desc: unique guid for the gallery loading session
 *
 * isMerchant - Type: bool. Desc: isMerchant status
 *
 * isOwner - Type: bool. Desc: true for owner false for member. since june 2019
 *
 * bi_token - Type: guid. Desc: msid
 *
 * navigationClick - Type: string. Desc: quick-view / product-page
 *
 * options - Type: string. Desc: a json containing the options selected for the product
 *
 * origin - Type: string. Desc: add to cart button / gallery / product-widget
 *
 * owner_id - Type: guid. Desc: id of site's owner. since june 2019
 *
 * productId - Type: string. Desc: product_guid
 *
 * productType - Type: string. Desc: Digital/ Physical
 *
 * rank - Type: numeric. Desc: the rank of the product that was clicked
 *
 * storeId - Type: guid. Desc: store_id
 *
 * viewMode - Type: string. Desc: editor / site / preview
 * @param {clickAddToCartWithOptionsSfParams} params The parameters for this event.
 * @return {Object} LogObject
**/
export var clickAddToCartWithOptionsSf = function(params) {
    return {
        evid: 248,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
};
//# sourceMappingURL=index.js.map