import {
    __assign
} from "tslib";
import {
    legacyBlog,
    slugRegex
} from '../../../constants';
import {
    resolveMappingVariables
} from '../../resolve-mapping-variables';
import {
    getMatchedMappingIndex
} from '../../../get-matched-mapping';
import {
    getUrlMapping
} from '../../..';
import {
    UrlMappingsKeys
} from '../../../constants/verticals/url-mappings-keys';
export var legacyBlogUrlChecker = function(urlMappings, url) {
    if (urlMappings === void 0) {
        urlMappings = {
            main: []
        };
    }
    var mapping = (getUrlMapping(urlMappings, UrlMappingsKeys.BLOG_POST) || {}).mapping;
    if (!(mapping === null || mapping === void 0 ? void 0 : mapping.includes(legacyBlog.basicSlug))) {
        return;
    }
    var legacyUrlRegexes = legacyBlog.regexes.map(function(legacyRegex) {
        return mapping.replace(slugRegex, legacyRegex);
    });
    var index = getMatchedMappingIndex(legacyUrlRegexes, url);
    if (index < 0) {
        return;
    }
    var matchedMapping = mapping.replace(slugRegex, legacyBlog.mappings[index]);
    var urlSegments = resolveMappingVariables(matchedMapping, url);
    var slugSegments = legacyBlog.slugSegments
        .map(function(slugPart) {
            return urlSegments[slugPart];
        })
        .filter(function(x) {
            return x;
        });
    var slug = slugSegments.join('/');
    var dateSegments = Object.keys(urlSegments).reduce(function(segments, key) {
        if (!legacyBlog.slugSegments.includes(key)) {
            segments[key] = urlSegments[key];
        }
        return segments;
    }, {});
    return __assign(__assign({}, dateSegments), {
        slug: slug
    });
};
//# sourceMappingURL=legacy-blog-url-checker.js.map