import {
    getLegacyUrlSegments,
    resolveMappingVariables,
    getUrlPath,
    sortUrlMappingsSegments,
} from './utils';
import {
    getMatchedMapping
} from '.';
import {
    getUrlSegmentsValidators
} from './param-validators/get-url-segments-validators';
/**
 *
 * Returns segments object for a given URL, after matching URL with given user's mappings
 *
 * IMPORTANT NOTE: ANY CHANGES APPLIED TO THIS LOGIC NEEDS TO BE SYNCED WITH VIEWER SERVER TEAM
 * AS HTML-RENDERER FOLLOWS THIS IMPLEMENTATION IN SCALA LANGUAGE. PLEASE CONTACT THE TEAM @ #viewer-server
 *
 * @param {UrlMappings} urlMappings - An object with key as type (default 'main') and array of Url Mapping as value
 * @param {String} url - A string that represent full location path e.g. https://domain.com/{{slug}}/shop , domain.com/{{id}} ,/cool/{{id}}/shop
 * @param {GetCustomizedUrlSegmentsOptions} [options] - Get Url Segments extra options and configurations
 * @return {GetCustomizedUrlSegmentsResponse} URL Segments - An object that represents the variables in the URL e.g. /my-store/{{product-name}} -> { key: 'wix.stores.sub_pages.product', segments: { 'product-name': 'cool-product' }}
 * @example <caption>Usage of the method</caption>
 *
 *
 * const urlMapping = {
 *       key: 'wix.stores.sub_pages.product',
 *       mapping: 'some-prefix/{{slug}}',
 *       pageIdentifier: 'product-page',
 *       pageIdentifierType: PageIdentifierType.tpaPageId
 * }
 *
 *
 * const urlMappings = {
 *  main: [urlMapping]
 * }
 *
 * getCustomizedUrlSegments(urlMappings, 'domain.com/my-shop/cool-watch');
 * // returns { key: 'wix.stores.sub_pages.product', slug: 'cool-watch' }
 *
 *
 **/
export var getCustomizedUrlSegments = function(urlMappings, url, options) {
    var _a;
    if (urlMappings === void 0) {
        urlMappings = {
            main: []
        };
    }
    if (options === void 0) {
        options = {};
    }
    var error = getUrlSegmentsValidators({
        url: url
    });
    if (error) {
        throw error;
    }
    var baseUrl = options.baseUrl;
    var urlPath = getUrlPath(url, baseUrl);
    var legacyUrlSegments = getLegacyUrlSegments(urlMappings, urlPath);
    if (legacyUrlSegments) {
        return legacyUrlSegments;
    }
    var sortedMappings = (_a = urlMappings === null || urlMappings === void 0 ? void 0 : urlMappings.main) === null || _a === void 0 ? void 0 : _a.map(function(urlMapping) {
        return urlMapping.mapping || '';
    }).sort(sortUrlMappingsSegments);
    var matchedMapping = getMatchedMapping(sortedMappings, urlPath);
    if (!matchedMapping) {
        return;
    }
    var key = urlMappings.main.find(function(item) {
        return item.mapping === matchedMapping;
    }).key;
    var segments = resolveMappingVariables(matchedMapping, urlPath);
    return {
        key: key,
        segments: segments
    };
};
//# sourceMappingURL=get-customized-url-segments.js.map