import {
    __assign,
    __read,
    __spreadArray
} from "tslib";
import {
    verticalsMapping
} from './verticals-mapping';
export var isSubMappingsKey = function(key) {
    return Object.values(getUrlMappingVariablesSchema()).some(function(schema) {
        var _a;
        return Boolean((_a = schema === null || schema === void 0 ? void 0 : schema.subMappings) === null || _a === void 0 ? void 0 : _a[key]);
    });
};
export var getUrlMappingVariablesSchema = function() {
    return Object.values(verticalsMapping).reduce(function(urlMappingKeysSchemaes, currentPageSchema) {
        return (__assign(__assign({}, urlMappingKeysSchemaes), currentPageSchema));
    }, {}) || {};
};
export var getUrlMappingVariablesSchemaByKey = function(key) {
    var schema = getUrlMappingVariablesSchema()[key];
    if (!schema && isSubMappingsKey(key)) {
        console.warn("You cannot get variables schema for subMappings key (".concat(key, ")."));
    }
    return schema;
};
export var getTpaPageIdByUrlMappingKey = function(key) {
    return Object.entries(verticalsMapping)
        .filter(function(_a) {
            var _b = __read(_a, 2),
                urlMappingsSchema = _b[1];
            return Object.keys(urlMappingsSchema).includes(key);
        })
        .map(function(_a) {
            var _b = __read(_a, 1),
                tpaPageId = _b[0];
            return tpaPageId;
        })[0];
};
export var getAllSubMappings = function() {
    return Object.values(getUrlMappingVariablesSchema()).reduce(function(obj, schema) {
        return (__assign(__assign({}, obj), schema === null || schema === void 0 ? void 0 : schema.subMappings));
    }, {});
};
export var getSubMappingsByUrlMappingKey = function(key) {
    var _a, _b;
    return ((_b = (_a = getUrlMappingVariablesSchema()) === null || _a === void 0 ? void 0 : _a[key]) === null || _b === void 0 ? void 0 : _b.subMappings) || {};
};
export var getMainUrlMappingSchemaBySubMappingKey = function(key) {
    return Object.entries(getUrlMappingVariablesSchema()).find(function(_a) {
        var _b;
        var _c = __read(_a, 2),
            _ = _c[0],
            schema = _c[1];
        return Boolean((_b = schema === null || schema === void 0 ? void 0 : schema.subMappings) === null || _b === void 0 ? void 0 : _b[key]);
    });
};
export var getSubMapping = function(key) {
    var _a, _b, _c;
    return (_c = (_b = (_a = getMainUrlMappingSchemaBySubMappingKey(key)) === null || _a === void 0 ? void 0 : _a[1]) === null || _b === void 0 ? void 0 : _b.subMappings) === null || _c === void 0 ? void 0 : _c[key];
};
export var getRequiredVariables = function(key) {
    var _a, _b, _c;
    var required = [];
    var isSubMapping = isSubMappingsKey(key);
    if (isSubMapping) {
        var _d = __read(getMainUrlMappingSchemaBySubMappingKey(key), 2),
            _1 = _d[0],
            schema = _d[1];
        required.push.apply(required, __spreadArray(__spreadArray([], __read(((schema === null || schema === void 0 ? void 0 : schema.required) || [])), false), __read((((_b = (_a = schema === null || schema === void 0 ? void 0 : schema.subMappings) === null || _a === void 0 ? void 0 : _a[key]) === null || _b === void 0 ? void 0 : _b.required) || [])), false));
    } else {
        required.push.apply(required, __spreadArray([], __read((((_c = getUrlMappingVariablesSchemaByKey(key)) === null || _c === void 0 ? void 0 : _c.required) || [])), false));
    }
    return required;
};
//# sourceMappingURL=vertical-mappings-utils.js.map