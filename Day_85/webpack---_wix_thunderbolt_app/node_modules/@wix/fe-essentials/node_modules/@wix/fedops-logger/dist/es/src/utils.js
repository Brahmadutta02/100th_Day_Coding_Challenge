import {
    env
} from './env';
export var generateGuid = function generateGuid() {
    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
        var r = Math.random() * 16 | 0,
            v = c === 'x' ? r : r & 0x3 | 0x8; // eslint-disable-line

        return v.toString(16);
    });
};
var phaseNameExtractor = /\[fedops] phase:([^ ]+) ([^ ]+) ?(.*) (started|finished)/;
export var getPhaseMark = function getPhaseMark(markName) {
    var matches = phaseNameExtractor.exec(markName);

    if (matches) {
        return {
            phaseName: matches[1],
            appId: matches[2],
            widgetId: matches[3]
        };
    }
};
var interactionNameExtractor = /\[fedops] ([^ ]+) interaction ([^ ]+) (started|ended)/;
export var getInteractionMark = function getInteractionMark(markName) {
    var matches = interactionNameExtractor.exec(markName);

    if (matches) {
        return {
            appName: matches[1],
            interactionName: matches[2]
        };
    }
};
export var getPathnameTemplate = function getPathnameTemplate(pathname) {
    if (isNumber(pathname)) {
        return ':param';
    }

    return pathname;
};

var isNumber = function isNumber(str) {
    return !isNaN(parseFloat(str)) && isFinite(str);
};

export var extractUrl = function extractUrl(url) {
    var parsedUrl;

    try {
        parsedUrl = new URL(url);
        return parsedUrl;
    } catch (e) {
        var _env$location$origin, _env, _env$location;

        return {
            pathname: url,
            origin: (_env$location$origin = (_env = env()) == null ? void 0 : (_env$location = _env.location) == null ? void 0 : _env$location.origin) != null ? _env$location$origin : ''
        };
    }
};