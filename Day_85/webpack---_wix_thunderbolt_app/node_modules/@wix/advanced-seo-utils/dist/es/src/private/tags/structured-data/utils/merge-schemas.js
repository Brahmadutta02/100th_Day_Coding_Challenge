var __assign = (this && this.__assign) || function() {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s)
                if (Object.prototype.hasOwnProperty.call(s, p))
                    t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function(s, e) {
    var t = {};
    for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
            t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
export var mergeSchemas = function(newSchema, _a) {
    if (_a === void 0) {
        _a = {};
    }
    var disabled = _a.disabled,
        existingSchema = __rest(_a, ["disabled"]);
    return (__assign(__assign(__assign({}, existingSchema), ((newSchema === null || newSchema === void 0 ? void 0 : newSchema.disabled) !== undefined ?
        {
            disabled: newSchema.disabled
        } :
        {})), {
        children: !(newSchema === null || newSchema === void 0 ? void 0 : newSchema.disabled) ?
            newSchema === null || newSchema === void 0 ? void 0 : newSchema.children :
            existingSchema === null || existingSchema === void 0 ? void 0 : existingSchema.children
    }));
};