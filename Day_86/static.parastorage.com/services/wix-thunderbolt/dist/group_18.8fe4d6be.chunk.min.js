"use strict";
(self.webpackJsonp__wix_thunderbolt_app = self.webpackJsonp__wix_thunderbolt_app || []).push([
    [4825], {
        36487: function(e, t, n) {
            n.r(t), n.d(t, {
                name: function() {
                    return f.t
                },
                namespace: function() {
                    return f.u
                },
                page: function() {
                    return m
                }
            });
            var i = n(5096),
                a = n(59032),
                o = n(31191),
                r = n(43757),
                s = n(27227),
                p = n(32979),
                d = n(11717),
                l = n(44263),
                u = n(25438);
            const c = async (e, t, n) => {
                    const i = (e => {
                        const t = e.map((e => document.getElementById(e))).filter((e => e));
                        return t.length === e.length && Promise.resolve(t)
                    })(e);
                    if (i) return i;
                    const a = Promise.all(e.map((e => t.waitForComponentToRender(e)))),
                        {
                            promise: o,
                            resolver: r
                        } = (0, l.w)(),
                        s = setTimeout((() => {
                            n.captureError(new Error("can not get element(s) from DOM"), {
                                tags: {
                                    feature: "feature-animations-wix-code-sdk"
                                },
                                extra: {
                                    compIds: e
                                }
                            }), r([])
                        }), 2e3),
                        p = await Promise.race([a, o]);
                    return clearTimeout(s), p
                },
                g = (0, r.ff)([s.l, (0, r.jt)(d.FK), p.C, i.EE], ((e, t, n, i) => {
                    let a;
                    const r = new Promise((e => {
                            a = e
                        })),
                        s = {},
                        p = {},
                        d = {},
                        l = () => Promise.all([t.getInstance(), r]),
                        g = e => Promise.all(p[e]);
                    return {
                        getSdkHandlers: () => ({
                            createTimeline: async (e, t) => {
                                const [n] = await l();
                                p[e] = [], s[e] = n.createSequence(Object.assign(Object.assign({}, t), {
                                    data: {
                                        id: e
                                    }
                                }))
                            },
                            addToTimeline: async (e, t, a, r) => {
                                const [d] = await l(), u = s[e];
                                if (u) {
                                    const s = c(t, n, i);
                                    p[e].push(s);
                                    const l = await s;
                                    if (l.length) {
                                        const e = e => {
                                            var {
                                                duration: t = 0,
                                                delay: n = 0
                                            } = e, i = (0, o._T)(e, ["duration", "delay"]);
                                            return d.createAnimationFromParams("TimelineAnimation", l, t, n, i)
                                        };
                                        u.add(a.map(e), r)
                                    }
                                }
                            },
                            playTimeline: async e => {
                                await l(), await g(e);
                                const t = s[e];
                                t && t.play()
                            },
                            pauseTimeline: async e => {
                                await l(), await g(e);
                                const t = s[e];
                                t && t.pause()
                            },
                            seekTimeline: async (e, t) => {
                                await l(), await g(e);
                                const n = s[e];
                                n && n.seek(t)
                            },
                            reverseTimeline: async e => {
                                await l(), await g(e);
                                const t = s[e];
                                t && t.reverse()
                            },
                            onStartTimeline: async e => {
                                await l();
                                const t = s[e];
                                t && t.event("onStart", (() => {
                                    d[e].onStart()
                                }))
                            },
                            onCompleteTimeline: async e => {
                                await l();
                                const t = s[e];
                                t && t.event("onComplete", (() => {
                                    d[e].onComplete()
                                }))
                            },
                            onRepeatTimeline: async e => {
                                await l();
                                const t = s[e];
                                t && t.event("onRepeat", (() => {
                                    d[e].onRepeat()
                                }))
                            },
                            onReverseCompleteTimeline: async e => {
                                await l();
                                const t = s[e];
                                t && t.event("onReverseComplete", (() => {
                                    d[e].onReverseComplete()
                                }))
                            },
                            registerTimelineEvent: (e, t, n) => {
                                d[t] || (d[t] = {}), d[t][n] = e
                            },
                            showHiddenComponents: t => {
                                const n = (0, u.j)({
                                        isResponsive: !1
                                    }),
                                    i = t.reduce(((e, t) => Object.assign(Object.assign({}, e), {
                                        [t]: n.getShownStyles()
                                    })), {});
                                e.update(i)
                            }
                        }),
                        pageDidMount: () => {
                            a()
                        },
                        pageDidUnmount: () => {
                            t.getInstance().then((e => {
                                Object.keys(s).forEach((t => {
                                    e.kill(s[t].timeline), delete s[t]
                                }))
                            }))
                        }
                    }
                }));
            var f = n(83203);
            const m = e => {
                e(i.CT, a.j.PageDidMountHandler, a.j.PageDidUnmountHandler).to(g)
            }
        },
        71160: function(e, t, n) {
            n.r(t), n.d(t, {
                AuthenticationApiSymbol: function() {
                    return o._f
                },
                CAPTCHA_ERROR_CODES: function() {
                    return s.NU
                },
                ERROR_CODES: function() {
                    return s.O1
                },
                dialogFeatureName: function() {
                    return o.nR
                },
                name: function() {
                    return o.u2
                },
                namespace: function() {
                    return o.uD
                },
                page: function() {
                    return l
                }
            });
            var i = n(5096),
                a = n(43757),
                o = n(51390);
            const r = (0, a.ff)([o._f], (({
                openCaptchaDialog: e,
                withCaptchaChallengeHandler: t
            }) => ({
                getSdkHandlers: () => ({
                    [o.u2]: {
                        openCaptchaDialog: e,
                        withCaptchaChallengeHandler: t
                    }
                })
            })));
            var s = n(21511),
                p = n(94315);
            const d = (0, a.ff)([p.C, i.bk], ((e, t) => {
                    const n = (0, s.yT)({
                        captcha: e,
                        userLanguage: t.userLanguage
                    });
                    return {
                        openCaptchaDialog: n,
                        withCaptchaChallengeHandler: (0, s.aG)({
                            openCaptchaDialog: n
                        })
                    }
                })),
                l = e => {
                    e(o._f).to(d), e(i.CT).to(r)
                }
        },
        39162: function(e, t, n) {
            n.r(t), n.d(t, {
                editorPage: function() {
                    return s
                },
                name: function() {
                    return o.t
                },
                namespace: function() {
                    return o.u
                },
                page: function() {
                    return r
                }
            });
            var i = n(5096);
            const a = (0, n(43757).ff)([i.EE], (e => ({
                getSdkHandlers: () => ({
                    fedopsWixCodeSdk: {
                        registerWidgets: t => {
                            e.registerPlatformWidgets(t)
                        }
                    }
                })
            })));
            var o = n(42023);
            const r = e => {
                    e(i.CT).to(a)
                },
                s = e => {
                    e(i.CT).to(a)
                }
        },
        12884: function(e, t, n) {
            n.r(t), n.d(t, {
                NavigationSymbol: function() {
                    return u.q
                },
                editor: function() {
                    return h
                },
                page: function() {
                    return m
                }
            });
            var i = n(43757),
                a = n(5096),
                o = n(55048),
                r = n(61049),
                s = n(21691),
                p = n(19238),
                d = n(86305),
                l = n(47399),
                u = n(60091);
            const c = (0, i.ff)([a.ZQ, p.F0, p.Iz, l.Od, o.QZ, p.BC, (0, i.t6)(r.z8, u.u), (0, i.jt)(d.cC)], ((e, t, n, i, a, {
                shouldNavigate: o
            }, r, p) => {
                const d = async (a, r) => {
                    if (!o(a)) return !1;
                    const {
                        href: d,
                        target: l,
                        linkPopupId: u,
                        anchorDataId: c,
                        anchorCompId: g,
                        type: f
                    } = a;
                    if (u) return p.open(u), !0;
                    if ("DocumentLink" === f || "PhoneLink" === f || "EmailLink" === f || "ExternalLink" === f) return e.open(d, l), !0;
                    if (!t.isInternalValidRoute(d)) return !1;
                    if (n.getFullUrlWithoutQueryParams() !== d && await t.navigate(d, Object.assign({
                            anchorDataId: c
                        }, r))) return !0;
                    if (g || c) return g && !e.document.getElementById(g) || i.scrollToAnchor({
                        anchorCompId: g,
                        anchorDataId: c
                    }), !1;
                    if (d) {
                        const e = n.getParsedUrl();
                        e.search = (0, s.h)(e.searchParams);
                        const {
                            searchParams: t
                        } = new URL(d, e.origin);
                        return t.forEach(((t, n) => null == e ? void 0 : e.searchParams.set(n, t))), n.pushUrlState(e), (null == p ? void 0 : p.getCurrentLightboxId()) ? (null == p || p.close(), !1) : ((null == r ? void 0 : r.disableScrollToTop) || i.scrollToAnchor({
                            anchorDataId: "SCROLL_TO_TOP"
                        }), !1)
                    }
                    return !1
                };
                return r.export({
                    navigateTo: d
                }), {
                    navigateTo: d
                }
            }));
            var g = n(8562);
            const f = (0, i.ff)([a.ZQ], (e => ({
                    shouldNavigate: () => !(0, g.yF)(e)
                }))),
                m = e => {
                    e(u.q).to(c), e(p.BC).to(f)
                },
                h = e => {
                    e(u.q).to(c)
                }
        },
        36878: function(e, t, n) {
            n.r(t), n.d(t, {
                OoiTpaSharedConfigSymbol: function() {
                    return o.i
                },
                editorPage: function() {
                    return p
                },
                page: function() {
                    return s
                }
            });
            var i = n(43757),
                a = n(61049),
                o = n(24548);
            const r = (0, i.ff)([(0, i.t6)(a.R9, o.u), (0, i.t6)(a.jC, o.u)], (({
                    wixStaticFontsLinks: e,
                    imageSpriteUrl: t
                }, {
                    fontsMeta: n
                }) => ({
                    getFontsConfig() {
                        return {
                            cssUrls: e,
                            fontsMeta: n,
                            imageSpriteUrl: t
                        }
                    }
                }))),
                s = e => {
                    e(o.i).to(r)
                },
                p = s
        },
        9605: function(e, t, n) {
            n.r(t), n.d(t, {
                PageScrollRegistrarSymbol: function() {
                    return a.r
                },
                name: function() {
                    return p.u
                },
                page: function() {
                    return g
                }
            });
            var i = n(59032),
                a = n(44041),
                o = n(43757),
                r = n(61049),
                s = n(5096),
                p = n(13774),
                d = n(16684),
                l = n.n(d),
                u = n(86305);
            const c = (0, o.ff)([(0, o.t6)(r.Wf, p.u), s.ZQ, (0, o.jt)(u.cC)], ((e, t, n) => {
                    const i = [],
                        a = [],
                        o = l().throttle((e => {
                            a.forEach((t => t(e)))
                        }), 100),
                        r = e => {
                            a.length > 0 && (e => {
                                var t, n;
                                const i = e.currentTarget,
                                    a = {
                                        x: null !== (t = i.pageXOffset) && void 0 !== t ? t : i.scrollLeft,
                                        y: null !== (n = i.pageYOffset) && void 0 !== n ? n : i.scrollTop
                                    };
                                o(a)
                            })(e), i.forEach((t => t(e)))
                        };
                    return {
                        registerToThrottledScroll(e) {
                            a.push(e)
                        },
                        registerToScroll(e) {
                            i.push(e)
                        },
                        async pageDidUnmount() {
                            t && t.removeEventListener("scroll", r)
                        },
                        async pageDidMount(e) {
                            n && n.isLightbox(e) ? n.registerToLightboxEvent("popupScroll", r) : t && t.addEventListener("scroll", r)
                        }
                    }
                })),
                g = e => {
                    e(i.j.PageDidMountHandler, i.j.PageDidUnmountHandler, a.r).to(c)
                }
        },
        70846: function(e, t, n) {
            n.r(t), n.d(t, {
                PlatformPubsubSymbol: function() {
                    return a.H
                },
                TPA_PUB_SUB_PREFIX: function() {
                    return i.$E
                },
                editorPage: function() {
                    return u
                },
                name: function() {
                    return a.u
                },
                page: function() {
                    return l
                },
                stripPubSubPrefix: function() {
                    return i.$H
                }
            });
            var i = n(12073),
                a = n(21568),
                o = n(5096),
                r = n(59032),
                s = n(43757);
            const p = (0, s.ff)([a.H], (e => ({
                    getSdkHandlers: () => ({
                        publish(t, n, i, a) {
                            e.publish(t, "worker", {
                                eventKey: n,
                                isPersistent: a,
                                eventData: i
                            })
                        },
                        subscribe(t, n, i, a) {
                            e.subscribe(t, "worker", {
                                eventKey: n,
                                isPersistent: a
                            }, i)
                        },
                        unsubscribe(t, n) {
                            e.unsubscribe(t, "worker", n)
                        }
                    })
                }))),
                d = (0, s.ff)([a.H], (e => ({
                    pageWillUnmount() {
                        e.clearListenersBesideStubs()
                    }
                }))),
                l = e => {
                    e(a.H).to(i.Xr), e(o.CT).to(p), e(r.j.PageWillUnmountHandler).to(d)
                },
                u = l
        },
        12073: function(e, t, n) {
            n.d(t, {
                $E: function() {
                    return s
                },
                $H: function() {
                    return p
                },
                Xr: function() {
                    return d
                }
            });
            var i = n(43757),
                a = n(5096),
                o = n(98118);
            const r = {},
                s = "TPA_PUB_SUB_";

            function p(e) {
                const t = new RegExp(`^${s}`);
                return e.replace(t, "")
            }
            const d = (0, i.ff)([a.ZQ, o.ku], ((e, t) => {
                function n(e, t) {
                    const n = {
                        persistentData: [],
                        listeners: {}
                    };
                    return r[e] ? r[e][t] || (r[e][t] = n) : r[e] = {
                        [t]: n
                    }, r[e][t]
                }

                function i(e) {
                    Object.keys(r).forEach((t => {
                        Object.keys(r[t]).forEach((i => {
                            const a = n(t, i);
                            Object.entries(a.listeners).forEach((([t, n]) => {
                                Object.keys(n).forEach((n => {
                                    e(n, t) && delete a.listeners[t][n]
                                }))
                            }))
                        }))
                    }))
                }
                return {
                    publish(e, t, i) {
                        const a = p(i.eventKey),
                            o = i.isPersistent,
                            r = n(e, a),
                            s = r.listeners;
                        if (Object.entries(s).forEach((([e, n]) => Object.keys(n).forEach((n => {
                                s[e][n].forEach((e => e({
                                    data: i.eventData,
                                    name: a,
                                    origin: t
                                })))
                            })))), o) {
                            const e = i.eventData;
                            r.persistentData.push({
                                name: a,
                                data: e
                            })
                        }
                    },
                    subscribe(e, i, a, o) {
                        const r = p(a.eventKey),
                            s = n(e, r);
                        s.listeners[t] || (s.listeners[t] = {}), s.listeners[t][i] ? "worker" === i && s.listeners[t][i].push(o) : s.listeners[t][i] = [o], a.isPersistent && s.persistentData.length && o({
                            data: s.persistentData[0].data,
                            name: r,
                            origin: i
                        }, !0)
                    },
                    unsubscribe(e, t, i) {
                        const a = n(e, p(i));
                        Object.keys(a.listeners).forEach((e => {
                            delete a.listeners[e][t]
                        }))
                    },
                    handleIframeSubscribe(t, n, {
                        eventKey: i,
                        isPersistent: a,
                        callId: o
                    }) {
                        this.subscribe(t, n, {
                            eventKey: i,
                            isPersistent: a
                        }, ((t, a = !1) => {
                            ! function(e, t, n) {
                                const i = n.document.getElementById(e);
                                if (!i) return;
                                const a = i.getElementsByTagName("iframe")[0];
                                a && a.contentWindow && a.contentWindow.postMessage(JSON.stringify(t), "*")
                            }(n, a ? {
                                intent: "TPA_RESPONSE",
                                callId: o,
                                type: "registerEventListener",
                                res: {
                                    drain: !0,
                                    data: [t]
                                },
                                status: !0,
                                compId: n
                            } : {
                                eventType: i,
                                intent: "addEventListener",
                                params: t
                            }, e)
                        }))
                    },
                    clearListenersBesideStubs() {
                        i(((e, n) => !e.includes("tpapopup") && !e.includes("tpaWorker") && n === t && "masterPage" !== n))
                    },
                    clearListenersByCompId(e) {
                        i((t => t === e))
                    }
                }
            }))
        },
        4308: function(e, t, n) {
            n.r(t), n.d(t, {
                page: function() {
                    return y
                },
                site: function() {
                    return w
                }
            });
            var i, a = n(43757),
                o = n(61049),
                r = n(77747);
            ! function(e) {
                e.SM = "SM", e.Pass = "PASS", e.NONE = "NONE"
            }(i || (i = {}));
            const s = (0, a.ff)([(0, a.t6)(o.jC, r.u), (0, a.t6)(o.R9, r.u), (0, a.t6)(o.Wf, r.u)], ((e, t, n) => ({
                async handle(a) {
                    if (a.pageJsonFileName) return a;
                    const o = a.pageId,
                        {
                            pagesMap: r,
                            loginAndNavigate: s
                        } = n.get();
                    if (r[o]) return Object.assign(Object.assign({}, a), {
                        pageJsonFileName: r[o]
                    });
                    const p = (n => {
                        const a = e.pagesSecurity[n];
                        return a && a.requireLogin ? i.SM : t.passwordProtected[n] || a && a.passwordDigest ? i.Pass : i.NONE
                    })(o);
                    return p === i.NONE && ((e, t) => {
                        throw new Error(`we do not have authentication info for protected page ${e} page security: ${t}`)
                    })(o, e.pagesSecurity[o]), s(a, p), null
                }
            })));
            var p = n(19238),
                d = n(95848),
                l = n(2811),
                u = n(27531),
                c = n(26513),
                g = n(5096),
                f = n(82627);
            const m = (0, a.ff)([(0, a.t6)(o.Wf, r.u), (0, a.t6)(o.R9, r.u), (0, a.t6)(o.jC, r.u), p.F0, c.jj, (0, a.jt)(l.n9), (0, a.jt)(u.RC), g.EE, f.O], ((e, {
                publicPageIds: t
            }, {
                customNoPermissionsPageUrl: n,
                customNoPermissionsPageId: a
            }, o, r, s, p, l, u) => {
                const c = async (e, t) => e === i.SM ? (async () => {
                        let e;
                        if (s)
                            if (u["specs.thunderbolt.newAuthorizedPagesFlow"]) {
                                if (e = await s.requestAuthorizedPages(), e.success) return {
                                    authorizedPagesMap: e.pages
                                }
                            } else if (e = await s.requestAuthentication({}), e.success) return {
                            authorizedPagesMap: await s.authorizeMemberPagesByToken(e.token)
                        };
                        return {
                            authorizedPagesMap: {},
                            authenticationResult: e
                        }
                    })() : (async e => p ? p.promptPasswordDialog(e) : {
                        authorizedPagesMap: {}
                    })(t),
                    g = async (e, t, i = !1) => {
                        if (n && i) return o.navigate(`${n}?appSectionParams={"restrictedPageId":"${e}"}`);
                        if (s && "SM" === t) {
                            const e = () => {
                                r.isLandingOnProtectedPage() && o.navigate("./")
                            };
                            return s.showNoPermissionsToPageDialog(e), !1
                        }
                        return !!r.isLandingOnProtectedPage() && o.navigate("./")
                    },
                    f = async (n, i) => {
                        const s = n.pageId;
                        try {
                            const {
                                authorizedPagesMap: p,
                                authenticationResult: l
                            } = await c(i, s);
                            if (e.update((e => Object.assign(Object.assign({}, e), {
                                    pagesMap: Object.assign(e.pagesMap, p)
                                }))), (null == l ? void 0 : l.reason) === d.$9.CANCELED) return !!r.isLandingOnProtectedPage() && o.navigate("./");
                            if (p[s]) return o.navigate(n.parsedUrl.href); {
                                const e = t.includes(a),
                                    n = !!p[a];
                                return g(s, i, e || n)
                            }
                        } catch (e) {
                            return l.captureError(e, {
                                tags: {
                                    feature: "protectedPage"
                                }
                            }), g(s, i)
                        }
                    };
                return e.update((() => ({
                    loginAndNavigate: f,
                    pagesMap: {}
                }))), {
                    appWillMount: async () => {}
                }
            }));
            var h = n(59032),
                I = n(95793);
            const P = (0, a.ff)([(0, a.t6)(o.Wf, r.u), l.n9], ((e, t) => ({
                    getTpaHandlers() {
                        return {
                            authorizeMemberPages: async () => {
                                const n = await t.authorizeMemberPagesByCookie();
                                e.update((e => Object.assign(Object.assign({}, e), {
                                    pagesMap: Object.assign(Object.assign({}, e.pagesMap), n)
                                })))
                            }
                        }
                    }
                }))),
                w = e => {
                    e(p.BD.Protected).to(s), e(h.j.AppWillMountHandler).to(m)
                },
                y = e => {
                    e(I.go).to(P)
                }
        },
        37968: function(e, t, n) {
            n.r(t), n.d(t, {
                SiteMapSymbol: function() {
                    return d.Cc
                },
                TpaEventsListenerManagerSymbol: function() {
                    return d.PV
                },
                TpaFullScreenModeSymbol: function() {
                    return d.u5
                },
                TpaModalSymbol: function() {
                    return d.R3
                },
                TpaPopupSymbol: function() {
                    return a.jn
                },
                TpaSymbol: function() {
                    return d.e4
                },
                name: function() {
                    return d.u2
                },
                page: function() {
                    return _t
                }
            });
            var i = n(59032),
                a = n(95793),
                o = n(5096),
                r = n(43757),
                s = n(61049),
                p = n(55048),
                d = n(7259),
                l = n(20140),
                u = n(3744),
                c = n(37793),
                g = n(54163),
                f = n(69873);
            const m = (0, r.ff)([(0, r.t6)(s.R9, l.u2), (0, r.t6)(s.$e, d.u2), (0, r.fi)(a.go), p.xP, o.ZQ, o.Zr, (0, r.jt)(g.m), (0, r.jt)(c.KO)], ((e, t, n, i, a, {
                mode: {
                    debug: o
                }
            }, r, s) => {
                const {
                    appsClientSpecMapData: p
                } = e, d = ({
                    tpa: e,
                    origin: n,
                    callId: i,
                    status: a,
                    res: o,
                    compId: r
                }) => {
                    const p = {
                        callId: i,
                        intent: "TPA_RESPONSE",
                        status: a,
                        res: o
                    };
                    s && s.tpa.addMessage({
                        message: p,
                        compId: r,
                        contextId: t.pageId,
                        origin: n
                    }), e.postMessage(JSON.stringify(p), "*")
                }, l = Object.assign({}, ...n.map((e => e.getTpaHandlers())));
                return {
                    async handleMessage({
                        source: n,
                        origin: a,
                        message: s
                    }) {
                        const {
                            type: c,
                            callId: g,
                            compId: m,
                            data: h,
                            deviceType: I,
                            originFrame: P
                        } = s, w = (e => {
                            var t, n;
                            const a = (null === (t = i.get(e)) || void 0 === t ? void 0 : t.src) || (null === (n = i.get(e)) || void 0 === n ? void 0 : n.url);
                            return a ? new URL(a) : null
                        })(m);
                        if ("https://static.parastorage.com" !== a && !((e, t) => (null == e ? void 0 : e.origin) === t)(w, a) && !(e => "https://editor.wix.com" === e || "https://create.editorx.com" === e || "https://blocks.wix.com" === e)(a)) return void(o && console.warn("discarded tpa message: untrusted origin", {
                            origin: a,
                            message: s
                        }));
                        const y = l[c];
                        if (!y) return void(o && console.warn(`TpaHandlerError: ${c} handler is not implemented`));
                        const v = u.O.getOriginCompId(m),
                            T = t.widgets[v],
                            b = null == r ? void 0 : r.isTpaWorker(m),
                            C = b ? r.getWorkerDetails(m) : null,
                            S = b ? C.appDefinitionId : null == T ? void 0 : T.appDefinitionId,
                            D = y(m, h, {
                                callId: g,
                                tpa: n,
                                appDefinitionId: S,
                                tpaCompData: T,
                                appClientSpecMapData: p[S],
                                originCompId: v,
                                viewMode: e.viewMode
                            });
                        if (void 0 !== D) try {
                            const e = await D;
                            if (e === f.rV) return;
                            d({
                                tpa: n,
                                origin: a,
                                callId: g,
                                compId: m,
                                status: !0,
                                res: e
                            })
                        } catch (e) {
                            const {
                                message: t,
                                name: i,
                                stack: o
                            } = e;
                            d({
                                tpa: n,
                                origin: a,
                                callId: g,
                                compId: m,
                                status: !1,
                                res: {
                                    error: {
                                        message: t,
                                        name: i,
                                        stack: o
                                    }
                                }
                            })
                        }
                    }
                }
            }));
            var h = n(29203);
            const I = (0, r.ff)([(0, r.t6)(s.$e, d.u2), h.e, d.PV], ((e, t, n) => {
                    const i = t => {
                        Object.entries(e.widgets).forEach((e => {
                            n.dispatch("CONSENT_POLICY_UPDATE", (() => t), {
                                compId: e[0]
                            })
                        }))
                    };
                    return {
                        pageDidMount() {
                            return t.registerToChanges(i)
                        }
                    }
                })),
                P = ({
                    tpaModal: e,
                    tpaPopup: t,
                    compId: n = "",
                    onCloseMessage: i
                }) => {
                    t.isPopup(n) ? t.closePopup(n, i) : e.closeModal(i)
                },
                w = (0, r.ff)([d.R3, a.jn], ((e, t) => ({
                    getTpaHandlers() {
                        return {
                            onEscapeClicked: n => {
                                P({
                                    tpaModal: e,
                                    tpaPopup: t,
                                    compId: n
                                })
                            }
                        }
                    }
                })));
            var y = n(50287);
            const v = (0, r.ff)([(0, r.t6)(s.R9, l.u2), (0, r.jt)(y.d)], (({
                    externalBaseUrl: e
                }, t) => ({
                    getTpaHandlers() {
                        return {
                            async getCustomizedUrlSegments(i, a) {
                                const {
                                    url: o,
                                    options: r
                                } = a, s = null == t ? void 0 : t.urlMappings, {
                                    getCustomizedUrlSegments: p
                                } = await n.e(862).then(n.bind(n, 47194));
                                return p(s, o, Object.assign({
                                    baseUrl: e
                                }, r))
                            }
                        }
                    }
                }))),
                T = (0, r.ff)([(0, r.t6)(s.R9, l.u2), (0, r.jt)(y.d)], (({
                    externalBaseUrl: e
                }, t) => ({
                    getTpaHandlers() {
                        return {
                            async buildCustomizedUrl(i, a) {
                                const {
                                    key: o,
                                    itemData: r,
                                    options: s
                                } = a, p = null == t ? void 0 : t.urlMappings, {
                                    buildCustomizedUrl: d
                                } = await n.e(862).then(n.bind(n, 47194));
                                return d(p, o, r, Object.assign({
                                    baseUrl: e
                                }, s))
                            }
                        }
                    }
                })));
            var b = n(16684),
                C = n.n(b),
                S = n(64639),
                D = n(19238),
                O = n(86305),
                E = n(88902);
            const M = (0, r.ff)([(0, r.t6)(s.R9, l.u2), (0, r.t6)(s.$e, d.u2), (0, r.t6)(s.jC, d.u2), D.kc, (0, r.jt)(O.rW), (0, r.jt)(E.HC)], ((e, t, n, i, a, o) => ({
                    getTpaHandlers() {
                        return {
                            getStateUrl(r, s, {
                                originCompId: p
                            }) {
                                const {
                                    metaSiteId: d,
                                    userFileDomainUrl: l,
                                    routersConfig: u,
                                    appsClientSpecMapByApplicationId: c,
                                    externalBaseUrl: g,
                                    isMobileView: f,
                                    isPremiumDomain: m,
                                    experiments: h
                                } = e, I = (0, S.b)({
                                    routingInfo: i.getLinkUtilsRoutingInfo(),
                                    metaSiteId: d,
                                    userFileDomainUrl: l,
                                    routersConfig: u,
                                    popupPages: null == a ? void 0 : a.getLightboxPages(),
                                    multilingualInfo: null == o ? void 0 : o.getMultilingualInfo(),
                                    isMobileView: f,
                                    isPremiumDomain: m,
                                    experiments: h
                                }), P = C()(n.pagesData).groupBy("tpaApplicationId").mapValues((e => e.map((e => e.id)))).value(), w = Object.entries(n.pagesData).map((([e, t]) => ({
                                    [t.tpaPageId]: e
                                }))).reduce(C().assign), {
                                    state: y,
                                    sectionId: v
                                } = s, T = (b = p, t.widgets[b].applicationId);
                                var b;
                                const D = c[T],
                                    O = P[T];
                                if (!O || 0 === O.length) return {
                                    error: {
                                        message: `Page with app "${D.appDefinitionName}" was not found.`
                                    }
                                };
                                const E = {
                                        type: "TpaPageLink",
                                        pageId: w[v] || O[0],
                                        path: y
                                    },
                                    M = I.getLinkUrlFromDataItem(E);
                                return I.isDynamicPage(M) ? {
                                    error: {
                                        message: "Can't retrieve url for a dynamic page. Please use the platform app API instead."
                                    }
                                } : {
                                    url: `${g}${M}`
                                }
                            }
                        }
                    }
                }))),
                R = (0, r.ff)([(0, r.t6)(s.$e, d.u2)], (({
                    widgets: e
                }) => ({
                    getTpaHandlers() {
                        return {
                            getStyleParamsByStyleId(t, n) {
                                const i = Object.values(e).find((e => e.styleId === n.styleId)),
                                    a = null == i ? void 0 : i.style;
                                return a ? Object.assign({}, a) : {
                                    error: {
                                        message: `Style id "${n.styleId}" was not found.`
                                    }
                                }
                            }
                        }
                    }
                })));
            var j = n(49574),
                A = n(56405),
                x = n(81600);
            const L = (0, r.ff)([o.Zr, (0, r.t6)(s.R9, l.u2), A.Xb, o.ZQ, j.U], ((e, {
                    externalBaseUrl: t
                }, n, i, a) => {
                    const o = e => Object.assign({
                            activityDetails: {
                                additionalInfoUrl: null,
                                summary: ""
                            },
                            activityInfo: "activityInfo",
                            activityType: "activityType",
                            contactUpdate: {},
                            activityLocationUrl: i.location.href,
                            createdAt: (new Date).toISOString()
                        }, e),
                        r = ((e, t) => n => {
                            const i = new URL(t);
                            return Object.entries(n.params).forEach((([e, t]) => {
                                t && i.searchParams.append(e, t)
                            })), e.envFetch(i.href, {
                                method: "POST",
                                body: JSON.stringify(n.payload),
                                headers: {
                                    "Content-Type": "application/json"
                                }
                            })
                        })(a, `${t}/_api/app-integration-bus-web/v1/activities`);
                    return {
                        getTpaHandlers() {
                            return {
                                postActivity: (0, x.u)(["site"], ((t, {
                                    activity: i
                                }, {
                                    appDefinitionId: a
                                }) => {
                                    var s;
                                    return (async e => {
                                        const t = await r(e);
                                        if (!t.ok) return {
                                            status: !1,
                                            response: {
                                                status: t.status,
                                                statusText: t.statusText,
                                                responseText: await t.text()
                                            }
                                        };
                                        const {
                                            userSessionToken: i,
                                            activityId: a,
                                            contactId: o
                                        } = await t.json();
                                        return i && n.setUserSession(i), {
                                            status: !0,
                                            response: {
                                                activityId: a,
                                                contactId: o
                                            }
                                        }
                                    })({
                                        params: (s = {
                                            "application-id": a || "TPA",
                                            instance: n.getAppInstanceByAppDefId(a)
                                        }, Object.assign({
                                            hs: n.getHubSecurityToken(),
                                            "activity-id": "xxxxxxxx".replace(/x/g, (() => (16 * Math.random() | 0).toString(16))),
                                            "metasite-id": e.site.metaSiteId,
                                            svSession: n.getUserSession(),
                                            version: "1.0.0"
                                        }, s)),
                                        payload: o({
                                            contactUpdate: i.contactUpdate || {},
                                            activityInfo: i.info || {},
                                            activityType: i.type || "TPA",
                                            activityDetails: i.details || {}
                                        })
                                    })
                                }))
                            }
                        }
                    }
                })),
                N = (0, r.ff)([A.Xb], (e => ({
                    getTpaHandlers() {
                        return {
                            getCtToken() {
                                return e.getCtToken()
                            },
                            getUserSession() {
                                return e.getUserSession()
                            }
                        }
                    }
                })));
            var k = n(26513);
            const U = (0, r.ff)([D.Iz, k.jj, (0, r.t6)(s.R9, l.u2)], ((e, t, {
                    routerByPrefix: n
                }) => ({
                    getTpaHandlers() {
                        return {
                            getCurrentPageNavigationInfo() {
                                const i = e.getRelativeUrl(),
                                    {
                                        type: a,
                                        pageId: o
                                    } = t.getCurrentRouteInfo();
                                if ("Static" === a) return {
                                    type: "PageLink",
                                    pageId: o
                                };
                                const [, r, ...s] = i.split("/");
                                return {
                                    type: "DynamicPageLink",
                                    routerId: n[r],
                                    innerRoute: s.join("/") || "/"
                                }
                            }
                        }
                    }
                }))),
                _ = (0, r.ff)([o.ZQ], (e => ({
                    getTpaHandlers() {
                        return {
                            getAdsOnPage() {
                                const t = e.document.getElementById("WIX_ADS");
                                if (!t) return {};
                                const {
                                    height: n,
                                    width: i,
                                    x: a,
                                    y: o
                                } = t.getBoundingClientRect();
                                return {
                                    top: {
                                        height: n,
                                        width: i,
                                        top: o,
                                        left: a
                                    }
                                }
                            }
                        }
                    }
                })));
            var H = n(96616),
                F = n(60091),
                $ = n(95100);
            const B = (0, r.ff)([(0, r.t6)(s.R9, l.u2), (0, r.t6)(s.$e, d.u2), o.Zr, k.jj, p.xP, F.q, d.PV, D.kc, (0, r.jt)(O.rW), (0, r.jt)($.Ai), (0, r.jt)(E.HC)], ((e, t, n, i, a, o, r, s, p, d, l) => ({
                getTpaHandlers() {
                    const n = (t = s.getLinkUtilsRoutingInfo()) => {
                            const {
                                metaSiteId: n,
                                userFileDomainUrl: i,
                                routersConfig: a,
                                isMobileView: o,
                                isPremiumDomain: r,
                                experiments: d
                            } = e;
                            return (0, S.b)({
                                routingInfo: t,
                                metaSiteId: n,
                                userFileDomainUrl: i,
                                routersConfig: a,
                                popupPages: null == p ? void 0 : p.getLightboxPages(),
                                multilingualInfo: null == l ? void 0 : l.getMultilingualInfo(),
                                isMobileView: o,
                                isPremiumDomain: r,
                                experiments: d
                            })
                        },
                        i = async ({
                            compId: e,
                            state: i,
                            skipHistory: a,
                            queryParams: r = {},
                            disableScrollToTop: p = !0
                        }) => {
                            var d;
                            const l = s.getLinkUtilsRoutingInfo(),
                                u = n(l),
                                {
                                    widgets: c
                                } = t;
                            if (!(null === (d = c[e]) || void 0 === d ? void 0 : d.isSection)) return;
                            const g = {
                                    type: "TpaPageLink",
                                    pageId: l.pageId,
                                    path: i
                                },
                                f = `${u.getLinkUrlFromDataItem(g)}${C().isEmpty(r)?"":`?appSectionParams=${encodeURIComponent(JSON.stringify(r))}`}`,
                                m = u.getLinkProps(f);
                            await o.navigateTo(m, {
                                skipHistory: a,
                                disableScrollToTop: p
                            })
                        };
                    return {
                        async replaceSectionState(e, {
                            state: t,
                            queryParams: n
                        }) {
                            return i({
                                compId: e,
                                skipHistory: !0,
                                state: t,
                                queryParams: n
                            })
                        },
                        async appStateChanged(e, {
                            state: t
                        }) {
                            let r;
                            try {
                                r = JSON.parse(t)
                            } catch (e) {
                                r = null
                            }
                            const p = (t, ...n) => {
                                    t[H.O] ? t({
                                        args: n,
                                        compId: e
                                    }) : t(...n)
                                },
                                l = t => {
                                    const n = a.get(e).onItemClicked;
                                    n && p(n, {
                                        type: "itemClicked",
                                        itemIndex: t,
                                        item: a.get(e).images[t]
                                    })
                                };
                            if (!r) return i({
                                compId: e,
                                skipHistory: !1,
                                state: t
                            }); {
                                const t = {
                                    zoom: () => {
                                        const [t] = r.args, {
                                            id: n
                                        } = a.get(e).images[t];
                                        d.openImageZoom(e, n), l(t)
                                    },
                                    itemClicked: () => {
                                        const [e] = r.args;
                                        l(e)
                                    },
                                    itemChanged: () => {
                                        const [t] = r.args, n = a.get(e).onCurrentItemChanged;
                                        n && p(n, {
                                            type: "imageChanged",
                                            itemIndex: t,
                                            item: a.get(e).images[t]
                                        })
                                    },
                                    componentReady: () => {
                                        a.update({
                                            [e]: {
                                                componentReady: !0
                                            }
                                        })
                                    },
                                    navigateToDynamicPage: () => {
                                        const [e] = r.args, t = n(), i = (0, S.j)(e) ? e : t.getLinkProps(t.getLinkUrlFromDataItem(e));
                                        o.navigateTo(i)
                                    },
                                    navigateToAnchor: () => {
                                        const [e, t] = r.args, i = {
                                            type: "PageLink",
                                            pageId: "masterPage" === e ? s.getLinkUtilsRoutingInfo().pageId : e,
                                            target: "_self"
                                        }, a = n(), p = a.getLinkUrlFromDataItem(i), d = a.getLinkProps(p), l = Object.assign(d, t);
                                        o.navigateTo(l)
                                    }
                                }[r.cmd];
                                t && t()
                            }
                        }
                    }
                }
            })));
            var V = n(58629),
                W = n(10666);
            const z = (0, r.ff)([(0, r.t6)(s.R9, l.u2), V.s, k.jj, (0, r.jt)(D.R1), (0, r.jt)(W.$)], (({
                    debug: e
                }, t, n, i, a) => ({
                    getTpaHandlers() {
                        return {
                            applicationLoadingStep(t, o, {
                                appDefinitionId: r,
                                tpaCompData: {
                                    widgetId: s
                                } = {}
                            }) {
                                if (u.O.isRuntimeCompId(t)) return void(e && console.warn(`applicationLoadingStep is ignored in runtime component ${t}`));
                                const p = n.getCurrentRouteInfo(),
                                    d = Math.round(performance.now()),
                                    {
                                        stage: l,
                                        stageNum: c
                                    } = o;
                                null == a || a.logger.log({
                                    appId: r,
                                    widget_id: s,
                                    instance_id: t,
                                    src: 42,
                                    evid: 644,
                                    tts: d,
                                    pid: p ? p.pageId : null,
                                    stage: l,
                                    stageNum: c,
                                    pn: i.getPageNumber()
                                }, {
                                    endpoint: "ugc-viewer"
                                })
                            }
                        }
                    }
                }))),
                Z = (0, r.ff)([(0, r.t6)(s.R9, l.u2), V.s, k.jj, (0, r.jt)(D.R1), (0, r.jt)(W.$)], (({
                    debug: e
                }, t, n, i, a) => ({
                    getTpaHandlers() {
                        return {
                            applicationLoaded(t, o, {
                                appDefinitionId: r,
                                tpaCompData: {
                                    widgetId: s
                                } = {}
                            }) {
                                if (u.O.isRuntimeCompId(t)) return void(e && console.warn(`applicationLoaded is ignored in runtime component ${t}`));
                                const p = n.getCurrentRouteInfo(),
                                    d = Math.round(performance.now());
                                null == a || a.logger.log({
                                    appId: r,
                                    widget_id: s,
                                    instance_id: t,
                                    src: 42,
                                    evid: 643,
                                    tts: d,
                                    pid: p ? p.pageId : null,
                                    pn: i.getPageNumber()
                                }, {
                                    endpoint: "ugc-viewer"
                                })
                            }
                        }
                    }
                })));
            var G = n(2811);
            const K = (0, r.ff)([G.n9, d.PV], ((e, t) => ({
                getTpaHandlers() {
                    return {
                        async refreshCurrentMember() {
                            const n = await e.getMemberDetails(!0);
                            n && t.dispatch("MEMBER_DETAILS_UPDATED", (() => n))
                        }
                    }
                }
            })));
            var Q = n(31191);
            const X = (0, r.ff)([a.jn, d.R3], (({
                    openPopup: e
                }, t) => {
                    const n = e => {
                        if (t.isModal(e)) {
                            const e = new Error("An app can not open a popup from a modal.");
                            return e.name = "Operation not supported", e
                        }
                        return null
                    };
                    return {
                        getTpaHandlers() {
                            return {
                                openPopup: (0, x.u)(["site", "preview"], ((t, i, {
                                    originCompId: a
                                }) => {
                                    var {
                                        url: o
                                    } = i, r = (0, Q._T)(i, ["url"]);
                                    const s = n(t);
                                    return s ? Promise.reject(s) : e(o, r, a)
                                })),
                                openPersistentPopup: (0, x.u)(["site", "preview"], ((t, i, {
                                    originCompId: a
                                }) => {
                                    var {
                                        url: o
                                    } = i, r = (0, Q._T)(i, ["url"]);
                                    const s = n(t);
                                    return s ? Promise.reject(s) : e(o, Object.assign(Object.assign({}, r), {
                                        persistent: !0
                                    }), a)
                                }))
                            }
                        }
                    }
                })),
                q = (0, r.ff)([A.Xb], (e => ({
                    getTpaHandlers() {
                        return {
                            getAppVendorProductId(t, {
                                appDefinitionId: n
                            }) {
                                var i, a;
                                const o = null === (i = e.getAppInstanceByAppDefId(n)) || void 0 === i ? void 0 : i.replace(/^[^.]+./, "");
                                if (!o) return null;
                                return (null === (a = JSON.parse(atob(o))) || void 0 === a ? void 0 : a.vendorProductId) || null
                            }
                        }
                    }
                })));
            var J = n(8562);
            const Y = e => C().isNumber(e) ? e : NaN,
                ee = e => C().parseInt((e || "").toString().split("px")[0]),
                te = e => {
                    const t = {
                        size: 0,
                        unit: ""
                    };
                    return C().isNumber(e) ? t.size = e : C().isString(e) && (t.unit = (e => {
                        const t = /(%)$/.exec(e);
                        return t && t[1] ? t[1] : ""
                    })(e), t.size = (e => {
                        const t = /^([0-9]+)/.exec(e);
                        return t && t[1] ? parseInt(t[1], 10) : 0
                    })(e)), t
                },
                ne = ({
                    width: e,
                    height: t
                }, n) => "100%" === t && ("100%" === e || Number(ee(e)) >= n.innerWidth),
                ie = (e, t, n) => {
                    const i = (0, J.yF)(t) ? null : t.document.getElementById(n),
                        a = i ? i.getBoundingClientRect() : null,
                        o = (e => {
                            let t = 0,
                                n = 0;
                            if (e && e.offsetParent) {
                                let i = e;
                                do {
                                    t += i.offsetLeft, n += i.offsetTop
                                } while (i = i.offsetParent)
                            }
                            return {
                                top: n,
                                left: t
                            }
                        })(i),
                        r = {
                            left: o.left,
                            top: o.top,
                            width: a ? Math.round(a.width) : 0,
                            height: a ? Math.round(a.height) : 0,
                            actualTop: a ? a.top : 0,
                            actualLeft: a ? a.left : 0
                        },
                        s = C().defaults(e.position, {
                            x: 0,
                            y: 0,
                            origin: "FIXED",
                            placement: "CENTER"
                        }),
                        p = C().pick(e, "height", "width"),
                        d = {
                            width: (0, J.yF)(t) ? 0 : t.innerWidth,
                            height: (0, J.yF)(t) ? 0 : t.innerHeight
                        },
                        l = {
                            RELATIVE: () => ((e, t, n, i) => {
                                const a = function(e, t, n) {
                                        return e + t / 2 - n / 2
                                    },
                                    o = function(e, t, n) {
                                        return e - (t + n)
                                    },
                                    r = function(e, t, n) {
                                        return e - (t + n)
                                    },
                                    s = function(e, t, n) {
                                        return e + t / 2 - n / 2
                                    },
                                    p = Y(i.height),
                                    d = Y(i.width),
                                    l = {
                                        CENTER: () => ({
                                            height: C().min([p, n.height]),
                                            width: C().min([d, n.width]),
                                            top: s(t.top, t.height, p),
                                            left: a(t.left, t.width, d)
                                        }),
                                        TOP_LEFT: () => ({
                                            height: C().min([p, t.top]),
                                            width: C().min([d, t.left]),
                                            top: t.top - p,
                                            left: t.left - d
                                        }),
                                        TOP_RIGHT: () => ({
                                            height: C().min([p, t.top]),
                                            width: C().min([d, r(n.width, t.width, t.left)]),
                                            top: t.top - p,
                                            left: t.width + t.left
                                        }),
                                        TOP_CENTER: () => ({
                                            height: C().min([p, t.top]),
                                            width: C().min([d, n.width]),
                                            top: t.top - p,
                                            left: a(t.left, t.width, d)
                                        }),
                                        CENTER_RIGHT: () => ({
                                            height: C().min([p, n.height]),
                                            width: C().min([d, r(n.width, t.width, t.left)]),
                                            top: s(t.top, t.height, p),
                                            left: t.width + t.left
                                        }),
                                        CENTER_LEFT: () => ({
                                            height: C().min([p, n.height]),
                                            width: C().min([d, t.left]),
                                            top: s(t.top, t.height, p),
                                            left: t.left - d
                                        }),
                                        BOTTOM_LEFT: () => ({
                                            height: C().min([p, o(n.height, t.top, t.height)]),
                                            width: C().min([d, t.left]),
                                            top: t.top + t.height,
                                            left: t.left - d
                                        }),
                                        BOTTOM_RIGHT: () => ({
                                            height: C().min([p, o(n.height, t.top, t.height)]),
                                            width: C().min([d, r(n.width, t.width, t.left)]),
                                            top: t.top + t.height,
                                            left: t.width + t.left
                                        }),
                                        BOTTOM_CENTER: () => ({
                                            height: C().min([p, o(n.height, t.top, t.height)]),
                                            width: C().min([d, n.width]),
                                            top: t.top + t.height,
                                            left: a(t.left, t.width, d)
                                        })
                                    }[e.placement](),
                                    u = C().max([0, l.top]),
                                    c = C().max([0, l.left]);
                                return Object.assign(Object.assign(Object.assign({}, {
                                    position: "absolute",
                                    display: "block",
                                    width: 0,
                                    height: 0
                                }), l), {
                                    top: u,
                                    left: c
                                })
                            })(s, r, d, p),
                            ABSOLUTE: () => ((e, t, n, i) => {
                                const a = Y(i.height),
                                    o = Y(i.width),
                                    r = {
                                        CENTER: () => {
                                            const i = C().min([t.actualTop + e.y, n.height - (t.actualTop + e.y)]),
                                                r = C().min([t.actualLeft + e.x, n.width - (t.actualLeft + e.x)]);
                                            return {
                                                height: C().min([a, 2 * i]),
                                                width: C().min([o, 2 * r]),
                                                top: t.top + e.y - a / 2,
                                                left: t.left + e.x - o / 2
                                            }
                                        },
                                        TOP_LEFT: () => ({
                                            height: C().min([a, t.actualTop + e.y]),
                                            width: C().min([o, t.actualLeft + e.x]),
                                            top: t.top + e.y - a,
                                            left: t.left + e.x - o
                                        }),
                                        TOP_RIGHT: () => ({
                                            height: C().min([a, t.actualTop + e.y]),
                                            width: C().min([o, n.width - (t.actualLeft + e.x)]),
                                            top: t.top + e.y - a,
                                            left: t.left + e.x
                                        }),
                                        TOP_CENTER: () => {
                                            const i = C().min([t.actualLeft + e.x, n.width - (t.actualLeft + e.x)]);
                                            return {
                                                height: C().min([a, t.actualTop + e.y]),
                                                width: C().min([o, 2 * i]),
                                                top: t.top + e.y - a,
                                                left: t.left + e.x - o / 2
                                            }
                                        },
                                        CENTER_RIGHT: () => {
                                            const i = C().min([t.actualTop + e.y, n.height - (t.actualTop + e.y)]);
                                            return {
                                                height: C().min([a, 2 * i]),
                                                width: C().min([o, n.width - (t.actualLeft + e.x)]),
                                                top: t.top + e.y - a / 2,
                                                left: t.left + e.x
                                            }
                                        },
                                        CENTER_LEFT: () => {
                                            const i = C().min([t.actualTop + e.y, n.height - (t.actualTop + e.y)]);
                                            return {
                                                height: C().min([a, 2 * i]),
                                                width: C().min([o, t.actualLeft + e.x]),
                                                top: t.top + e.y - a / 2,
                                                left: t.left + e.x - o
                                            }
                                        },
                                        BOTTOM_LEFT: () => ({
                                            height: C().min([a, n.height - e.y]),
                                            width: C().min([o, t.actualLeft + e.x]),
                                            top: t.top + e.y,
                                            left: t.left + e.x - o
                                        }),
                                        BOTTOM_RIGHT: () => ({
                                            height: C().min([a, n.height - (t.actualTop + e.y)]),
                                            width: C().min([o, n.width - (t.actualLeft + e.x)]),
                                            top: t.top + e.y,
                                            left: t.left + e.x
                                        }),
                                        BOTTOM_CENTER: () => {
                                            const i = C().min([t.actualLeft + e.x, n.width - (t.actualLeft + e.x)]);
                                            return {
                                                height: C().min([a, n.height - (t.actualTop + e.y)]),
                                                width: C().min([o, 2 * i]),
                                                top: t.top + e.y,
                                                left: t.left + e.x - o / 2
                                            }
                                        }
                                    }[e.placement](),
                                    s = C().max([0, r.top]),
                                    p = C().max([0, r.left]);
                                return Object.assign(Object.assign(Object.assign({}, {
                                    position: "absolute",
                                    display: "block",
                                    width: 0,
                                    height: 0
                                }), r), {
                                    top: s,
                                    left: p
                                })
                            })(s, r, d, p),
                            FIXED: () => ((e, t, n) => {
                                const i = {
                                        position: "fixed",
                                        display: "block",
                                        width: n.width,
                                        height: n.height
                                    },
                                    a = te(n.height);
                                "%" === a.unit ? a.size = C().min([a.size, 100]) : a.size > t.height && (a.unit = "%", a.size = 100);
                                const o = te(n.width);
                                o.size = "%" === o.unit ? C().min([o.size, 100]) : C().min([o.size, t.width]);
                                const r = {
                                    CENTER: () => ({
                                        marginLeft: o.size / -2 + (o.unit || "px"),
                                        marginTop: "%" === a.unit ? 0 : a.size / -2 + (a.unit || "px"),
                                        left: "50%",
                                        top: "%" === a.unit ? 0 : "50%"
                                    }),
                                    TOP_LEFT: () => ({
                                        left: "0px",
                                        top: "0px"
                                    }),
                                    TOP_RIGHT: () => ({
                                        right: "0px",
                                        top: "0px"
                                    }),
                                    TOP_CENTER: () => ({
                                        marginLeft: o.size / -2 + (o.unit || "px"),
                                        top: "0px",
                                        left: "50%"
                                    }),
                                    CENTER_RIGHT: () => ({
                                        marginTop: "%" === a.unit ? 0 : a.size / -2 + (a.unit || "px"),
                                        top: "%" === a.unit ? 0 : "50%",
                                        right: "0px"
                                    }),
                                    CENTER_LEFT: () => ({
                                        marginTop: "%" === a.unit ? 0 : a.size / -2 + (a.unit || "px"),
                                        top: "%" === a.unit ? 0 : "50%",
                                        left: "0px"
                                    }),
                                    BOTTOM_LEFT: () => ({
                                        bottom: "0px",
                                        left: "0px"
                                    }),
                                    BOTTOM_RIGHT: () => ({
                                        bottom: "0px",
                                        right: "0px"
                                    }),
                                    BOTTOM_CENTER: () => ({
                                        marginLeft: o.size / -2 + (o.unit || "px"),
                                        left: "50%",
                                        bottom: "0px"
                                    })
                                };
                                return i.width = o.size + (o.unit || "px"), i.height = a.size + (a.unit || "px"), Object.assign(Object.assign({}, i), r[e.placement]())
                            })(s, d, p)
                        };
                    return ((e, t, n) => {
                        if (ee(e.width) < 10 || ee(e.height) < 10) {
                            const e = te(n.height);
                            e.size = "%" === e.unit ? C().min([e.size, 100]) : C().min([e.size, t.height]);
                            const i = te(n.width);
                            return i.size = "%" === i.unit ? C().min([i.size, 100]) : C().min([i.size, t.height]), {
                                position: "fixed",
                                display: "block",
                                width: `${i.size}${i.unit||"px"}`,
                                height: `${e.size}${e.unit||"px"}`,
                                marginLeft: `${i.size/-2}${i.unit||"px"}`,
                                marginTop: `${e.size/-2}${e.unit||"px"}`,
                                left: "50%",
                                top: "50%"
                            }
                        }
                        return e
                    })(l[s.origin](), d, p)
                };
            var ae = n(87821);
            const oe = (0, r.ff)([p.xP, o.ZQ, ae.x, (0, r.t6)(s.R9, l.u2), d.R3], ((e, t, n, i, a) => {
                    const o = (o, r) => {
                        const {
                            options: s,
                            originCompId: p
                        } = e.get(o), d = Object.assign(Object.assign({}, s), r), l = a.isModal(o) ? (e => ["height", "width"].reduce(((t, n) => {
                            const i = e[n];
                            if (!C().isNil(i)) {
                                const {
                                    unit: e,
                                    size: a
                                } = te(i);
                                e || (t[n] = a)
                            }
                            return t
                        }), {}))(r) : ie(d, t, p);
                        e.update({
                            [o]: {
                                styleOverrides: l
                            }
                        }), n.setSiteScrollingBlocked(i.isMobileView && ne(l, t), o)
                    };
                    return {
                        getTpaHandlers() {
                            return {
                                async resizeWindow(t, n, {
                                    tpaCompData: i
                                }) {
                                    if (u.O.isRuntimeCompId(t)) o(t, n);
                                    else if (null == i ? void 0 : i.isPinned) {
                                        const i = {
                                            width: C().isNumber(n.width) ? `${n.width}px` : n.width,
                                            height: C().isNumber(n.height) ? `${n.height}px` : n.height
                                        };
                                        C().isEqual(i, e.get(t).styleOverrides) || e.update({
                                            [t]: {
                                                styleOverrides: i
                                            }
                                        })
                                    }
                                },
                                heightChanged(t, n, {
                                    tpaCompData: i
                                }) {
                                    if (u.O.isRuntimeCompId(t)) o(t, {
                                        height: n.height
                                    });
                                    else {
                                        if (0 === n.height && !(null == i ? void 0 : i.isPinned)) return;
                                        e.update({
                                            [t]: {
                                                heightOverride: n.height,
                                                heightOverflow: Boolean(n.overflow)
                                            }
                                        })
                                    }
                                }
                            }
                        }
                    }
                })),
                re = (0, r.ff)([], (() => ({
                    getTpaHandlers() {
                        return {
                            onReady() {
                                return Promise.resolve()
                            }
                        }
                    }
                })));
            var se = n(26064);
            class pe extends Error {
                constructor(e) {
                    super(e), this.name = "HandlerError"
                }
            }
            const de = (0, r.ff)([(0, r.t6)(s.R9, l.u2), (0, r.t6)(s.$e, d.u2), (0, r.t6)(s.jC, d.u2), F.q, D.kc, l.B_, (0, r.jt)(O.rW), (0, r.jt)(E.HC), (0, r.jt)(se.M$), (0, r.jt)(y.d)], ((e, t, i, a, o, {
                    getTpaSectionByAppDefinitionId: r
                }, s, p, d, l) => {
                    const u = Object.entries(i.pagesData),
                        c = ({
                            originCompId: n,
                            sectionId: a,
                            appDefinitionId: o
                        }) => {
                            const r = u.reduce(((e, [t, n]) => (e[n.tpaApplicationId] || (e[n.tpaApplicationId] = {}), e[n.tpaApplicationId][n.tpaPageId] = t, e)), {}),
                                s = C()(i.pagesData).groupBy("tpaApplicationId").mapValues((e => e.map((e => e.id)))).value(),
                                p = o ? (d = o, C().get(e.appsClientSpecMapData[d], ["applicationId"])) : (e => {
                                    if (!t.widgets[e]) throw new pe("Component was not found.");
                                    return t.widgets[e].applicationId
                                })(n);
                            var d;
                            const l = e.appsClientSpecMapByApplicationId[p];
                            if (!l) {
                                if (!o || C().isNil(p)) throw new pe(`Application with appDefinitionId "${o}" was not found on the site.`);
                                throw new pe("Component was not found.")
                            }
                            const c = s[p];
                            if (!c || 0 === c.length) throw new pe(`Page with app "${l.appDefinitionName}" was not found.`);
                            const g = a ? r[p][a] : null;
                            if (a && !g) throw new pe(`App page with sectionId "${a}" was not found.`);
                            return g || c[0]
                        };
                    return {
                        getTpaHandlers() {
                            return {
                                async navigateToSectionPage(t, g, {
                                    originCompId: m,
                                    appDefinitionId: h
                                }) {
                                    var I;
                                    const {
                                        metaSiteId: P,
                                        userFileDomainUrl: w,
                                        routersConfig: y,
                                        isMobileView: v,
                                        isPremiumDomain: T,
                                        experiments: b
                                    } = e, D = (0, S.b)({
                                        routingInfo: o.getLinkUtilsRoutingInfo(),
                                        metaSiteId: P,
                                        userFileDomainUrl: w,
                                        routersConfig: y,
                                        popupPages: null == s ? void 0 : s.getLightboxPages(),
                                        multilingualInfo: null == p ? void 0 : p.getMultilingualInfo(),
                                        isMobileView: v,
                                        isPremiumDomain: T,
                                        experiments: b
                                    }), {
                                        sectionIdentifier: {
                                            sectionId: O,
                                            noTransition: E = !1,
                                            appDefinitionId: M,
                                            queryParams: R = {},
                                            state: j
                                        } = {},
                                        state: A
                                    } = g, x = A || j;
                                    let L = "";
                                    try {
                                        const t = b["specs.thunderbolt.readAppDefIdInNavigateToSectionHandler"] && (({
                                            appDefinitionId: t,
                                            sectionId: n
                                        }) => {
                                            const a = u.reduce(((e, [t, n]) => (n.appDefinitionId && (e[n.appDefinitionId] || (e[n.appDefinitionId] = {}), e[n.appDefinitionId][n.tpaPageId] = t), e)), {}),
                                                o = C()(i.pagesData).filter((e => !!e.appDefinitionId)).groupBy("appDefinitionId").mapValues((e => e.map((e => e.id)))).value();
                                            if (!e.appsClientSpecMapData[t]) return null;
                                            const r = o[t];
                                            if (!r || 0 === r.length) return null;
                                            const s = n ? a[t][n] : null;
                                            return n && !s ? null : s || r[0]
                                        })({
                                            appDefinitionId: M || h,
                                            sectionId: O
                                        });
                                        L = t || c({
                                            originCompId: m,
                                            sectionId: O,
                                            appDefinitionId: M
                                        })
                                    } catch (e) {
                                        if (e instanceof pe) return {
                                            error: {
                                                message: e.message
                                            }
                                        };
                                        throw e
                                    }
                                    const N = {
                                            type: "TpaPageLink",
                                            pageId: L,
                                            path: x
                                        },
                                        k = await (async e => {
                                            var t, i;
                                            const a = null == l ? void 0 : l.urlMappings;
                                            if (a) {
                                                const {
                                                    buildCustomizedUrl: o
                                                } = await n.e(862).then(n.bind(n, 47194)), {
                                                    key: r,
                                                    variables: s,
                                                    options: p
                                                } = (null === (i = null === (t = null == e ? void 0 : e.sectionIdentifier) || void 0 === t ? void 0 : t.customizeTarget) || void 0 === i ? void 0 : i.customUrlData) || {};
                                                if (r && s) return o(a, r, s, p)
                                            }
                                        })(g) || D.getLinkUrlFromDataItem(N);
                                    if (D.isDynamicPage(k)) return {
                                        error: {
                                            message: "Can't navigate to a dynamic page. Please use the platform app API instead."
                                        }
                                    };
                                    const U = `${k}${C().isEmpty(R)?"":`?appSectionParams=${encodeURIComponent(JSON.stringify(R))}`}`,
                                        _ = D.getLinkProps(U);
                                    E && d && d.disableNextTransition();
                                    if (!await a.navigateTo(_)) {
                                        if (console.warn("You have invoked the navigateToSectionPage() API but you are already on the section page. Please use the pushState() API instead."), !1 === (null === (I = g.sectionIdentifier) || void 0 === I ? void 0 : I.shouldRefreshIframe)) return f.rV;
                                        const e = r(M || h);
                                        e && e.rebuildSrc()
                                    }
                                    return f.rV
                                }
                            }
                        }
                    }
                })),
                le = (0, r.ff)([o.ZQ, (0, r.t6)(s.$e, d.u2)], ((e, t) => ({
                    getTpaHandlers() {
                        return {
                            boundingRectAndOffsets(n) {
                                const i = {
                                        offsets: {
                                            x: 0,
                                            y: 0
                                        },
                                        rect: {
                                            left: 0,
                                            right: 0,
                                            top: 0,
                                            bottom: 0,
                                            height: 0,
                                            width: 0
                                        },
                                        scale: t.siteScale
                                    },
                                    a = e.document.getElementById(n);
                                if (!a) return i;
                                const o = (() => {
                                        if (!t.isFixedHeader) return 0;
                                        const n = e.document.getElementById("SITE_HEADER");
                                        return n && n.getBoundingClientRect().height || 0
                                    })(),
                                    r = a.getBoundingClientRect();
                                return i.offsets = {
                                    x: r.left + e.scrollX,
                                    y: r.top + e.scrollY - o
                                }, i.rect = C()(r).pick(["left", "right", "top", "bottom", "height", "width"]).mapValues((e => Math.floor(e))).value(), i.rect.top -= o, i
                            }
                        }
                    }
                })));
            var ue = n(21924);
            const ce = (0, r.ff)([(0, r.t6)(s.$e, d.u2), ue.QJ, o.EE], (({
                    widgets: e
                }, t, n) => ({
                    getTpaHandlers() {
                        return {
                            setPageMetadata: (0, x.u)(["site"], (async (i, a, {
                                originCompId: o
                            }) => {
                                if (!e[o] || !e[o].isSection) {
                                    const e = "Setting a page meta data is possible only to TPA Sections and MultiSections";
                                    return n.captureError(new Error(e), {
                                        tags: {
                                            feature: "tpa"
                                        }
                                    }), {
                                        error: {
                                            message: e
                                        }
                                    }
                                }
                                return await t.setTPAOverrides(a), await t.renderSEO(), null
                            }))
                        }
                    }
                }))),
                ge = (0, r.ff)([d.R3], (e => ({
                    getTpaHandlers() {
                        return {
                            openModal: (0, x.u)(["site", "preview"], ((t, {
                                url: n,
                                theme: i,
                                height: a,
                                width: o
                            }) => e.openModal(n, {
                                width: o,
                                height: a,
                                theme: i
                            }, t)))
                        }
                    }
                }))),
                fe = (0, r.ff)([(0, r.t6)(s.R9, l.u2), F.q, D.kc, p.QZ, (0, r.jt)(O.rW), (0, r.jt)(E.HC), (0, r.jt)(se.M$)], ((e, t, n, i, a, o, r) => {
                    const s = t => {
                            const {
                                metaSiteId: i,
                                userFileDomainUrl: r,
                                routersConfig: s,
                                isMobileView: p,
                                isPremiumDomain: d,
                                experiments: l
                            } = e, u = (0, S.b)({
                                routingInfo: n.getLinkUtilsRoutingInfo(),
                                metaSiteId: i,
                                userFileDomainUrl: r,
                                routersConfig: s,
                                popupPages: null == a ? void 0 : a.getLightboxPages(),
                                multilingualInfo: null == o ? void 0 : o.getMultilingualInfo(),
                                isMobileView: p,
                                isPremiumDomain: d,
                                experiments: l
                            }), c = u.getLinkUrlFromDataItem(t);
                            return u.getLinkProps(c)
                        },
                        p = ({
                            pageId: e,
                            anchorId: i,
                            noTransition: a
                        }) => {
                            const o = (({
                                pageId: e,
                                anchorId: t
                            }) => {
                                const i = s({
                                    type: "PageLink",
                                    pageId: e,
                                    target: "_self"
                                });
                                return t && (n.getLinkUtilsRoutingInfo().pageId === e ? i.anchorCompId = t : i.anchorDataId = t), i
                            })({
                                pageId: e,
                                anchorId: i
                            });
                            return a && r && r.disableNextTransition(), t.navigateTo(o)
                        };
                    return {
                        getTpaHandlers() {
                            return {
                                navigateToPage(e, {
                                    pageId: t,
                                    anchorId: n,
                                    noTransition: i
                                }) {
                                    p({
                                        pageId: t,
                                        anchorId: n,
                                        noTransition: i
                                    })
                                },
                                navigateTo(e, {
                                    link: n
                                }) {
                                    if (n.type === f.RZ.EXTERNAL_LINK) return;
                                    const i = s(n);
                                    t.navigateTo(i)
                                },
                                async navigateToAnchor(e, {
                                    anchorId: t
                                }) {
                                    if (!await p({
                                            pageId: n.getLinkUtilsRoutingInfo().pageId,
                                            anchorId: t
                                        })) throw new Error(`anchor with id "${t}" was not found on the current page.`);
                                    return f.rV
                                },
                                async navigateToComponent(e, {
                                    compId: t,
                                    pageId: i,
                                    noPageTransition: a
                                }) {
                                    const o = i || n.getLinkUtilsRoutingInfo().pageId;
                                    if (!await p({
                                            pageId: o,
                                            anchorId: t,
                                            noTransition: a
                                        })) throw new Error(`Page id "${o}" does not contain the component id "${t}".`);
                                    return f.rV
                                }
                            }
                        }
                    }
                })),
                me = (0, r.ff)([(0, r.t6)(s.R9, l.u2)], (({
                    appsClientSpecMapData: e
                }) => ({
                    getTpaHandlers() {
                        return {
                            getApplicationFields(t, {
                                appDefinitionId: n
                            }) {
                                return e[n].appFields
                            }
                        }
                    }
                })));
            var he = n(21568),
                Ie = n(12073);
            const Pe = (0, r.ff)([he.H, d.PV], ((e, t) => ({
                    getTpaHandlers() {
                        return {
                            removeEventListener(n, {
                                eventKey: i
                            }, {
                                appDefinitionId: a
                            }) {
                                i.startsWith(Ie.$E) ? e.unsubscribe(a, n, i) : t.unregister(i, n)
                            }
                        }
                    }
                }))),
                we = (0, r.ff)([he.H], (e => ({
                    getTpaHandlers() {
                        return {
                            publish(t, n, {
                                appDefinitionId: i
                            }) {
                                e.publish(i, t, n)
                            }
                        }
                    }
                }))),
                ye = (0, r.ff)([A.Xb, d.PV], ((e, t) => ({
                    getTpaHandlers() {
                        return {
                            async revalidateSession(n, i, {
                                appDefinitionId: a
                            }) {
                                await e.loadNewSession();
                                const o = {
                                    instance: e.getAppInstanceByAppDefId(a)
                                };
                                return t.dispatch("INSTANCE_CHANGED", (() => o), {
                                    appDefinitionId: a
                                }), o
                            }
                        }
                    }
                })));
            var ve = n(24548),
                Te = n(46466);
            const be = (0, r.ff)([(0, r.t6)(s.jC, d.u2), (0, r.t6)(s.$e, d.u2), d.KE, Te.p, p.xP, ve.i], ((e, {
                    widgets: t
                }, n, i, a, {
                    getFontsConfig: o
                }) => ({
                    getTpaHandlers() {
                        return {
                            appIsAlive(r, s, {
                                originCompId: p
                            }) {
                                const {
                                    siteColors: d,
                                    isVisualFocusEnabled: l,
                                    siteTextPresets: u
                                } = e;
                                a.update({
                                    [r]: {
                                        sentAppIsAlive: !0
                                    }
                                }), n.reportTpaLoadEnd(r);
                                const c = t[p] || {
                                    style: {
                                        colors: {},
                                        numbers: {},
                                        booleans: {},
                                        fonts: {},
                                        googleFontsCssUrl: "",
                                        uploadFontFaces: ""
                                    }
                                };
                                return Object.assign({
                                    fonts: o(),
                                    commonConfig: i.getCommonConfig(),
                                    isVisualFocusEnabled: l,
                                    siteColors: d,
                                    siteTextPresets: u
                                }, c)
                            }
                        }
                    }
                }))),
                Ce = (0, r.ff)([d.PV, he.H], ((e, t) => ({
                    getTpaHandlers() {
                        return {
                            registerEventListener(n, {
                                eventKey: i,
                                receivePastEvents: a = !1
                            }, {
                                callId: o,
                                tpa: r,
                                tpaCompData: {
                                    widgetId: s = ""
                                } = {},
                                appDefinitionId: p
                            }) {
                                if (i.startsWith(Ie.$E)) t.handleIframeSubscribe(p, n, {
                                    eventKey: i,
                                    isPersistent: a,
                                    callId: o
                                });
                                else {
                                    const t = (e, t) => {
                                        r.postMessage(JSON.stringify({
                                            intent: "addEventListener",
                                            eventType: e,
                                            params: t
                                        }), "*")
                                    };
                                    e.register(i, n, t, {
                                        widgetId: s,
                                        appDefinitionId: p
                                    })
                                }
                            }
                        }
                    }
                }))),
                Se = (0, r.ff)([d.R3, a.jn], ((e, t) => ({
                    getTpaHandlers() {
                        return {
                            closeWindow: (n, i) => P({
                                tpaModal: e,
                                tpaPopup: t,
                                compId: n,
                                onCloseMessage: i
                            })
                        }
                    }
                }))),
                De = (0, r.ff)([k.jj], (e => ({
                    getTpaHandlers() {
                        return {
                            getCurrentPageId() {
                                return e.getCurrentRouteInfo().pageId
                            }
                        }
                    }
                })));
            var Oe = n(11717);
            const Ee = (0, r.ff)([o.ZQ, (0, r.jt)(Oe.FK)], ((e, t) => ({
                    getTpaHandlers() {
                        return {
                            async scrollTo(n, {
                                x: i,
                                y: a,
                                scrollAnimation: o
                            }) {
                                if (t)
                                    if (o) {
                                        const n = 1,
                                            o = 0;
                                        (await t.getInstance()).runAnimationOnElements("BaseScroll", [e], n, o, {
                                            y: a,
                                            x: i,
                                            callbacks: {
                                                onComplete: () => Promise.resolve()
                                            }
                                        })
                                    } else e.scrollTo(i, a)
                            }
                        }
                    }
                }))),
                Me = (0, r.ff)([o.ZQ], (e => ({
                    getTpaHandlers() {
                        return {
                            scrollBy(t, {
                                x: n,
                                y: i
                            }) {
                                e.scrollBy(n, i)
                            }
                        }
                    }
                }))),
                Re = (0, r.ff)([(0, r.t6)(s.$e, d.u2)], (({
                    widgets: e
                }) => ({
                    getTpaHandlers() {
                        return {
                            getExternalId(t, n, {
                                originCompId: i
                            }) {
                                return Promise.resolve(e[i].externalId)
                            }
                        }
                    }
                }))),
                je = (0, r.ff)([(0, r.t6)(s.$e, d.u2)], (e => ({
                    getTpaHandlers() {
                        return {
                            getValue(t, {
                                key: n,
                                scope: i
                            }, {
                                originCompId: a
                            }) {
                                const {
                                    widgets: o,
                                    appPublicData: r
                                } = e, s = o[a].applicationId, p = "APP" === i ? r[s] : o[a].componentPublicData;
                                return p && p[n] ? {
                                    [n]: p[n]
                                } : {
                                    error: {
                                        message: `key ${n} not found in ${i} scope`
                                    }
                                }
                            }
                        }
                    }
                }))),
                Ae = (0, r.ff)([(0, r.t6)(s.$e, d.u2)], (e => ({
                    getTpaHandlers() {
                        function t(t) {
                            const {
                                widgets: n,
                                appPublicData: i
                            } = e;
                            return {
                                APP: i[n[t].applicationId],
                                COMPONENT: n[t].componentPublicData
                            }
                        }
                        return {
                            getPublicData(e, n, {
                                originCompId: i
                            }) {
                                return t(i)
                            },
                            getValues(e, n, {
                                originCompId: i
                            }) {
                                const {
                                    scope: a,
                                    keys: o
                                } = n, r = t(i);
                                return C().pickBy(r[a], ((e, t) => o.includes(t)))
                            }
                        }
                    }
                }))),
                xe = (0, r.ff)([(0, r.t6)(s.$e, d.u2)], (e => ({
                    getTpaHandlers() {
                        return {
                            getStyleId(t, n, {
                                originCompId: i
                            }) {
                                return e.widgets[i].styleId
                            }
                        }
                    }
                }))),
                Le = (0, r.ff)([(0, r.t6)(s.R9, l.u2)], (e => ({
                    getTpaHandlers() {
                        return {
                            getViewMode() {
                                return {
                                    editMode: e.viewMode
                                }
                            }
                        }
                    }
                }))),
                Ne = (0, r.ff)([(0, r.t6)(s.R9, l.u2), (0, r.t6)(s.$e, d.u2)], (({
                    widgetsClientSpecMapData: e
                }, {
                    pageId: t
                }) => ({
                    getTpaHandlers() {
                        return {
                            getComponentInfo(n, i, {
                                tpaCompData: {
                                    widgetId: a = ""
                                } = {}
                            }) {
                                var o, r, s;
                                const p = "masterPage" === t;
                                return {
                                    compId: n,
                                    showOnAllPages: p,
                                    pageId: p ? "" : t,
                                    tpaWidgetId: null === (o = e[a]) || void 0 === o ? void 0 : o.tpaWidgetId,
                                    appPageId: (null === (s = null === (r = e[a]) || void 0 === r ? void 0 : r.appPage) || void 0 === s ? void 0 : s.id) || ""
                                }
                            }
                        }
                    }
                })));
            var ke = n(82627);
            const Ue = (0, r.ff)([(0, r.t6)(s.$e, d.u2), (0, r.t6)(s.jC, d.u2), (0, r.t6)(s.R9, l.u2), ke.O], (({
                    widgets: e
                }, {
                    pagesData: t
                }, {
                    widgetsClientSpecMapData: n
                }, i) => ({
                    getTpaHandlers() {
                        return {
                            isAppSectionInstalled(a, {
                                sectionId: o,
                                appDefinitionId: r
                            }, {
                                originCompId: s
                            }) {
                                const p = {
                                    sectionId: o,
                                    originCompId: s,
                                    appDefinitionId: r
                                };
                                return (({
                                    sectionId: n,
                                    originCompId: a,
                                    appDefinitionId: o
                                }) => {
                                    var r;
                                    if (i["specs.thunderbolt.readAppDefIdFromPageData"]) {
                                        const i = o || (null === (r = e[a]) || void 0 === r ? void 0 : r.appDefinitionId),
                                            s = C().filter(t, {
                                                appDefinitionId: i
                                            });
                                        return C().some(s, {
                                            tpaPageId: n
                                        })
                                    }
                                    return !1
                                })(p) || (({
                                    sectionId: i,
                                    originCompId: a,
                                    appDefinitionId: o
                                }) => {
                                    var r;
                                    let s = null === (r = e[a]) || void 0 === r ? void 0 : r.applicationId;
                                    if (o) {
                                        const e = C().find(n, {
                                            appDefinitionId: o
                                        });
                                        s = (null == e ? void 0 : e.applicationId) || s
                                    }
                                    const p = C().filter(t, {
                                        tpaApplicationId: Number(s)
                                    });
                                    return C().some(p, {
                                        tpaPageId: i
                                    })
                                })(p)
                            }
                        }
                    }
                }))),
                _e = (0, r.ff)([d.Cc], (({
                    getSiteMap: e
                }) => ({
                    getTpaHandlers() {
                        return {
                            async getSitePages(t, {
                                includePagesUrl: n
                            }) {
                                return (await e()).map((e => Object.assign({
                                    hide: e.hidden,
                                    id: C().isString(e.pageId) && e.pageId.replace("#", ""),
                                    isHomepage: e.isHomePage || !1,
                                    title: e.title
                                }, n && {
                                    url: e.url
                                })))
                            },
                            getSiteMap: e
                        }
                    }
                }))),
                He = (0, r.ff)([D.Iz, k.jj, (0, r.t6)(s.jC, d.u2), (0, r.t6)(s.R9, l.u2), o.ZQ], ((e, t, {
                    pagesData: n
                }, {
                    externalBaseUrl: i
                }, a) => ({
                    getTpaHandlers() {
                        return {
                            siteInfo() {
                                const {
                                    pageId: o
                                } = t.getCurrentRouteInfo(), {
                                    href: r
                                } = e.getParsedUrl(), {
                                    siteDescription: s,
                                    siteKeywords: p,
                                    title: d
                                } = n[o];
                                return {
                                    siteDescription: s,
                                    siteKeywords: p,
                                    baseUrl: i,
                                    pageTitle: a.document.title,
                                    pageTitleOnly: d,
                                    referer: a.document.referrer,
                                    url: r
                                }
                            }
                        }
                    }
                }))),
                Fe = (0, r.ff)([(0, r.t6)(s.R9, l.u2), (0, r.t6)(s.jC, d.u2)], (({
                    externalBaseUrl: e,
                    pageIdToPrefix: t
                }, {
                    pagesData: n
                }) => ({
                    getTpaHandlers() {
                        return {
                            getSectionUrl(i, {
                                sectionIdentifier: a
                            }, {
                                appClientSpecMapData: o
                            }) {
                                const r = C().find(n, {
                                    tpaPageId: a
                                });
                                if (null == r ? void 0 : r.id) {
                                    const n = t[r.id],
                                        i = n ? `${n}/${r.pageUriSEO}` : r.pageUriSEO;
                                    return {
                                        url: `${e}/${i}`
                                    }
                                }
                                return {
                                    error: {
                                        message: `Page with app "${null==o?void 0:o.appDefinitionName}" was not found.`
                                    }
                                }
                            }
                        }
                    }
                }))),
                $e = (0, r.ff)([d.u5], (e => ({
                    getTpaHandlers() {
                        return {
                            async setFullScreenMobile(t, {
                                isFullScreen: n
                            }) {
                                e.setFullScreenMobile(t, n)
                            }
                        }
                    }
                }))),
                Be = () => {},
                Ve = (0, r.ff)([], (() => ({
                    getTpaHandlers() {
                        return {
                            getSiteRevision: Be,
                            getDeviceType: Be,
                            toWixDate: Be,
                            getCompId: Be,
                            getOrigCompId: Be,
                            getWidth: Be,
                            isInModal: Be,
                            getLocale: Be,
                            getCacheKiller: Be,
                            getTarget: Be,
                            getInstanceId: Be,
                            getSignDate: Be,
                            getUid: Be,
                            getPermissions: Be,
                            getIpAndPort: Be,
                            getDemoMode: Be,
                            getInstanceValue: Be,
                            getSiteOwnerId: Be,
                            getImageUrl: Be,
                            getResizedImageUrl: Be,
                            getAudioUrl: Be,
                            getDocumentUrl: Be,
                            getSwfUrl: Be,
                            getPreviewSecureMusicUrl: Be,
                            getStyleParams: Be,
                            getStyleColorByKey: Be,
                            getColorByreference: Be,
                            getSiteTextPresets: Be,
                            getFontsSpriteUrl: Be,
                            getStyleFontByKey: Be,
                            getStyleFontByReference: Be,
                            getSiteColors: Be,
                            getViewModeInternal: Be,
                            postMessage: Be,
                            getEditorFonts: Be,
                            setUILIBParamValue: Be,
                            removeAppMetadata: Be,
                            setAppMetadata: Be,
                            setColorParam: Be,
                            setStyleParam: Be,
                            resizeComponent: Be,
                            setValue: Be,
                            isSupported: Be,
                            appEngaged: Be,
                            getInstalledInstance: Be,
                            isApplicationInstalled: Be,
                            isCustomApplicationPermissionsGranted: Be,
                            isGroupApplicationPermissionsGranted: Be,
                            setFullWidth: Be
                        }
                    }
                })));
            var We = n(42473);
            const ze = (0, r.ff)([(0, r.jt)(We.I)], (e => ({
                    getTpaHandlers() {
                        return {
                            reportVisitorActivity: e ? e.reportActivity : () => {}
                        }
                    }
                }))),
                Ze = (0, r.ff)([p.QZ, p.xP], ((e, t) => ({
                    getTpaHandlers() {
                        return {
                            getCurrentPageAnchors() {
                                return C()(e.getEntireStore()).pickBy((({
                                    componentType: e
                                }) => "Anchor" === e)).mapValues(((e, n) => ({
                                    id: n,
                                    title: t.get(n).name
                                }))).values().sortBy((({
                                    id: e
                                }) => {
                                    switch (e) {
                                        case "SCROLL_TO_TOP":
                                            return 0;
                                        case "SCROLL_TO_BOTTOM":
                                            return 1;
                                        default:
                                            return 2
                                    }
                                })).value()
                            }
                        }
                    }
                })));
            var Ge = n(19095);
            const Ke = (e, t, n) => ({
                    error: {
                        errorCode: e,
                        message: t,
                        error: n
                    }
                }),
                Qe = "BAD_REQUEST_ERROR",
                Xe = "WIX_ERROR",
                qe = e => (...t) => window.ApplePaySession ? "function" == typeof e ? e(...t) : void 0 : {
                    error: {
                        errorCode: "APPLE_PAY_IS_NOT_AVAILABLE_ERROR"
                    }
                },
                Je = [Ve, be, Ce, Se, De, Ee, Me, Re, je, Ae, ce, ye, Le, xe, Ne, Ue, He, we, Pe, _e, me, ge, fe, K, Fe, le, q, oe, re, de, X, $e, ze, B, Z, z, _, N, U, R, L, M, Ze, T, v, w, (0, r.ff)([o.Zr], (({
                    siteAssets: e
                }) => ({
                    getTpaHandlers() {
                        return {
                            applePayInvokeMethod: qe((async (e, t) => {
                                if (!t.methodName) return Ke(Qe);
                                switch (t.methodName) {
                                    case "canMakePayments":
                                        try {
                                            return {
                                                result: window.ApplePaySession.canMakePayments()
                                            }
                                        } catch (e) {
                                            return Ke(Xe, "ApplePaySession.canMakePayments() failed", e)
                                        }
                                    case "supportsVersion":
                                        try {
                                            return {
                                                result: window.ApplePaySession.supportsVersion(t.payload.version)
                                            }
                                        } catch (e) {
                                            return Ke(Xe, `ApplePaySession.supportsVersion(${t.payload.version}) failed`, e)
                                        }
                                    default:
                                        return Ke(Qe)
                                }
                            })),
                            applePayStartSession: qe((async (t, {
                                paymentRequest: n,
                                applePayVersion: i,
                                callbackApiId: a
                            }, o) => {
                                try {
                                    const t = new window.ApplePaySession(i, n),
                                        r = await (0, Ge.FR)(e.clientTopology.moduleRepoUrl),
                                        s = window.document.querySelector(`#${o.originCompId} > iframe`);
                                    if (!s) return Ke(Xe, `Can not find a TPA iframe with id: ${o.originCompId}`);
                                    const p = await r.api.request(a, {
                                        target: s
                                    });
                                    t.onvalidatemerchant = async e => {
                                        const n = await p.onValidateMerchant({
                                            validationURL: e.validationURL
                                        });
                                        return t.completeMerchantValidation(n)
                                    }, t.onshippingcontactselected = async e => {
                                        const n = await p.onShippingContactSelected({
                                            shippingContact: e.shippingContact
                                        });
                                        return Array.isArray(n.errors) && (n.errors = n.errors.map((e => {
                                            return t = e, new window.ApplePayError(t.code, t.contactField, t.message);
                                            var t
                                        }))), t.completeShippingContactSelection(n)
                                    }, t.onshippingmethodselected = async e => {
                                        const n = await p.onShippingMethodSelected({
                                            shippingMethod: e.shippingMethod
                                        });
                                        return t.completeShippingMethodSelection(n)
                                    }, t.onpaymentauthorized = async e => {
                                        const n = await p.onPaymentAuthorized({
                                            payment: e.payment
                                        });
                                        return t.completePayment(n)
                                    }, t.oncancel = async () => await p.onCancel();
                                    const {
                                        canceled: d
                                    } = await p.onClick();
                                    if (d) return;
                                    t.begin()
                                } catch (e) {
                                    return Ke(Xe, null == e ? void 0 : e.message, e)
                                }
                            }))
                        }
                    }
                })))],
                Ye = {
                    STATE_CHANGED: "STATE_CHANGED",
                    INSTANCE_CHANGED: "INSTANCE_CHANGED",
                    PAGE_NAVIGATION: "PAGE_NAVIGATION",
                    MEMBER_DETAILS_UPDATED: "MEMBER_DETAILS_UPDATED",
                    CONSENT_POLICY_UPDATE: "CONSENT_POLICY_UPDATE",
                    SCROLL: "SCROLL",
                    QUICK_ACTION_TRIGGERED: "QUICK_ACTION_TRIGGERED",
                    COMMON_CONFIG_UPDATE: "COMMON_CONFIG_UPDATE"
                },
                et = (0, r.ff)([(0, r.t6)(s.Wf, d.u2), (0, r.t6)(s.$e, d.u2), A.Xb], ((e, t, n) => {
                    const i = (t, n, i = (() => !0)) => {
                        C().forEach(e.get().registry[t], ((e, a) => {
                            if (!e) return;
                            const {
                                listener: o
                            } = e, r = (0, Q._T)(e, ["listener"]), s = (p = i, C().isFunction(p) ? p : e => {
                                const [t] = Object.keys(p);
                                return e[t] === p[t]
                            });
                            var p;
                            const d = Object.assign({
                                compId: a
                            }, r);
                            s(d) && o(t, n(d))
                        }))
                    };
                    return (e => {
                        e.update((e => C().merge({}, e, {
                            registry: {}
                        })))
                    })(e), {
                        pageDidMount() {
                            return n.addLoadNewSessionCallback((({
                                results: {
                                    instances: e
                                },
                                reason: t
                            }) => {
                                "expiry" === t && i("INSTANCE_CHANGED", (({
                                    appDefinitionId: t
                                }) => ({
                                    instance: e[t]
                                })))
                            }))
                        },
                        register(n, i, a, o) {
                            (e => e in Ye)(n) && e.update((e => C().merge({}, e, {
                                registry: {
                                    [n]: {
                                        [i]: Object.assign(Object.assign({}, o), {
                                            pageId: t.pageId,
                                            listener: a
                                        })
                                    }
                                }
                            })))
                        },
                        unregister(t, n) {
                            e.update((e => C().set(e, ["registry", t, n], null)))
                        },
                        dispatch: i
                    }
                }));
            var tt = n(44263);
            const nt = (0, r.ff)([d.TJ, A.Xb, o.ZQ], ((e, t, n) => {
                const {
                    resolver: i,
                    promise: a
                } = (0, tt.w)();
                return Object.assign(Object.assign({}, e), {
                    pageDidMount() {
                        i();
                        const n = t.addLoadNewSessionCallback(e.refreshAllPopups);
                        return () => {
                            n(), e.closeNonPersistentPopups()
                        }
                    },
                    async openPopup(...t) {
                        if (!(0, J.yF)(n)) return await a, e.openPopup(...t)
                    }
                })
            }));
            var it = n(98118);
            const at = (0, r.ff)([p.xP, p.QZ, (0, r.t6)(s.Wf, d.u2), (0, r.t6)(s.R9, l.u2), (0, r.t6)(s.jC, d.u2), (0, r.t6)(s.$e, d.u2), A.Xb, o.ZQ, ae.x, it.ku, l.RN, l.ex, he.H], ((e, t, n, i, a, o, r, s, p, d, l, c, g) => {
                    const f = {},
                        m = e => {
                            n.update((t => {
                                var n;
                                return Object.assign(Object.assign({}, t), {
                                    tpaPopup: {
                                        persistentPopups: e,
                                        popups: (null === (n = null == t ? void 0 : t.tpaPopup) || void 0 === n ? void 0 : n.popups) || {}
                                    }
                                })
                            }))
                        },
                        h = e => {
                            n.update((t => {
                                var n;
                                return Object.assign(Object.assign({}, t), {
                                    tpaPopup: {
                                        popups: e,
                                        persistentPopups: (null === (n = null == t ? void 0 : t.tpaPopup) || void 0 === n ? void 0 : n.persistentPopups) || {}
                                    }
                                })
                            }))
                        },
                        I = () => C().get(n.get(), ["tpaPopup", "popups"], {}),
                        P = () => C().get(n.get(), ["tpaPopup", "persistentPopups"], {}),
                        w = new RegExp(u.O.buildRuntimeCompId("tpapopup-[0-9]+", ".+"));
                    return {
                        isPopup(e) {
                            return w.test(e)
                        },
                        refreshAllPopups: () => {
                            Object.values(P()).forEach((({
                                refreshPopUp: e
                            }) => e())), Object.values(f).forEach((({
                                refreshPopUp: e
                            }) => e()))
                        },
                        closeNonPersistentPopups: () => Object.values(f).forEach((({
                            closePopup: e
                        }) => {
                            e()
                        })),
                        openPopup(n, r, w) {
                            const {
                                isMobileView: y,
                                isMobileDevice: v,
                                previewMode: T,
                                viewMode: b
                            } = i, {
                                masterPageTpaComps: S
                            } = a, {
                                widgets: D,
                                pageId: O
                            } = o;
                            return new Promise((async i => {
                                const a = u.O.buildRuntimeCompId(`tpapopup-${Date.now()}`, u.O.getOriginCompId(w)),
                                    o = w && t.getContextIdOfCompId(w) || d;
                                c.registerTpasForContext({
                                    contextId: o,
                                    pageId: O
                                }, [a]);
                                const E = e => {
                                        if (r.persistent) {
                                            const e = P();
                                            delete e[a], m(e)
                                        } else delete f[a], h(C().omit(I(), a));
                                        t.removeComponentFromDynamicStructure(a), p.setSiteScrollingBlocked(!1, a), r.persistent || g.clearListenersByCompId(a), i(e)
                                    },
                                    M = e => /^0(?:px|%)?$/.test(`${e}`),
                                    R = v && T && !M(r.width) && !M(r.height) ? {
                                        position: "fixed",
                                        width: "319px",
                                        height: "512px",
                                        marginLeft: 0,
                                        marginTop: 0,
                                        boxShadow: "none",
                                        left: "50%",
                                        transform: "translateX(-50%)",
                                        top: 0
                                    } : {},
                                    j = Object.assign(Object.assign({}, ie(r, s, w)), R),
                                    A = () => {
                                        const e = D[w] || S[w];
                                        return l.buildSrc(a, O, e, n, {
                                            extraQueryParams: {
                                                isInPopup: "true",
                                                origCompId: w,
                                                viewMode: b
                                            }
                                        })
                                    },
                                    x = {
                                        options: r,
                                        originCompId: w,
                                        src: A(),
                                        styleOverrides: j,
                                        isBareTheme: "BARE" === r.theme,
                                        closePopup: E
                                    };
                                e.update({
                                    [a]: x
                                }), p.setSiteScrollingBlocked(y && ne(j, s), a), await t.addComponentToDynamicStructure(a, {
                                    components: [],
                                    componentType: "TPAPopup"
                                });
                                const L = {
                                    isPersistent: r.persistent,
                                    closePopup: E,
                                    refreshPopUp: () => {
                                        (D[w] || S[w]) && e.update({
                                            [a]: {
                                                src: A()
                                            }
                                        })
                                    }
                                };
                                L.isPersistent ? m(Object.assign(Object.assign({}, P()), {
                                    [a]: L
                                })) : (f[a] = L, h(Object.assign(Object.assign({}, I()), {
                                    [a]: L
                                })))
                            }))
                        },
                        closePopup(e, t) {
                            const n = P()[e] || I()[e];
                            n && n.closePopup(t)
                        },
                        getOpenedPopups() {
                            return Object.assign(Object.assign({}, P()), f)
                        }
                    }
                })),
                ot = (0, r.ff)([(0, r.t6)(s.Wf, d.u2), (0, r.jt)(o.mS), o.Zr], ((e, t, {
                    siteAssets: n,
                    mode: {
                        debug: i
                    }
                }) => {
                    const {
                        promise: a,
                        resolver: o
                    } = (0, tt.w)();
                    e.update((() => Object.assign(Object.assign({}, e.get()), {
                        publicApiTPAHandlerState: {
                            resolvePublicApiGetter: o,
                            waitForAppsToRegister: a
                        }
                    })));
                    return {
                        pageWillUnmount() {
                            e.update((() => Object.assign(Object.assign({}, e.get()), {
                                publicApiTPAHandlerState: null
                            })))
                        },
                        getTpaHandlers() {
                            return {
                                waitForWixCodeWorkerToBeReady: () => {
                                    const a = e.get().publicApiTPAHandlerState;
                                    if (a.wixCodeWorkerReadyPromise) return a.wixCodeWorkerReadyPromise;
                                    const o = (async () => {
                                        i && console.warn("getPublicApi() has high performance overhead as we download and execute all apps on site. consider mitigating this by e.g migrating to Wix Blocks or OOI.");
                                        const [a, o, r] = await Promise.all([(0, Ge.FR)(n.clientTopology.moduleRepoUrl), t.platformWorkerPromise, e.get().publicApiTPAHandlerState.waitForAppsToRegister]), s = await r();
                                        if (!s.length) {
                                            const e = "getPublicApi() rejected since there are no platform apps on page";
                                            throw i && console.warn(e), new Error(e)
                                        }
                                        return await Promise.all(s.map((e => a.api.request(e, {
                                            target: o
                                        }).then((t => {
                                            a.api.set(e, t)
                                        }))))), {}
                                    })();
                                    return e.update((() => Object.assign(Object.assign({}, e.get()), {
                                        publicApiTPAHandlerState: Object.assign(Object.assign({}, a), {
                                            wixCodeWorkerReadyPromise: o
                                        })
                                    }))), o
                                }
                            }
                        },
                        getSdkHandlers: () => ({
                            publicApiTpa: {
                                registerPublicApiGetter: t => {
                                    var n;
                                    null === (n = e.get().publicApiTPAHandlerState) || void 0 === n || n.resolvePublicApiGetter(t)
                                }
                            }
                        })
                    }
                }));
            var rt = n(51831);
            const st = (e, t) => {
                    if ((0, J.yF)(e)) return;
                    const n = document.getElementById("site-root");
                    n && (t ? (n.style.setProperty("overflow-y", "hidden"), n.style.setProperty("height", "0")) : (n.style.removeProperty("overflow-y"), n.style.removeProperty("height")))
                },
                pt = "tpaModal",
                dt = (0, r.ff)([(0, r.t6)(s.R9, l.u2), (0, r.t6)(s.jC, d.u2), (0, r.t6)(s.$e, d.u2), (0, r.t6)(s.Wf, d.u2), p.xP, o.ZQ, ae.x, p.QZ, A.Xb, it.ku, l.RN, l.ex, k.jj, (0, r.jt)(O.rW)], ((e, {
                    masterPageTpaComps: t
                }, n, i, a, o, r, s, p, d, l, c, g, f) => {
                    let m = () => {};
                    const h = e => {
                            i.update((t => Object.assign(Object.assign({}, t), {
                                tpaModal: Object.assign(Object.assign({}, (null == t ? void 0 : t.tpaModal) || {}), {
                                    closeModalImpl: e
                                })
                            })))
                        },
                        I = e => {
                            i.update((t => Object.assign(Object.assign({}, t), {
                                tpaModal: Object.assign(Object.assign({}, (null == t ? void 0 : t.tpaModal) || {}), {
                                    currentModalId: e
                                })
                            })))
                        },
                        P = () => C().get(i.get(), ["tpaModal", "closeModalImpl"], (() => {})),
                        w = (e, t, n) => {
                            const i = {
                                width: o.innerWidth,
                                height: o.innerHeight
                            };
                            if (e = Math.min(e, i.width), t = Math.min(t, i.height), !n) {
                                const n = i.width - 50,
                                    a = i.height - 50;
                                e >= n && t >= a && (e = n, t = a)
                            }
                            return {
                                width: e,
                                height: t
                            }
                        },
                        {
                            resolver: y,
                            promise: v
                        } = (0, tt.w)();
                    return {
                        pageDidMount() {
                            y()
                        },
                        pageWillUnmount() {
                            P()()
                        },
                        isModal(e) {
                            return e.startsWith(pt)
                        },
                        openModal(i, {
                            width: p,
                            height: y,
                            title: T,
                            theme: b
                        }, C) {
                            if ((0, J.yF)(o)) return new Promise((() => {}));
                            let S;
                            const {
                                tpaModalConfig: D,
                                isMobileDevice: O,
                                previewMode: E,
                                viewMode: M
                            } = e, {
                                pageId: R,
                                widgets: j
                            } = n, {
                                wixTPAs: A
                            } = D, x = u.O.buildRuntimeCompId(pt, u.O.getOriginCompId(C || R)), L = C && s.getContextIdOfCompId(C) || d;
                            c.registerTpasForContext({
                                contextId: L,
                                pageId: R
                            }, [x]), P()(), (0, rt.U)();
                            const N = C ? a.get(C) : null,
                                k = A[N ? N.applicationId : null],
                                U = () => {
                                    const e = w(p, y, k);
                                    a.update({
                                        [x]: {
                                            width: e.width,
                                            height: e.height
                                        }
                                    })
                                };
                            return o.addEventListener("resize", U), O && r.setSiteScrollingBlocked(!0, x), new Promise((async n => {
                                var u;
                                await v;
                                const c = null == f ? void 0 : f.getCurrentOrPendingLightboxId(),
                                    D = null === (u = g.getCurrentRouteInfo()) || void 0 === u ? void 0 : u.contextId;
                                if (d !== D && "masterPage" !== d && d !== c) return void(e.debug && console.warn(`Tried to open modal but the current context ID: ${D} doesn't equal the modal context ID: ${d}`));
                                I(x), h((e => {
                                    h((() => {})), o.removeEventListener("resize", U), (0, rt.i)(), m(), O && (r.setSiteScrollingBlocked(!1, x), st(o, !1)), s.removeComponentFromDynamicStructure(x), a.update({
                                        [x]: {
                                            src: null,
                                            closeModal: () => {}
                                        }
                                    }), null == S || S.focus(), S = null, I(null), n(e)
                                })), m = (e => {
                                    if ((0, J.yF)(o)) return () => {};
                                    const t = t => {
                                        "Escape" === t.key && e()
                                    };
                                    return o.addEventListener("keydown", t), () => o.removeEventListener("keydown", t)
                                })(P()), O && "LIGHT_BOX" === b && st(o, !0);
                                const A = w(p, y, k),
                                    L = C && (j[C] || t[C]) || {},
                                    N = l.buildSrc(x, R, L, i, {
                                        extraQueryParams: {
                                            isInModal: "true",
                                            origCompId: C,
                                            viewMode: M
                                        }
                                    });
                                a.update({
                                    [x]: {
                                        src: N,
                                        width: A.width,
                                        height: A.height,
                                        closeModal: P(),
                                        isMobileDevice: O,
                                        isPreviewMode: E,
                                        title: T,
                                        theme: b
                                    }
                                }), S = document.activeElement, await s.addComponentToDynamicStructure(x, {
                                    components: [],
                                    componentType: "TPAModal"
                                })
                            }))
                        },
                        closeModal(e) {
                            P()(e)
                        },
                        getCurrentModalId: () => C().get(i.get(), ["tpaModal", "currentModalId"], null)
                    }
                }));
            var lt = n(44041),
                ut = n(96114),
                ct = n.n(ut);
            const gt = (0, r.ff)([lt.r, d.PV, it.C9], (({
                registerToThrottledScroll: e
            }, t, n) => ({
                name: "siteScrollDispatch",
                pageWillMount() {
                    e((e => {
                        ct().measure((() => {
                            t.dispatch("SCROLL", (({
                                compId: t
                            }) => ((e, t) => {
                                const n = window.document.getElementById(t);
                                if (!n) return {};
                                const i = n.getBoundingClientRect();
                                return {
                                    x: e.x + i.left,
                                    y: e.y + i.top,
                                    width: i.width,
                                    height: i.height,
                                    scrollTop: e.y,
                                    scrollLeft: e.x,
                                    documentHeight: document.documentElement.clientHeight,
                                    documentWidth: document.documentElement.clientWidth
                                }
                            })(e, t)), {
                                pageId: n
                            })
                        }))
                    }))
                }
            })));
            var ft = n(27227),
                mt = n(99708);
            const ht = (0, r.ff)([(0, r.t6)(s.R9, l.u2), (0, r.t6)(s.$e, d.u2), p.xP, o.ZQ, ft.l], (({
                    widgetsClientSpecMapData: e,
                    isMobileView: t
                }, {
                    widgets: n
                }, i, a, o) => {
                    const r = e => {
                            (e => {
                                if ((0, J.yF)(e)) return;
                                ["fullScreenMode"].forEach((e => document.body.classList.add(e)))
                            })(a), st(a, !0), o.set({
                                [`${e}-pinned-layer`]: {
                                    "z-index": "var(--above-all-z-index) !important"
                                }
                            }), i.update({
                                [e]: {
                                    iOSVersion: (0, mt.oK)(a),
                                    isMobileFullScreenMode: !0
                                }
                            })
                        },
                        s = e => {
                            (e => {
                                (0, J.yF)(e) || document.body.classList.remove("fullScreenMode")
                            })(a), st(a, !1);
                            const t = `${e}-pinned-layer`,
                                n = o.getCompStyle(t);
                            var r, s;
                            o.set({
                                [t]: (r = n, s = "z-index", Object.keys(r).reduce(((e, t) => (t !== s && (e[t] = r[t]), e)), {}))
                            }), i.update({
                                [e]: {
                                    isMobileFullScreenMode: !1
                                }
                            })
                        };
                    return {
                        setFullScreenMobile(i, a) {
                            if (!t) throw new Error("show full screen is only available in Mobile view");
                            (t => {
                                const i = n[t] || {},
                                    {
                                        appDefinitionId: a
                                    } = e[i.widgetId] || {};
                                return Object.values(f.r6).includes(a)
                            })(i) && (a ? r(i) : s(i))
                        }
                    }
                })),
                It = (0, r.ff)([Te.p, d.PV], ((e, t) => ({
                    pageDidMount: () => e.registerToCommonConfigChange((e => t.dispatch("COMMON_CONFIG_UPDATE", (() => e))))
                }))),
                Pt = (0, r.ff)([d.PV, k.jj], ((e, t) => ({
                    appDidLoadPage({
                        pageId: n
                    }) {
                        var i, a;
                        const o = null === (i = t.getPreviousRouterInfo()) || void 0 === i ? void 0 : i.pageId;
                        if (!o || o === n) return;
                        const r = {
                                fromPage: o,
                                toPage: n
                            },
                            s = null === (a = t.getCurrentRouteInfo().dynamicRouteData) || void 0 === a ? void 0 : a.publicData;
                        s && (r.routerPublicData = s), e.dispatch("PAGE_NAVIGATION", (() => r))
                    }
                }))),
                wt = (e, t) => yt(t) && t.templateId || e,
                yt = ({
                    isResponsive: e,
                    widgetId: t
                }) => e && "14517f3f-ffc5-eced-f592-980aaa0bbb5c" === t,
                vt = (0, r.ff)([p.xP, (0, r.t6)(s.R9, l.u2), (0, r.t6)(s.$e, d.u2), A.Xb, it.ku, l.ex, d.nV], ((e, {
                    widgetsClientSpecMapData: t
                }, n, i, a, o, r) => {
                    const {
                        widgets: s,
                        tpaInnerRouteConfig: p,
                        pageId: d
                    } = n, l = Object.entries(s).map((([e, t]) => {
                        const n = wt(e, t);
                        return e !== n && o.registerTpaTemplateId(n, e), n
                    }));
                    o.registerTpasForContext({
                        contextId: a,
                        pageId: d
                    }, l);
                    const u = t => {
                            const i = r.buildSrc({
                                compId: t,
                                tpaCompData: s[t],
                                pageId: n.pageId,
                                tpaInnerRouteConfig: p
                            });
                            e.update({
                                [t]: {
                                    src: i
                                }
                            })
                        },
                        c = () => {
                            const e = C().pickBy(s, (({
                                widgetId: e,
                                isOOI: n
                            }) => !n && t[e]));
                            Object.keys(e).forEach(u)
                        };
                    return {
                        pageDidMount() {
                            return i.addLoadNewSessionCallback((({
                                reason: e
                            }) => {
                                "memberLogin" === e && c()
                            }))
                        },
                        rebuildTpasSrc: c,
                        rebuildTpaSrc: u
                    }
                }));
            var Tt = n(65070);
            const bt = (0, r.ff)([d.PV, D.Iz, (0, r.t6)(s.$e, d.u2), it.C9], ((e, t, {
                    tpaInnerRouteConfig: n
                }, i) => ({
                    async onUrlChange() {
                        const a = t.getRelativeUrl(),
                            o = (0, Tt._)(a.replace(/^\./, ""), n.tpaPageUri),
                            r = o ? o.join("/") : "";
                        e.dispatch("STATE_CHANGED", (() => ({
                            newState: r
                        })), {
                            pageId: i
                        })
                    }
                }))),
                Ct = (0, r.ff)([p.xP, p.QZ, d.PV, k.jj, o.ZQ, it.C9, a.jn, d.e4], ((e, t, n, i, a, o, {
                    getOpenedPopups: r
                }, {
                    rebuildTpasSrc: s
                }) => {
                    const p = {
                        previousCurrency: null
                    };
                    return {
                        onUrlChange(e) {
                            if (!i.getCurrentRouteInfo()) return;
                            const t = e.searchParams.get("currency");
                            t !== p.previousCurrency && (s(), Object.values(r()).forEach((e => e.refreshPopUp())), p.previousCurrency = t)
                        }
                    }
                })),
                St = (0, r.ff)([(0, r.t6)(s.R9, l.u2), l.RN], ((e, t) => ({
                    buildSrc({
                        compId: n,
                        tpaCompData: i,
                        pageId: a,
                        tpaInnerRouteConfig: o
                    }) {
                        const {
                            widgetsClientSpecMapData: r,
                            deviceType: s
                        } = e, p = wt(n, i), {
                            widgetId: d
                        } = i, {
                            widgetUrl: l,
                            mobileUrl: u
                        } = r[d], c = "mobile" === s && u || l, g = yt(i) ? "masterPage" : a, f = {};
                        return i.isSection && (f.tpaInnerRouteConfig = o), t.buildSrc(p, g, i, c, f)
                    },
                    getDefaultProps(t, n, i) {
                        var a;
                        const {
                            widgetsClientSpecMapData: o,
                            isMobileView: r
                        } = e, {
                            appDefinitionName: s,
                            appDefinitionId: p,
                            appPage: d,
                            allowScrolling: l
                        } = o[t];
                        return {
                            title: null !== (a = d.name) && void 0 !== a ? a : s,
                            appDefinitionName: s,
                            appDefinitionId: p,
                            isMobileView: r,
                            allowScrolling: l,
                            reportIframeStartedLoading: n,
                            reportWidgetUnresponsive: i
                        }
                    }
                })));
            var Dt = n(65482),
                Ot = n(30516),
                Et = n(34653);
            const Mt = (0, r.ff)([(0, r.t6)(s.R9, l.u2), (0, r.t6)(s.$e, d.u2), d.KE, d.nV, l.B_, l.lP, o.EE, (0, r.jt)(d.Wt), (0, r.jt)(l.yA)], (({
                    widgetsClientSpecMapData: e
                }, t, n, i, {
                    registerTpaSection: a,
                    unregisterTpaSection: o
                }, r, s, p, d) => {
                    const l = ({
                        appDefinitionId: e = "UNKNOWN",
                        widgetId: t = "UNKNOWN",
                        compId: n,
                        reason: i
                    }) => {
                        const a = "IframeTpaDataIntegrityError",
                            o = new Error(a);
                        o.name = a, s.captureError(o, {
                            tags: {
                                appDefinitionId: e,
                                widgetId: t,
                                feature: "tpa",
                                methodName: "componentWillMount",
                                reason: i
                            },
                            extra: {
                                compId: n
                            }
                        })
                    };
                    return {
                        componentTypes: Et.X,
                        componentWillMount(u) {
                            const {
                                widgets: c,
                                tpaInnerRouteConfig: g,
                                pageId: f
                            } = t, m = c[u.id] || c[(0, Ot.is)(u.id)];
                            if (!m) return void l({
                                compId: u.id,
                                reason: "MISSING_DATA_ITEM"
                            });
                            const {
                                widgetId: h,
                                isSection: I,
                                appDefinitionId: P,
                                templateId: w
                            } = m;
                            if (!e[h]) return void l({
                                appDefinitionId: P,
                                widgetId: h,
                                compId: u.id,
                                reason: "MISSING_FROM_CSM"
                            });
                            d && d.registerToDataCapsule(w || u.id, P);
                            const y = () => i.buildSrc({
                                compId: u.id,
                                tpaCompData: m,
                                pageId: f,
                                tpaInnerRouteConfig: g
                            });
                            if (I) {
                                const e = {
                                    appDefinitionId: P,
                                    rebuildSrc: () => {
                                        const e = y();
                                        n.reportTpaLoadStart(u.id, e), u.updateProps({
                                            src: e
                                        })
                                    }
                                };
                                a(u.id, e)
                            }
                            const v = C().once((() => {
                                    p && p.reportIframeStartedLoading(u.id)
                                })),
                                T = y(),
                                b = C().once((() => {
                                    const {
                                        appDefinitionName: t,
                                        isWixTPA: n
                                    } = e[h];
                                    if (n) {
                                        const e = new Error("TPA did not send appIsAlive");
                                        e.name = "IframeTpaUnresponsive", s.captureError(e, {
                                            tags: {
                                                appDefinitionId: P,
                                                widgetId: h,
                                                invalidSrc: !T,
                                                feature: "tpa",
                                                methodName: "componentWillMount"
                                            },
                                            extra: {
                                                appDefinitionName: t,
                                                src: T
                                            }
                                        })
                                    }
                                })),
                                S = i.getDefaultProps(h, v, b),
                                D = wt(u.id, m),
                                O = r ? r.getCachedProps(D) : {};
                            return n.reportTpaLoadStart(u.id, T), u.updateProps(Object.assign(Object.assign(Object.assign({}, S), {
                                src: T
                            }), O)), () => {
                                r && ("masterPage" === f ? r.cacheProps(u.id) : yt(m) && r.cacheProps(D, u.getProps())), o(u.id), d && d.unregister(w || u.id)
                            }
                        }
                    }
                })),
                Rt = (0, r.ff)([(0, r.t6)(s.R9, l.u2), (0, r.t6)(s.$e, d.u2), k.jj, V.s, W.$, D.R1], (({
                    widgetsClientSpecMapData: e
                }, {
                    widgets: t
                }, n, i, a, o) => ({
                    reportIframeStartedLoading(i) {
                        const {
                            widgetId: r,
                            templateId: s
                        } = t[i] || t[(0, Ot.is)(i)], p = n.getCurrentRouteInfo(), d = Math.round(performance.now());
                        a.logger.log({
                            appId: e[r].appDefinitionId,
                            widget_id: r,
                            instance_id: null != s ? s : i,
                            src: 42,
                            evid: 642,
                            tts: d,
                            pid: p ? p.pageId : null,
                            pn: o.getPageNumber()
                        }, {
                            endpoint: "ugc-viewer"
                        })
                    }
                }))),
                jt = "$TPA$",
                At = {
                    [f.RZ.PAGE_LINK]: ["type", "pageId"],
                    [f.RZ.EXTERNAL_LINK]: ["type", "target", "url"],
                    [f.RZ.ANCHOR_LINK]: ["type", "anchorName", "anchorDataId", "pageId"],
                    [f.RZ.EMAIL_LINK]: ["type", "recipient", "subject"],
                    [f.RZ.PHONE_LINK]: ["type", "phoneNumber"],
                    [f.RZ.WHATSAPP_LINK]: ["type", "phoneNumber"],
                    [f.RZ.DOCUMENT_LINK]: ["type", "docId", "name"],
                    [f.RZ.DYNAMIC_PAGE_LINK]: ["type", "routerId", "innerRoute", "anchorDataId"],
                    [f.RZ.ADDRESS_LINK]: ["type", "address"]
                };

            function xt(e, t, n, i) {
                const a = e.label || "",
                    o = !e.isVisible || !1,
                    r = e.link ? function(e) {
                        const t = C().pick(e.link, At[e.link.type]);
                        if (C().isObject(t.pageId) && (t.pageId = `#${C().get(t,"pageId.id")}`), t.anchorDataId) {
                            const e = C().get(t, "anchorDataId.id", t.anchorDataId);
                            t.anchorDataId = "SCROLL_TO_TOP" === e || "SCROLL_TO_BOTTOM" === e ? e : `#${e}`
                        }
                        return t
                    }(e) : {},
                    s = C().merge(r, {
                        title: a,
                        hidden: o
                    });
                if (!s.type) return {
                    type: f.RZ.MENU_HEADER,
                    hidden: o,
                    title: a,
                    subPages: s.subPages
                };
                switch (s.type) {
                    default:
                        case f.RZ.PAGE_LINK:
                        case f.RZ.ANCHOR_LINK:
                        C().merge(s, Lt(e, t, n));
                    break;
                    case f.RZ.DOCUMENT_LINK:
                            const a = i.getLinkUrlFromDataItem(s),
                            o = i.getLinkProps(a);s.url = o.href
                }
                return s
            }

            function Lt(e, t, n) {
                var i, a, o, r;
                const s = null === (a = null === (i = e.link) || void 0 === i ? void 0 : i.pageId) || void 0 === a ? void 0 : a.pageUriSEO,
                    p = {
                        isHomePage: (null === (r = null === (o = e.link) || void 0 === o ? void 0 : o.pageId) || void 0 === r ? void 0 : r.id) === t
                    };
                return s && C().assign(p, {
                    url: n + "/" + s
                }), p
            }

            function Nt(e, t, n, i, a) {
                const {
                    externalBaseUrl: o,
                    appsClientSpecMapByApplicationId: r,
                    metaSiteId: s,
                    userFileDomainUrl: p,
                    routersConfig: d,
                    isMobileView: l,
                    isPremiumDomain: u,
                    experiments: c
                } = t, g = n.getLinkUtilsRoutingInfo(), m = (0, S.b)({
                    routingInfo: g,
                    metaSiteId: s,
                    userFileDomainUrl: p,
                    routersConfig: d,
                    popupPages: null == i ? void 0 : i.getLightboxPages(),
                    multilingualInfo: null == a ? void 0 : a.getMultilingualInfo(),
                    isMobileView: l,
                    isPremiumDomain: u,
                    experiments: c
                });
                return function({
                    menuItems: e,
                    mainPageId: t,
                    baseUrl: n,
                    linkUtils: i
                }) {
                    return C().map(e, (e => {
                        const a = xt(e, t, n, i);
                        if (a.type === f.RZ.PAGE_LINK || a.type === f.RZ.MENU_HEADER) {
                            const o = C().map(e.items, (e => xt(e, t, n, i)));
                            C().size(o) > 0 && C().assign(a, {
                                subPages: o
                            })
                        }
                        return a
                    }))
                }({
                    menuItems: C().filter(e, (({
                        link: e
                    }) => ! function(e, t) {
                        var n, i;
                        if (!t) return !1;
                        if (t.type === f.RZ.PAGE_LINK) {
                            let a = null === (n = t.pageId) || void 0 === n ? void 0 : n.tpaPageId;
                            const o = e[null === (i = t.pageId) || void 0 === i ? void 0 : i.tpaApplicationId];
                            if (o && a) {
                                C().includes(a, jt) && (a = a.substr(0, a.indexOf(jt)));
                                const e = C().find(o.widgets, (e => {
                                    var t;
                                    return (null === (t = e.appPage) || void 0 === t ? void 0 : t.id) === a
                                }));
                                return null == e ? void 0 : e.appPage.hideFromMenu
                            }
                        }
                        return !1
                    }(r, e))),
                    mainPageId: g.mainPageId,
                    baseUrl: o,
                    linkUtils: m
                })
            }
            const kt = (0, r.ff)([(0, r.t6)(s.R9, l.u2), D.kc, it.cK, (0, r.jt)(O.rW), (0, r.jt)(E.HC)], ((e, t, n, i, a) => ({
                    getSiteMap: async () => Nt(await n.fetchResource("masterPage", "siteMap"), e, t, i, a)
                }))),
                Ut = (0, r.ff)([(0, r.t6)(s.R9, l.u2), (0, r.t6)(s.$e, d.u2), p.xP, o.EE], (({
                    widgetsClientSpecMapData: e
                }, t, n, i) => {
                    const a = {};
                    return {
                        reportTpaLoadStart: (o, r) => {
                            var s;
                            const {
                                widgets: p
                            } = t, d = p[o] || p[(0, Ot.is)(o)], {
                                widgetId: l,
                                appDefinitionId: u
                            } = d;
                            if (!e[l]) return;
                            if (!(e[l].isWixTPA && r && (null === (s = n.get(o)) || void 0 === s ? void 0 : s.src) !== r)) return;
                            const c = "tpa_iframe_load",
                                g = Date.now();
                            i.interactionStarted(c, {
                                customParams: {
                                    appDefinitionId: u,
                                    widgetId: l
                                }
                            }), a[o] = {
                                src: r,
                                reportLoadFinished: C().once((() => i.interactionEnded(c, {
                                    customParams: {
                                        appDefinitionId: u,
                                        widgetId: l,
                                        duration: Date.now() - g
                                    }
                                })))
                            }
                        },
                        reportTpaLoadEnd: e => {
                            var t;
                            const i = a[e];
                            (null == i ? void 0 : i.src) && (null === (t = n.get(e)) || void 0 === t ? void 0 : t.src) === i.src && i.reportLoadFinished()
                        }
                    }
                })),
                _t = e => {
                    e(d.nV).to(St), e(d.Wt).to(Rt), e(i.j.PageDidMountHandler, d.e4).to(vt), e(Dt.Vx).to(Mt), e(l.XA).to(m), e(a.go, o.CT, i.j.PageWillUnmountHandler).to(ot), e(i.j.PageDidMountHandler, d.PV).to(et), e(i.j.AppDidLoadPageHandler).to(Pt), e(d.TJ).to(at), e(i.j.PageDidMountHandler, a.jn).to(nt), e(d.Cc).to(kt), Je.forEach((t => {
                        e(a.go).to(t)
                    })), e(i.j.PageDidMountHandler).to(I), e(i.j.PageDidMountHandler, i.j.PageWillUnmountHandler, d.R3).to(dt), e(i.j.PageWillMountHandler).to(gt), e(d.u5).to(ht), e(i.j.PageDidMountHandler).to(It), e(D.bV).to(bt), e(D.bV).to(Ct), e(d.KE).to(Ut)
                }
        }
    }
]);
//# sourceMappingURL=https://static.parastorage.com/services/wix-thunderbolt/dist/group_18.8fe4d6be.chunk.min.js.map