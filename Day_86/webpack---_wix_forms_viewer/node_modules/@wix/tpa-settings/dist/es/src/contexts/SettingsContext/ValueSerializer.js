import {
    SettingsParamType
} from '../../types';
var ValueSerializer = /** @class */ (function() {
    function ValueSerializer() {
        var _a;
        var _this = this;
        this.handlers = (_a = {},
            _a[SettingsParamType.Object] = {
                serialize: function(value) {
                    // TODO: Remove this check after be sure all users don't save stringified values
                    if (typeof value === 'string') {
                        console.error('⚠️ Seems like you are calling `settings.set(param, JSON.stringify(value))`. Please, pass a plain object/array and tpa-settings will serializate it.');
                        return value;
                    }
                    return JSON.stringify(value);
                },
                deserialize: function(value) {
                    // TODO: Remove this check after be sure all users don't have unstringified values saved.
                    if (typeof value !== 'string') {
                        return value;
                    }
                    return JSON.parse(value);
                },
            },
            _a);
        this.serialize = function(param, value) {
            if (param.type === SettingsParamType.Object) {
                return _this.handlers[SettingsParamType.Object].serialize(value);
            }
            return value;
        };
        this.deserialize = function(param, value) {
            if (param.type === SettingsParamType.Object) {
                return _this.handlers[SettingsParamType.Object].deserialize(value);
            }
            return value;
        };
    }
    return ValueSerializer;
}());
export {
    ValueSerializer
};
//# sourceMappingURL=ValueSerializer.js.map