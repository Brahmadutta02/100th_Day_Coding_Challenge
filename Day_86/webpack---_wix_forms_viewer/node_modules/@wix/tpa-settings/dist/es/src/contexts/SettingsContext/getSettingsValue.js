import {
    __assign,
    __rest
} from "tslib";
import {
    generateKeyVariations,
    isParamTranslatable
} from '../../generateKey';
import {
    paramShouldInheritDesktop
} from '../../utils/paramShouldInheritDesktop';
import {
    getTranslationDefaultFunction
} from './translationDefaultFunction';
import {
    ValueSerializer
} from './ValueSerializer';
var serializer = new ValueSerializer();

function getSettingsValueBase(values, param, options) {
    if (options === void 0) {
        options = {};
    }
    var isTranslatableParam = isParamTranslatable(param);
    var keys = generateKeyVariations(param, {
        isMobile: options.isMobile,
        language: isTranslatableParam ? options.language : undefined,
    });
    var shouldInheritDesktop = paramShouldInheritDesktop(param);
    var value;
    if (isTranslatableParam) {
        if (typeof values[keys.languageAndMobile] !== 'undefined') {
            value = values[keys.languageAndMobile];
        } else if (shouldInheritDesktop &&
            typeof values[keys.language] !== 'undefined') {
            value = values[keys.language];
        }
    } else {
        if (typeof values[keys.mobile] !== 'undefined') {
            value = values[keys.mobile];
        } else if (shouldInheritDesktop &&
            typeof values[keys.original] !== 'undefined') {
            value = values[keys.original];
        }
    }
    return serializer.deserialize(param, value);
}
var wasPublicDataScopeDeprecationMessageShown = false;
export function getSettingsValue(publicData, param, _a, scope) {
    if (_a === void 0) {
        _a = {};
    }
    var options = __rest(_a, []);
    if (scope === void 0) {
        scope = 'COMPONENT';
    }
    var storage = publicData;
    if (!publicData.COMPONENT) {
        if (!wasPublicDataScopeDeprecationMessageShown) {
            console.warn('`getSettingsValue` or `getSettingsValues` should accept whole public data object. Probably, data was passed only for one scope.');
            wasPublicDataScopeDeprecationMessageShown = true;
        }
        storage = {
            COMPONENT: publicData,
            APP: {},
        };
    }
    var shouldInheritFromAppScope = scope === 'COMPONENT' && param.inheritFromAppScope;
    var value = getSettingsValueBase(storage[scope], param, options);
    if (typeof value === 'undefined' && shouldInheritFromAppScope) {
        value = getSettingsValueBase(storage.APP, param, options);
    }
    if (param.getDefaultValue && typeof value === 'undefined') {
        return getSettingsDefaultValue(storage, scope, param, options);
    }
    return value;
}
export function getSettingsDefaultValue(values, scope, param, options) {
    var _a, _b;
    if (options === void 0) {
        options = {};
    }
    var t = (_a = options.t) !== null && _a !== void 0 ? _a : getTranslationDefaultFunction({
        environmentLabel: (_b = options.environmentLabel) !== null && _b !== void 0 ? _b : '`getSettingsValue` function',
    });
    return param.getDefaultValue({
        isMobile: options.isMobile,
        isRTL: options.isRTL,
        t: t,
        presetId: options.presetId,
        experiments: options.experiments,
        getSettingParamValue: function(settingParam, overrides) {
            if (overrides === void 0) {
                overrides = {};
            }
            return getSettingsValue(values, settingParam, __assign(__assign(__assign({}, options), overrides), {
                t: t
            }), scope);
        },
    });
}
//# sourceMappingURL=getSettingsValue.js.map