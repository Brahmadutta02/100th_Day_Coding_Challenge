var __extends = (this && this.__extends) || (function() {
    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({
                    __proto__: []
                }
                instanceof Array && function(d, b) {
                    d.__proto__ = b;
                }) ||
            function(d, b) {
                for (var p in b)
                    if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
            };
        return extendStatics(d, b);
    };
    return function(d, b) {
        extendStatics(d, b);

        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new(P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }

        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }

        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function(thisArg, body) {
    var _ = {
            label: 0,
            sent: function() {
                if (t[0] & 1) throw t[1];
                return t[1];
            },
            trys: [],
            ops: []
        },
        f, y, t, g;
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;

    function verb(n) {
        return function(v) {
            return step([n, v]);
        };
    }

    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [0];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [6, e];
            y = 0;
        } finally {
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
};
var __spreadArrays = (this && this.__spreadArrays) || function() {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
import {
    isSSR,
    isSEO
} from '../helpers';
import {
    getArtifact
} from '../utils';
import {
    ControllerEnvironment
} from '../environment/Controller';
import {
    FlowAPI
} from './Base';
import {
    openModal
} from './utils/openModal';
var PlatformControllerFlowAPI = /** @class */ (function(_super) {
    __extends(PlatformControllerFlowAPI, _super);

    function PlatformControllerFlowAPI(_a) {
        var viewerScriptFlowAPI = _a.viewerScriptFlowAPI,
            controllerConfig = _a.controllerConfig,
            widgetId = _a.widgetId,
            componentId = _a.componentId,
            componentName = _a.componentName,
            biLogger = _a.biLogger,
            translations = _a.translations,
            fedopsConfig = _a.fedopsConfig,
            sentryConfig = _a.sentryConfig;
        var _b;
        var _this = _super.call(this, {
            httpClient: viewerScriptFlowAPI._httpClient,
        }) || this;
        _this.appLoadStarted = function() {
            var originalAppLoadStarted = _this.fedops.appLoadStarted;
            originalAppLoadStarted.call(_this.fedops);
            _this.fedops.appLoadStarted = function() {
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i] = arguments[_i];
                }
                console.warn("ðŸ¥º Seems like you're trying to call `fedopsLogger.appLoadStarted` and `fedopsLogger.appLoaded` in your controller.\nWe are already logging load events for SSR and CSR environments, so you can remove these calls from your project.");
                originalAppLoadStarted.call.apply(originalAppLoadStarted, __spreadArrays([_this.fedops], args));
            };
        };
        _this.essentials = controllerConfig.essentials;
        _this.controllerConfig = controllerConfig;
        _this.experiments = viewerScriptFlowAPI.experiments;
        _this.bi = viewerScriptFlowAPI.bi;
        _this.componentName = componentName;
        _this.getCurrencyFormatter = viewerScriptFlowAPI.getCurrencyFormatter;
        // TODO: Remove optional chaining after TB will be released for editor
        _this.formatCurrency = (_b = _this.getCurrencyFormatter) === null || _b === void 0 ? void 0 : _b.call(_this);
        _this.environment = new ControllerEnvironment({
            wixAPI: controllerConfig.wixCodeApi,
            appData: controllerConfig.appParams,
            config: controllerConfig.config,
            widgetId: widgetId,
        });
        // If viewer script bi logger wasn't initialized (in case viewer script is external or some error appear here),
        // we still want to init bi logger in controller.
        if (!viewerScriptFlowAPI.bi && biLogger) {
            var biFactory = _this.essentials.biLoggerFactory();
            _this.bi = biLogger(biFactory)({});
        }
        // flowAPI.sentry and  flowAPI.errorMonitor shouldn't be optional for users.
        // If user didn't configure them, then we'll still provide typed object.
        _this.errorMonitor = null;
        if (sentryConfig) {
            _this.errorMonitor = _this.essentials.createErrorMonitor({
                dsn: sentryConfig.DSN,
                environment: 'Viewer:Worker',
                version: getArtifact(),
                tags: {
                    componentId: componentId,
                    componentName: componentName,
                    isSSR: isSSR(controllerConfig.wixCodeApi),
                    isSEO: isSEO(controllerConfig.wixCodeApi),
                },
            });
        }
        if (_this.errorMonitor) {
            _this.reportError = function(error) {
                if (typeof error === 'string') {
                    return _this.errorMonitor.captureMessage(error);
                }
                return _this.errorMonitor.captureException(error);
            };
        }
        // We set null and use typecasting for preserving current API in cased when functional is disabled by user.
        // In future we can change it to mocked implementation.
        _this.fedops = null;
        if ((fedopsConfig === null || fedopsConfig === void 0 ? void 0 : fedopsConfig.enabled) !== false) {
            _this.fedops = _this.essentials.fedopsLogger;
            _this.appLoadStarted();
        }
        _this.translations = translations;
        _this.openModal = openModal;
        return _this;
    }
    PlatformControllerFlowAPI.prototype.init = function() {
        var _a;
        return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(_b) {
                switch (_b.label) {
                    case 0:
                        if (!(((_a = this.translations) === null || _a === void 0 ? void 0 : _a.i18n) === null)) return [3 /*break*/ , 2];
                        return [4 /*yield*/ , this.translations.init({
                            useSuspense: this.environment.isEditor || this.environment.isADI,
                        })];
                    case 1:
                        _b.sent();
                        _b.label = 2;
                    case 2:
                        return [2 /*return*/ ];
                }
            });
        });
    };
    PlatformControllerFlowAPI.prototype.updateControllerConfig = function(config) {
        this.controllerConfig.config = config;
    };
    return PlatformControllerFlowAPI;
}(FlowAPI));
export {
    PlatformControllerFlowAPI
};
//# sourceMappingURL=PlatformController.js.map