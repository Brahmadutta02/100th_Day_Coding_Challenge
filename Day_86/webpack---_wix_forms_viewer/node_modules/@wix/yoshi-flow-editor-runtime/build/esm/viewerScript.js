var __awaiter = (this && this.__awaiter) || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new(P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }

        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }

        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function(thisArg, body) {
    var _ = {
            label: 0,
            sent: function() {
                if (t[0] & 1) throw t[1];
                return t[1];
            },
            trys: [],
            ops: []
        },
        f, y, t, g;
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;

    function verb(n) {
        return function(v) {
            return step([n, v]);
        };
    }

    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [0];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [6, e];
            y = 0;
        } finally {
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
};
import {
    OOI_WIDGET_COMPONENT_TYPE,
    BLOCKS_COMPONENT_TYPE,
    PLATFORM_WIDGET_COMPONENT_TYPE,
    PLATFORM_WIDGET_COMPONENT_TYPE_DEPRECATED,
    PAGE_COMPONENT_TYPE,
} from './constants';
import {
    ViewerScriptFlowAPI
} from './flow-api/ViewerScript';
import {
    OOIControllerFlowAPI
} from './flow-api/OOIController';
import {
    PlatformControllerFlowAPI
} from './flow-api/PlatformController';
import {
    controllerWithErrorBoundary,
    isControllerError,
    wrapUserController,
    wrapSimpleUserController,
} from './helpers/wrapUserController';
import {
    createDangerousPublicDataOverride
} from './helpers/createDangerousPublicDataOverride';
import {
    createDangerousStylesOverride
} from './helpers/createDangerousStylesOverride';
var viewerScriptFlowAPI;
var viewerScriptFlowAPIInitPromise;
var appData = {};
var getFirstDescriptor = function(descriptors) {
    if (descriptors.length === 1) {
        return descriptors[0];
    }
};
var platformControllerWrapper = function(optionalDeps, controllerDescriptor, controllerConfig) {
    return __awaiter(void 0, void 0, void 0, function() {
        var flowAPI, controller;
        return __generator(this, function(_a) {
            switch (_a.label) {
                case 0:
                    flowAPI = new OOIControllerFlowAPI({
                        translations: viewerScriptFlowAPI.createTranslations(controllerDescriptor, optionalDeps),
                        componentId: controllerDescriptor.id,
                        componentName: controllerDescriptor.componentName,
                        viewerScriptFlowAPI: viewerScriptFlowAPI,
                        appDefinitionId: controllerDescriptor.appDefinitionId,
                        widgetId: controllerDescriptor.id,
                        translationsConfig: controllerDescriptor.translationsConfig,
                        persistentAcrossPages: controllerDescriptor.persistentAcrossPages,
                        biLogger: controllerDescriptor.biLogger,
                        fedopsConfig: controllerDescriptor.fedopsConfig,
                        sentryConfig: controllerDescriptor.sentryConfig,
                        controllerConfig: controllerConfig,
                        shouldUseEssentials: controllerDescriptor.shouldUseEssentials,
                    });
                    return [4 /*yield*/ , controllerDescriptor.method({
                        controllerConfig: controllerConfig,
                        flowAPI: flowAPI,
                        appData: appData,
                        dangerousPublicDataOverride: createDangerousPublicDataOverride(flowAPI),
                        dangerousStylesOverride: createDangerousStylesOverride(flowAPI),
                    })];
                case 1:
                    controller = _a.sent();
                    return [2 /*return*/ , wrapSimpleUserController({
                        controller: controller,
                        flowAPI: flowAPI,
                    })];
            }
        });
    });
};
var blocksControllerWrapper = function(optionalDeps, controllerDescriptor, controllerConfig) {
    return __awaiter(void 0, void 0, void 0, function() {
        var blocksControllerService, flowAPI, controller;
        return __generator(this, function(_a) {
            switch (_a.label) {
                case 0:
                    blocksControllerService = optionalDeps.blocksControllerService;
                    if (!controllerDescriptor.method) {
                        return [2 /*return*/ ];
                    }
                    flowAPI = new PlatformControllerFlowAPI({
                        translations: viewerScriptFlowAPI.createTranslations(controllerDescriptor, optionalDeps),
                        componentId: controllerDescriptor.id,
                        componentName: controllerDescriptor.componentName,
                        viewerScriptFlowAPI: viewerScriptFlowAPI,
                        appDefinitionId: controllerDescriptor.appDefinitionId,
                        widgetId: controllerDescriptor.id,
                        translationsConfig: controllerDescriptor.translationsConfig,
                        biLogger: controllerDescriptor.biLogger,
                        fedopsConfig: controllerDescriptor.fedopsConfig,
                        sentryConfig: controllerDescriptor.sentryConfig,
                        controllerConfig: controllerConfig,
                    });
                    return [4 /*yield*/ , blocksControllerService.getWrappedController(controllerDescriptor, controllerConfig, flowAPI, optionalDeps)];
                case 1:
                    controller = (_a.sent());
                    return [2 /*return*/ , wrapSimpleUserController({
                        controller: controller,
                        flowAPI: flowAPI,
                    })];
            }
        });
    });
};
var ooiControllerWrapper = function(optionalDeps, controllerDescriptor, controllerConfig) {
    var appParams = controllerConfig.appParams;
    var appDefinitionId = appParams.appDefinitionId;
    var flowAPI = new OOIControllerFlowAPI({
        translations: viewerScriptFlowAPI.createTranslations(controllerDescriptor, optionalDeps),
        viewerScriptFlowAPI: viewerScriptFlowAPI,
        componentId: controllerDescriptor.id,
        componentName: controllerDescriptor.componentName,
        persistentAcrossPages: controllerDescriptor.persistentAcrossPages,
        appDefinitionId: appDefinitionId,
        translationsConfig: controllerDescriptor.translationsConfig,
        widgetId: controllerDescriptor.id,
        biLogger: controllerDescriptor.biLogger,
        controllerConfig: controllerConfig,
        sentryConfig: controllerDescriptor.sentryConfig,
        fedopsConfig: controllerDescriptor.fedopsConfig,
        prepopulatedData: controllerDescriptor.prepopulatedData,
        shouldUseEssentials: controllerDescriptor.shouldUseEssentials,
    });
    var wrappedController = Promise.all([
        controllerWithErrorBoundary(function() {
            return controllerDescriptor.method({
                controllerConfig: flowAPI.controllerConfig,
                flowAPI: flowAPI,
                appData: appData,
                dangerousPublicDataOverride: createDangerousPublicDataOverride(flowAPI),
                dangerousStylesOverride: createDangerousStylesOverride(flowAPI),
            });
        }, flowAPI, controllerDescriptor.appName, controllerDescriptor.componentName),
        viewerScriptFlowAPIInitPromise,
        flowAPI.init(),
    ]).then(function(_a) {
        var userController = _a[0];
        return wrapUserController({
            controller: !isControllerError(userController) ? userController : null,
            translations: flowAPI.translations,
            experiments: flowAPI.experiments,
            biLogger: flowAPI.bi,
            controllerConfig: controllerConfig,
            isUsingAppSettings: controllerDescriptor.isUsingAppSettings,
            flowAPI: flowAPI,
            experimentsConfig: controllerDescriptor.experimentsConfig,
            translationsConfig: controllerDescriptor.translationsConfig,
            appName: controllerDescriptor.appName,
            componentName: controllerDescriptor.componentName,
            withErrorBoundary: controllerDescriptor.withErrorBoundary,
            _controllerErrorId: isControllerError(userController) ?
                userController._errorId :
                undefined,
            _controllerError: isControllerError(userController) ?
                userController._error :
                undefined,
            optionalDeps: optionalDeps,
        });
    });
    return wrappedController;
};
// TODO: Change typings after BOB types would match
var wrapControllerByWidgetType = function(optionalDeps, controllerDescriptor, controllerConfig) {
    switch (controllerDescriptor.widgetType) {
        case BLOCKS_COMPONENT_TYPE:
            return blocksControllerWrapper(optionalDeps, controllerDescriptor, controllerConfig);
        case PLATFORM_WIDGET_COMPONENT_TYPE:
        case PLATFORM_WIDGET_COMPONENT_TYPE_DEPRECATED:
            return platformControllerWrapper(optionalDeps, controllerDescriptor, controllerConfig);
        case OOI_WIDGET_COMPONENT_TYPE:
        case PAGE_COMPONENT_TYPE:
        default:
            return ooiControllerWrapper(optionalDeps, controllerDescriptor, controllerConfig);
    }
};
var getDescriptorForConfig = function(type, descriptors) {
    return descriptors.find(function(descriptor) {
        return descriptor.id === type;
    });
};
export var createControllers = function(optionalDeps, createController, translationsConfig, experimentsConfig, defaultTranslations, fedopsConfig, sentryConfig, biConfig, biLogger, projectName, appDefinitionId, componentId, isUsingAppSettings, localeDistPath, prepopulatedData, shouldUseEssentials, withErrorBoundary, widgetType, persistentAcrossPages) {
    if (translationsConfig === void 0) {
        translationsConfig = null;
    }
    if (experimentsConfig === void 0) {
        experimentsConfig = null;
    }
    if (defaultTranslations === void 0) {
        defaultTranslations = null;
    }
    if (fedopsConfig === void 0) {
        fedopsConfig = null;
    }
    if (sentryConfig === void 0) {
        sentryConfig = null;
    }
    if (widgetType === void 0) {
        widgetType = OOI_WIDGET_COMPONENT_TYPE;
    }
    return createControllersWithDescriptors(optionalDeps, [{
        method: createController,
        exports: null,
        projectName: projectName,
        id: componentId,
        biConfig: biConfig,
        translationsConfig: translationsConfig,
        defaultTranslations: defaultTranslations,
        fedopsConfig: fedopsConfig,
        sentryConfig: sentryConfig,
        biLogger: biLogger,
        widgetType: widgetType,
        experimentsConfig: experimentsConfig,
        controllerFileName: null,
        componentName: null,
        isUsingAppSettings: isUsingAppSettings,
        appName: null,
        appDefinitionId: appDefinitionId,
        localeDistPath: localeDistPath,
        prepopulatedData: prepopulatedData,
        shouldUseEssentials: shouldUseEssentials,
        withErrorBoundary: withErrorBoundary,
        persistentAcrossPages: persistentAcrossPages,
    }, ], true);
};
var moduleIsController = function(controllerModule) {
    return typeof controllerModule === 'function';
};
var getControllerFromControllerModule = function(controllerModule) {
    // controller was exported as `module.exports = controller`
    if (moduleIsController(controllerModule)) {
        return controllerModule;
    }
    // controller was exported as `export default controller` or `export const controller`
    var controllerKey = Object.keys(controllerModule).find(function(key) {
        return key.toLowerCase().includes('controller');
    }) || 'default';
    var controller = controllerModule[controllerKey];
    if (typeof controller !== 'function') {
        throw new Error("Seems like a bundle you have registered as Controller URL in Dev Center doesn't contain exported controller.\nPlease, verify you are using relevant controller bundle generated by editor flow.");
    }
    return controller;
};
var isBlocksController = function(controllerConfig) {
    var _a, _b, _c;
    return (((_a = controllerConfig.appParams) === null || _a === void 0 ? void 0 : _a.blocksData) || ((_c = (_b = controllerConfig.appParams) === null || _b === void 0 ? void 0 : _b.appData) === null || _c === void 0 ? void 0 : _c.blocksPreviewData));
};
// imported from code generation wrappers/templates/CommonViewerScriptEntry.ts
export var createControllersWithDescriptors = function(optionalDeps, controllerDescriptors, includeControllersInViewerScript) {
    if (includeControllersInViewerScript === void 0) {
        includeControllersInViewerScript = false;
    }
    return function(controllerConfigs, controllerModulesMap) {
        var controllersWithDescriptors = [];
        controllerConfigs.forEach(function(controllerConfig) {
            var widgetId = controllerConfig.type;
            // TODO: Temp solution for remote blocks widgets
            var controllerDescriptor = getDescriptorForConfig(widgetId, controllerDescriptors);
            if (!controllerDescriptor && isBlocksController(controllerConfig)) {
                controllerDescriptor = {
                    widgetType: BLOCKS_COMPONENT_TYPE,
                    method: null,
                    exports: {},
                };
            }
            // TODO: Remove this for Yoshi@6.
            if (!controllerDescriptor) {
                controllerDescriptor = getFirstDescriptor(controllerDescriptors);
                console.error("Seems like you have components outside of editor flow project. Please, move the component \"" + widgetId + "\" to \"" + (controllerDescriptor === null || controllerDescriptor === void 0 ? void 0 : controllerDescriptor.projectName) + "\" project. Making a fallback to the first controller...");
            }
            // Skip iframe controller or controller which is not part of Editor Flow project.
            if (!controllerDescriptor) {
                if (process.env.NODE_ENV === 'development') {
                    console.info("Yoshi Editor Flow doesn't support initializing controllers from non-editor flow artifacts. Please, consider moving \"" + widgetId + "\" controller to yoshi-flow-editor project. For now this controller will be skipped.");
                }
                return;
            }
            if (controllerDescriptor.widgetType !== BLOCKS_COMPONENT_TYPE) {
                var shouldUseExternalController = !includeControllersInViewerScript;
                if (shouldUseExternalController) {
                    var controllerModule = controllerModulesMap === null || controllerModulesMap === void 0 ? void 0 : controllerModulesMap[widgetId];
                    if (!controllerModule) {
                        return;
                    }
                    controllerDescriptor.method = getControllerFromControllerModule(controllerModule);
                    controllerDescriptor.exports = controllerModule;
                }
            }
            controllersWithDescriptors.push({
                controllerDescriptor: controllerDescriptor,
                controllerConfig: controllerConfig,
            });
        });
        var wrappedControllers = controllersWithDescriptors.map(function(_a) {
            var controllerDescriptor = _a.controllerDescriptor,
                controllerConfig = _a.controllerConfig;
            return wrapControllerByWidgetType(optionalDeps, controllerDescriptor, controllerConfig);
        });
        return wrappedControllers;
    };
};
export var initAppForPageWrapper = function(_a) {
    var initAppForPage = _a.initAppForPage,
        _b = _a.sentryConfig,
        sentryConfig = _b === void 0 ? null : _b,
        _c = _a.experimentsConfig,
        experimentsConfig = _c === void 0 ? null : _c,
        _d = _a.inEditor,
        inEditor = _d === void 0 ? false : _d,
        projectName = _a.projectName,
        defaultTranslations = _a.defaultTranslations,
        translationsConfig = _a.translationsConfig,
        biConfig = _a.biConfig,
        biLogger = _a.biLogger,
        _e = _a.appName,
        appName = _e === void 0 ? null : _e,
        optionalDeps = _a.optionalDeps,
        localeDistPath = _a.localeDistPath,
        prepopulatedData = _a.prepopulatedData,
        shouldUseEssentials = _a.shouldUseEssentials;
    return function(initParams, platformAPIs, namespaces, platformServices) {
        return __awaiter(void 0, void 0, void 0, function() {
            var e_1;
            return __generator(this, function(_a) {
                switch (_a.label) {
                    case 0:
                        viewerScriptFlowAPI = new ViewerScriptFlowAPI({
                            experimentsConfig: experimentsConfig,
                            projectName: projectName,
                            sentryConfig: sentryConfig,
                            platformServices: platformServices,
                            wixAPI: namespaces,
                            appData: initParams,
                            translationsConfig: translationsConfig,
                            defaultTranslations: defaultTranslations,
                            inEditor: inEditor,
                            biConfig: biConfig,
                            biLogger: biLogger,
                            appName: appName,
                            optionalDeps: optionalDeps,
                            localeDistPath: localeDistPath,
                            prepopulatedData: prepopulatedData,
                            shouldUseEssentials: shouldUseEssentials,
                        });
                        viewerScriptFlowAPIInitPromise = viewerScriptFlowAPI.init();
                        return [4 /*yield*/ , viewerScriptFlowAPIInitPromise];
                    case 1:
                        _a.sent();
                        if (!initAppForPage) return [3 /*break*/ , 5];
                        _a.label = 2;
                    case 2:
                        _a.trys.push([2, 4, , 5]);
                        return [4 /*yield*/ , initAppForPage(initParams, platformAPIs, namespaces, platformServices, viewerScriptFlowAPI)];
                    case 3:
                        appData = _a.sent();
                        return [3 /*break*/ , 5];
                    case 4:
                        e_1 = _a.sent();
                        if (!inEditor) {
                            // Currently platform doesn't log errors happened in worker. We want to fix it here.
                            console.error("\u2757\uFE0FError \uD83D\uDC49 \"" + appName + "\" app \uD83D\uDC49 `viewer.app.ts` module \u2757\n", e_1);
                            viewerScriptFlowAPI.reportError(e_1);
                        }
                        throw e_1;
                    case 5:
                        // appData will be available in controllers
                        return [2 /*return*/ , appData];
                }
            });
        });
    };
};
//# sourceMappingURL=viewerScript.js.map