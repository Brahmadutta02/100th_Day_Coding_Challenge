var __assign = (this && this.__assign) || function() {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s)
                if (Object.prototype.hasOwnProperty.call(s, p))
                    t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
export var mergeStyles = function(initialStyles, newStyles) {
    if (initialStyles === void 0) {
        initialStyles = {};
    }
    if (newStyles === void 0) {
        newStyles = {};
    }
    return __assign(__assign({}, initialStyles), {
        colors: __assign(__assign({}, initialStyles.colors), newStyles.colors),
        booleans: __assign(__assign({}, initialStyles.booleans), newStyles.booleans),
        fonts: __assign(__assign({}, initialStyles.fonts), newStyles.fonts),
        numbers: __assign(__assign({}, initialStyles.numbers), newStyles.numbers)
    });
};
//# sourceMappingURL=mergeStyles.js.map