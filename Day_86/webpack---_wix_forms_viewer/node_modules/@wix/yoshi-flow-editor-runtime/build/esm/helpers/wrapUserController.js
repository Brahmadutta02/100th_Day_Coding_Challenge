var __assign = (this && this.__assign) || function() {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s)
                if (Object.prototype.hasOwnProperty.call(s, p))
                    t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new(P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }

        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }

        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function(thisArg, body) {
    var _ = {
            label: 0,
            sent: function() {
                if (t[0] & 1) throw t[1];
                return t[1];
            },
            trys: [],
            ops: []
        },
        f, y, t, g;
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;

    function verb(n) {
        return function(v) {
            return step([n, v]);
        };
    }

    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [0];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [6, e];
            y = 0;
        } finally {
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
};
import {
    FlowPropsProvider
} from '../controller/FlowProps/FlowPropsProvider';
export var isControllerError = function(result) {
    return !!(result === null || result === void 0 ? void 0 : result._error);
};
export var wrapSimpleUserController = function(_a) {
    var controller = _a.controller,
        flowAPI = _a.flowAPI;
    return __assign(__assign({}, controller), {
        pageReady: function() {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            return __awaiter(void 0, void 0, void 0, function() {
                var userPageReadyResult;
                var _a;
                return __generator(this, function(_b) {
                    switch (_b.label) {
                        case 0:
                            if (!(controller === null || controller === void 0 ? void 0 : controller.pageReady)) return [3 /*break*/ , 2];
                            return [4 /*yield*/ , controller.pageReady.apply(controller, args)];
                        case 1:
                            userPageReadyResult = _b.sent();
                            _b.label = 2;
                        case 2:
                            (_a = flowAPI.fedops) === null || _a === void 0 ? void 0 : _a.appLoaded();
                            return [2 /*return*/ , userPageReadyResult];
                    }
                });
            });
        }
    });
};
export var wrapUserController = function(_a) {
    var controller = _a.controller,
        experimentsConfig = _a.experimentsConfig,
        translationsConfig = _a.translationsConfig,
        flowAPI = _a.flowAPI,
        appName = _a.appName,
        componentName = _a.componentName,
        withErrorBoundary = _a.withErrorBoundary,
        controllerError = _a._controllerError,
        controllerErrorId = _a._controllerErrorId,
        isUsingAppSettings = _a.isUsingAppSettings;
    var flowPropsProvider = new FlowPropsProvider({
        flowAPI: flowAPI,
        experimentsConfig: experimentsConfig,
        translationsConfig: translationsConfig,
    });
    return __assign(__assign({}, controller), {
        updateConfig: function($w, updateConfig) {
            if (!isUsingAppSettings) {
                flowAPI.updateControllerConfig(updateConfig);
                flowPropsProvider.setPublicData(updateConfig.publicData);
                flowPropsProvider.passWidgetProp('publicData');
            }
            if (controller === null || controller === void 0 ? void 0 : controller.updateConfig) {
                controller.updateConfig($w, updateConfig);
            }
        },
        pageReady: function() {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            return __awaiter(void 0, void 0, void 0, function() {
                var userPageReadyResult;
                var _a, _b, _c;
                return __generator(this, function(_d) {
                    switch (_d.label) {
                        case 0:
                            (_b = (_a = flowAPI.sentry) === null || _a === void 0 ? void 0 : _a.setTagsContext) === null || _b === void 0 ? void 0 : _b.call(_a, {
                                isSSR: flowAPI.environment.isSSR,
                                isSEO: flowAPI.environment.isSEO,
                            });
                            // In future we are going to get rid of current `passWidgetInitialProps` call and override original one with wrapper, where we can populate user's call with flow's fields.
                            flowPropsProvider.passWidgetInitialProps();
                            if (controllerError) {
                                flowPropsProvider.passWidgetErrorProp(controllerError, controllerErrorId);
                                throw controllerError;
                            }
                            if (!(controller === null || controller === void 0 ? void 0 : controller.pageReady)) return [3 /*break*/ , 2];
                            return [4 /*yield*/ , pageReadyWithErrorBoundary(function() {
                                return controller.pageReady.apply(controller, args);
                            }, flowAPI, appName, componentName)];
                        case 1:
                            userPageReadyResult = _d.sent();
                            if (isControllerError(userPageReadyResult)) {
                                flowPropsProvider.passWidgetErrorProp(userPageReadyResult._error, userPageReadyResult._errorId);
                                if (!flowAPI.environment.isEditor || !withErrorBoundary) {
                                    throw userPageReadyResult._error;
                                }
                            }
                            _d.label = 2;
                        case 2:
                            if (flowAPI.environment.isSSR) {
                                (_c = flowAPI.fedops) === null || _c === void 0 ? void 0 : _c.appLoaded();
                            }
                            return [2 /*return*/ , userPageReadyResult];
                    }
                });
            });
        }
    });
};
// Currently platform doesn't log errors happened in worker. We want to fix it here.
export var handleControllerError = function(error, flowAPI, appName, componentName, method) {
    var _a, _b, _c;
    if (!flowAPI.environment.isEditor) {
        // Currently platform doesn't log errors happened in worker. We want to fix it here.
        console.error("\u2757\uFE0FError \uD83D\uDC49 \"" + appName + "\" app \uD83D\uDC49 " + componentName + " controller \uD83D\uDC49 " + (method ? method + " method" : '') + " \u2757\n", error);
        if (flowAPI.sentry) {
            (_a = flowAPI.sentry) === null || _a === void 0 ? void 0 : _a.captureException(error);
            return (_c = (_b = flowAPI.sentry) === null || _b === void 0 ? void 0 : _b.lastEventId) === null || _c === void 0 ? void 0 : _c.call(_b);
        }
        if (flowAPI.errorMonitor) {
            return flowAPI.errorMonitor.captureException(error);
        }
    }
};
export var controllerWithErrorBoundary = function(userControllerCallback, flowAPI, appName, componentName) {
    return __awaiter(void 0, void 0, void 0, function() {
        var controllerResult, error_1, errorId;
        return __generator(this, function(_a) {
            switch (_a.label) {
                case 0:
                    _a.trys.push([0, 2, , 3]);
                    return [4 /*yield*/ , userControllerCallback()];
                case 1:
                    controllerResult = _a.sent();
                    return [2 /*return*/ , controllerResult];
                case 2:
                    error_1 = _a.sent();
                    errorId = handleControllerError(error_1, flowAPI, appName, componentName);
                    return [2 /*return*/ , {
                        _error: error_1,
                        _errorId: errorId
                    }];
                case 3:
                    return [2 /*return*/ ];
            }
        });
    });
};
export var pageReadyWithErrorBoundary = function(pageReadyCallback, flowAPI, appName, componentName) {
    return __awaiter(void 0, void 0, void 0, function() {
        var pageReadyResult, error_2, errorId;
        return __generator(this, function(_a) {
            switch (_a.label) {
                case 0:
                    _a.trys.push([0, 2, , 3]);
                    return [4 /*yield*/ , pageReadyCallback()];
                case 1:
                    pageReadyResult = _a.sent();
                    return [2 /*return*/ , pageReadyResult];
                case 2:
                    error_2 = _a.sent();
                    errorId = handleControllerError(error_2, flowAPI, appName, componentName, 'pageReady');
                    return [2 /*return*/ , {
                        _error: error_2,
                        _errorId: errorId
                    }];
                case 3:
                    return [2 /*return*/ ];
            }
        });
    });
};
//# sourceMappingURL=wrapUserController.js.map