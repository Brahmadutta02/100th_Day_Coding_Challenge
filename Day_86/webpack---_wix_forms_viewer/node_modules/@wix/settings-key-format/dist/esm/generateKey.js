var SEPARATOR = '▶︎';
var shapeSorter = function(a, b) {
    return a.localeCompare(b);
};
// In case of defaults: { m: false }
// greet, opts: { m: true } -> greet|m
// greet, opts: { m: false } -> greet
// greet, opts: {} -> greet
export var generateKey = function(key, opts, shape) {
    if (typeof key !== 'string') {
        throw new Error('`generateKey` expects key to be passed and be a string');
    }
    if (!opts) {
        throw new Error('`generateKey` expects options to be passed');
    }
    // In case of no defaults passed, we would use opts.
    var keys = Object.keys(shape).sort(shapeSorter);
    return keys.reduce(function(total, current) {
        // 'hello' - 'hello'
        var isSameAsDefault = shape[current] === opts[current];
        // false - undefined
        var isNegativeAsDefault = !opts[current] && !shape[current];
        if (isSameAsDefault || isNegativeAsDefault) {
            return total;
        }
        var isBooleanValue = typeof opts[current] === 'boolean';
        // In case of the value is boolean and the default value is t, we want to set `m:false` instead of
        // set just m for the positive default values.
        return "" + total + SEPARATOR + (isBooleanValue && !shape[current] ?
            current :
            current + ":" + opts[current]);
    }, key);
};
//# sourceMappingURL=generateKey.js.map