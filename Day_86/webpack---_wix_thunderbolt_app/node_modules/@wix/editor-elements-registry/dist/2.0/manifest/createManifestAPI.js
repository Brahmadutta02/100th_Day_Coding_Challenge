"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.createManifestAPI = void 0;
const editor_elements_conventions_1 = require("@wix/editor-elements-conventions");
const utils_1 = require("../utils");

function getDepsURLs(indexes, shared = []) {
    return indexes.map(index => shared[index]);
}

function createManifestAPI(manifest) {
    const buildComponentId = (componentName, part) => {
        return (0, editor_elements_conventions_1.getBundleId)({
            namespace: manifest.namespace,
            host: manifest.host,
            componentName,
            part,
        });
    };
    const buildHostId = () => {
        return (0, editor_elements_conventions_1.getBundleId)({
            namespace: manifest.namespace,
            host: manifest.host,
        });
    };
    const buildBatchId = (batch) => {
        return (0, editor_elements_conventions_1.getBundleId)({
            namespace: manifest.namespace,
            host: manifest.host,
            batch,
        });
    };
    const withBaseURL = (url) => {
        return `${manifest.baseURL}${url}`;
    };

    function extractModelSources(urls, {
        componentName,
        part,
        batch,
    } = {}) {
        const model = {};
        const prefix = (0, editor_elements_conventions_1.getBundleId)({
            namespace: manifest.namespace,
            host: manifest.host,
            componentName,
            part,
            batch,
        });
        urls.forEach(url => {
            if (Array.isArray(url)) {
                model.deps = getDepsURLs(url, manifest.shared).map(withBaseURL);
            } else {
                if ((0, utils_1.isJS)(url)) {
                    model.js = withBaseURL(`${prefix}.${url}`);
                } else if ((0, utils_1.isCSS)(url)) {
                    model.css = withBaseURL(`${prefix}.${url}`);
                }
            }
        });
        return model;
    }
    return {
        getManifest() {
            return manifest;
        },
        getEnvironment() {
            var _a, _b;
            return {
                hot: ((_a = manifest.environment) === null || _a === void 0 ? void 0 : _a.hot) ?
                    withBaseURL(`hot.${manifest.environment.hot}`) :
                    undefined,
                runtime: ((_b = manifest.environment) === null || _b === void 0 ? void 0 : _b.runtime) ?
                    withBaseURL(`webpack-runtime.${manifest.environment.runtime}`) :
                    undefined,
            };
        },
        getNamespace() {
            return manifest.namespace;
        },
        getBaseUrl() {
            return manifest.baseURL;
        },
        getStatics(componentName) {
            var _a;
            const statics = (_a = manifest.statics) !== null && _a !== void 0 ? _a : {};
            return Object.assign(Object.assign({}, (manifest.libraryStatics || {})), (componentName ? statics[componentName] : {}));
        },
        getLibraryStatics() {
            var _a;
            return (_a = manifest.libraryStatics) !== null && _a !== void 0 ? _a : {};
        },
        getHostBundleModel() {
            return {
                name: manifest.host,
                id: buildHostId(),
                src: extractModelSources(manifest.model || []),
            };
        },
        getLibraryAssets() {
            var _a, _b;
            return ((_b = (_a = manifest.assets) === null || _a === void 0 ? void 0 : _a.map(([type, url]) => {
                return {
                    url: withBaseURL(url),
                    type,
                    extension: (0, utils_1.getExtension)(url),
                };
            })) !== null && _b !== void 0 ? _b : []);
        },
        getParts() {
            var _a, _b;
            const parts = {};
            Object.keys((_a = manifest.parts) !== null && _a !== void 0 ? _a : {}).forEach(componentName => {
                parts[componentName] = {};
                Object.keys(manifest.parts[componentName]).forEach(part => {
                    const urls = manifest.parts[componentName][part];
                    parts[componentName][part] = {
                        id: buildComponentId(componentName, part),
                        src: extractModelSources(urls, {
                            componentName,
                            part,
                        }),
                    };
                });
            });
            Object.entries((_b = manifest.batches) !== null && _b !== void 0 ? _b : {}).forEach(([batchId, batch]) => {
                var _a, _b;
                const isBundlesConcatenated = batch.url_v2 && batch.url_v2.length;
                const url = (Object.keys(batch.url_v2 || []).length ? batch.url_v2 : batch.url);
                const src = extractModelSources(url, {
                    part: isBundlesConcatenated ? batchId : undefined,
                    batch: !isBundlesConcatenated ? batchId : undefined,
                });
                (_a = batch.parts) === null || _a === void 0 ? void 0 : _a.forEach(([part, ...components]) => {
                    components.forEach(name => {
                        if (!parts[name]) {
                            parts[name] = {};
                        }
                        parts[name][part] = {
                            id: buildBatchId(batchId),
                            src,
                            batched: true,
                        };
                    });
                });
                (_b = batch.components) === null || _b === void 0 ? void 0 : _b.forEach(name => {
                    var _a;
                    (_a = batch.parts) === null || _a === void 0 ? void 0 : _a.forEach(([part]) => {
                        if (!parts[name]) {
                            parts[name] = {};
                        }
                        parts[name][part] = {
                            id: buildBatchId(batchId),
                            src,
                            batched: true,
                        };
                    });
                });
            });
            return parts;
        },
        getComponents() {
            var _a, _b, _c;
            const components = {};
            Object.keys((_a = manifest.components) !== null && _a !== void 0 ? _a : {}).forEach(componentName => {
                const urls = manifest.components[componentName];
                components[componentName] = {
                    id: buildComponentId(componentName),
                    name: componentName,
                    src: extractModelSources(urls, {
                        componentName
                    }),
                };
            });
            Object.entries((_b = manifest.batches) !== null && _b !== void 0 ? _b : {}).forEach(([batchId, batch]) => {
                var _a;
                const isBundlesConcatenated = batch.url_v2 && batch.url_v2.length;
                const url = (Object.keys(batch.url_v2 || []).length ? batch.url_v2 : batch.url);
                const src = extractModelSources(url, {
                    part: isBundlesConcatenated ? batchId : undefined,
                    batch: !isBundlesConcatenated ? batchId : undefined,
                });
                (_a = batch.components) === null || _a === void 0 ? void 0 : _a.forEach(componentName => {
                    components[componentName] = {
                        id: buildBatchId(batchId),
                        name: componentName,
                        src,
                    };
                });
            });
            Object.entries((_c = manifest.batches) !== null && _c !== void 0 ? _c : {}).forEach(([, batch]) => {
                var _a;
                (_a = batch.parts) === null || _a === void 0 ? void 0 : _a.forEach(([, ...batchedPartComponents]) => {
                    batchedPartComponents.forEach(componentName => {
                        if (!components[componentName]) {
                            components[componentName] = {
                                id: null,
                                name: componentName,
                                src: {},
                            };
                        }
                    });
                });
            });
            return components;
        },
    };
}
exports.createManifestAPI = createManifestAPI;
//# sourceMappingURL=createManifestAPI.js.map