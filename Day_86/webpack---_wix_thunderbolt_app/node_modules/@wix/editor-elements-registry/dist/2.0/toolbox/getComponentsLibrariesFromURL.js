"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.getComponentsLibrariesFromURL = exports.URL_NAMESPACE_SEPARATOR = exports.SHORT_REGISTRY_LIBRARY_PREFIX = exports.REGISTRY_LIBRARY_PREFIX_DEPRECATED = void 0;
const validateLibraryURL_1 = require("./validateLibraryURL");
exports.REGISTRY_LIBRARY_PREFIX_DEPRECATED = 'components-registry-library-';
exports.SHORT_REGISTRY_LIBRARY_PREFIX = '_rb-';
exports.URL_NAMESPACE_SEPARATOR = '~';
const getComponentsLibrariesFromURL = (url, prefix = exports.SHORT_REGISTRY_LIBRARY_PREFIX) => {
    if (!url || typeof URLSearchParams === 'undefined') {
        return [];
    }
    const search = url.split('?').pop();
    if (!search) {
        return [];
    }
    const libraries = [];
    const params = new URLSearchParams(search);
    params.forEach((value, key) => {
        if (key.startsWith(exports.REGISTRY_LIBRARY_PREFIX_DEPRECATED) ||
            key.startsWith(prefix)) {
            const withDeprecatedPrefix = key.includes(exports.REGISTRY_LIBRARY_PREFIX_DEPRECATED);
            const artifactId = key
                .split(withDeprecatedPrefix ? exports.REGISTRY_LIBRARY_PREFIX_DEPRECATED : prefix)
                .pop();
            const [libraryUrl, namespace] = value.split(exports.URL_NAMESPACE_SEPARATOR);
            if (!(0, validateLibraryURL_1.validateLibraryURL)(libraryUrl)) {
                return;
            }
            if (artifactId) {
                libraries.push({
                    url: libraryUrl,
                    namespace,
                });
            }
        }
    });
    return libraries;
};
exports.getComponentsLibrariesFromURL = getComponentsLibrariesFromURL;
//# sourceMappingURL=getComponentsLibrariesFromURL.js.map