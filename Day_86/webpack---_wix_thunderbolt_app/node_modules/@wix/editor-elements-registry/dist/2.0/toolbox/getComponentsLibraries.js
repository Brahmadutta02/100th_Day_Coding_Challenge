"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.getComponentsLibraries = exports.getComponentsLibrariesFromURL = exports.getWhitelistLibraries = void 0;
const getComponentsLibrariesFromURL_1 = require("./getComponentsLibrariesFromURL");
Object.defineProperty(exports, "getComponentsLibrariesFromURL", {
    enumerable: true,
    get: function() {
        return getComponentsLibrariesFromURL_1.getComponentsLibrariesFromURL;
    }
});
/**
 * This is a temp source of truth until a better alternative is supplied via DevCenter or something similar
 */
const oldStaticsWhitelist = [{
        artifactId: 'editor-elements',
        namespace: 'wixui',
    },
    {
        artifactId: 'editor-elements',
        namespace: 'dsgnsys',
    },
];
const newStaticsWhitelist = [{
        artifactId: 'editor-elements-library',
        namespace: 'wixui',
    },
    {
        artifactId: 'editor-elements-design-systems',
        namespace: 'dsgnsys',
    },
];
const getWhitelistLibraries = (props) => {
    const {
        useNewStatics = false, experimentalMobileLibrary = false, experimentalMobileLibraryReactNative = false,
    } = props;
    const whitelist = useNewStatics ? newStaticsWhitelist : oldStaticsWhitelist;
    if (experimentalMobileLibrary) {
        const artifactId = experimentalMobileLibraryReactNative ?
            'mobile-app-elements-library-rn' :
            'mobile-app-elements-library';
        return [
            ...whitelist,
            {
                artifactId,
                namespace: 'mobui',
            },
        ];
    }
    return whitelist;
};
exports.getWhitelistLibraries = getWhitelistLibraries;
/**
 * Will return list of components libraries with actual urls to each one of them.
 * In case when "serviceTopology" is not provided a whitelist of libraries
 * without urls will be returned
 */
const getComponentsLibraries = (props = {}) => {
    const {
        url,
        prefix,
        serviceTopology,
        useNewStatics = false,
        experimentalMobileLibrary = false,
        experimentalMobileLibraryReactNative = false,
    } = props;
    const urlLibraries = [];
    if (url) {
        urlLibraries.push(...(0, getComponentsLibrariesFromURL_1.getComponentsLibrariesFromURL)(url, prefix));
    }
    if (!serviceTopology) {
        return [...urlLibraries];
    }
    const whitelist = (0, exports.getWhitelistLibraries)({
        experimentalMobileLibraryReactNative,
        experimentalMobileLibrary,
        useNewStatics,
    });
    const topologyLibraries = whitelist.reduce((acc, lib) => {
        const {
            artifactId
        } = lib;
        const libraryEntryInTopology = serviceTopology[artifactId] ||
            serviceTopology.scriptsLocationMap[artifactId];
        if (typeof libraryEntryInTopology === 'string') {
            return [
                ...acc,
                Object.assign(Object.assign({}, lib), {
                    url: libraryEntryInTopology
                }),
            ];
        }
        return acc;
    }, []);
    return [...topologyLibraries, ...urlLibraries];
};
exports.getComponentsLibraries = getComponentsLibraries;
//# sourceMappingURL=getComponentsLibraries.js.map