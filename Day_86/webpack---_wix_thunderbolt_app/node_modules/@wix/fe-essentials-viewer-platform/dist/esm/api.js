import Experiments, {
    ReadOnlyExperiments,
} from './exports/experiments';
import {
    factory as biLoggerFactory
} from './exports/bi';
import {
    create as createFedopsLogger
} from './exports/fedops';
import Raven from './exports/raven-js';
import {
    createRavenClient,
} from './exports/error-monitor';
import {
    createHttpClient
} from './exports/http-client';
import {
    createCurrencyFormatterWithDefaults,
    formatAddress,
} from './exports/l10n';
export * from './types';
/**
 * Essentials for the Viewer platform
 */
export class ViewerPlatformEssentials {
    constructor(env) {
        this.env = env;
        /**
         * A Fedops Logger factory
         */
        this.createFedopsLogger = createFedopsLogger;
        /**
         * A bi Logger and Factory for more loggers
         */
        this.biLoggerFactory = biLoggerFactory;
        /**
         * A currency formatter factory
         */
        this.createCurrencyFormatterWithDefaults = createCurrencyFormatterWithDefaults;
        /**
         * Address formatter
         */
        this.formatAddress = formatAddress;
        this.env = env;
        this.experiments = new ReadOnlyExperiments({
            experiments: env.conductedExperiments,
        });
    }
    /**
     * Method for creating Essentials for an App
     * @param env
     */
    createAppEssentials(env) {
        return new _AppEssentials({
            env: Object.assign(Object.assign({}, env), {
                platformEnv: this.env
            }),
            essentials: this,
        });
    }
    /**
     * Method for creating Essentials for a Controller
     * @param env
     */
    createControllerEssentials(env, appEssentials) {
        return new _ControllerEssentials({
            // @ts-expect-error accessing TS-private field ðŸ˜¢
            env: Object.assign(Object.assign({}, env), {
                appEnv: appEssentials.env
            }),
            essentials: this,
            appEssentials,
        });
    }
}
/**
 * Essentials for Apps within the Viewer platform
 */
export class _AppEssentials {
    constructor({
        env
    }) {
        var _a, _b;
        /**
         * A bi Logger and Factory for more loggers
         */
        this.biLoggerFactory = (options) => this.env.biLoggerFactory(options);
        /**
         * An ErrorMonitor factory (@wix/error-monitor)
         */
        this.createErrorMonitor = (options) => {
            return createRavenClient(Object.assign({
                Raven
            }, options));
        };
        this.env = env;
        this.experiments = new ReadOnlyExperiments({
            experiments: (_b = (_a = this.env.platformEnv.appsConductedExperiments) === null || _a === void 0 ? void 0 : _a[env.appDefId]) !== null && _b !== void 0 ? _b : {},
        });
        const {
            isSSR,
            baseUrl
        } = this.env.platformEnv;
        this.httpClient = createHttpClient({
            isSSR,
            baseURL: isSSR ? baseUrl : undefined,
            getAppToken: () => env.platformEnv.getAppToken(env.appDefId),
        });
        this.createCurrencyFormatterWithDefaults =
            createCurrencyFormatterWithDefaults;
        this.formatAddress = formatAddress;
    }
    /**
     * An Experiments object factory
     */
    createExperiments({
        scopes,
        useNewApi = true,
        baseUrl,
        requestContext,
    }) {
        return new Experiments({
            scopes,
            useNewApi,
            requestContext,
            baseUrl
        });
    }
}
/**
 * Essentials for Controllers within the Viewer platform
 */
export class _ControllerEssentials {
    constructor({
        env,
        appEssentials
    }) {
        /**
         * A bi Logger and Factory for more loggers
         */
        this.biLoggerFactory = (options) => this.appEssentials.biLoggerFactory(options);
        /**
         * An ErrorMonitor factory (@wix/error-monitor)
         */
        this.createErrorMonitor = (options) => {
            return this.appEssentials.createErrorMonitor(options);
        };
        /**
         * An Experiments object factory
         */
        this.createExperiments = (options) => this.appEssentials.createExperiments(options);
        this.env = env;
        this.appEssentials = appEssentials;
        this.fedopsLogger = this.env.appEnv.getLoggerForWidget({
            appId: this.env.appEnv.appDefId,
            widgetId: this.env.widgetId,
            paramsOverrides: this.env.compId ? {
                corrId: this.env.compId
            } : {},
        });
        this.experiments = this.appEssentials.experiments;
        this.httpClient = this.appEssentials.httpClient;
    }
}
//# sourceMappingURL=api.js.map