import {
    __awaiter,
    __generator
} from "tslib";
import {
    handshake
} from './handshake';
import {
    wrap,
    releaseProxy
} from 'comlink';
import {
    serializeAllMethodsIn
} from './callbacksSerialization';
var bridge;
export var getBridge = function() {
    if (!bridge) {
        throw new Error('SDK was not initialized');
    }
    return bridge;
};
var dispose = function() {
    return __awaiter(void 0, void 0, void 0, function() {
        var bridgeToRelease;
        return __generator(this, function(_a) {
            switch (_a.label) {
                case 0:
                    if (!bridge) return [3 /*break*/ , 2];
                    bridgeToRelease = bridge;
                    bridge = undefined;
                    return [4 /*yield*/ , bridgeToRelease[releaseProxy]()];
                case 1:
                    _a.sent();
                    _a.label = 2;
                case 2:
                    return [2 /*return*/ ];
            }
        });
    });
};
export var init = function(_a) {
    var postMessage = _a.postMessage,
        origin = _a.origin;
    dispose();
    var widgetPort = handshake({
        postMessage: postMessage,
        origin: origin
    });
    bridge = serializeAllMethodsIn(wrap(widgetPort));
    return dispose;
};
//# sourceMappingURL=consumer.js.map