var __assign = (this && this.__assign) || function() {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s)
                if (Object.prototype.hasOwnProperty.call(s, p))
                    t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function(s, e) {
    var t = {};
    for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
            t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
export var getSelectedVariant = function(newSchema, existingSchema) {
    var _a, _b;
    if (newSchema === void 0) {
        newSchema = {};
    }
    if (existingSchema === void 0) {
        existingSchema = {};
    }
    var selectedVariantType = (newSchema.meta || {}).selectedVariant;
    var variant = (_b = (_a = existingSchema.meta) === null || _a === void 0 ? void 0 : _a.variants) === null || _b === void 0 ? void 0 : _b.find(function(_a) {
        var schemaType = _a.schemaType;
        return schemaType === selectedVariantType;
    });
    var _c = variant || {},
        isVariantDisabled = _c.disabled,
        variantContent = __rest(_c, ["disabled"]);
    return (variant && __assign(__assign({}, existingSchema), {
        meta: __assign(__assign({}, existingSchema.meta), {
            selectedVariant: selectedVariantType
        }),
        children: variantContent.schema,
        disabled: newSchema.disabled || isVariantDisabled
    }));
};