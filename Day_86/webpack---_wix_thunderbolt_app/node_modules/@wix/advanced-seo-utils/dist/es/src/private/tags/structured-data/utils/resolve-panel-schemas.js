var __assign = (this && this.__assign) || function() {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s)
                if (Object.prototype.hasOwnProperty.call(s, p))
                    t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function(s, e) {
    var t = {};
    for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
            t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import {
    isEmpty
} from '../../../utils/is-empty';
import {
    getSelectedVariant
} from './get-selected-variant';
import {
    mergeSchemas
} from './merge-schemas';
export var resolvePanelSchemas = function(schemas, newSchema) {
    var _a, _b, _c;
    var _d;
    if (schemas === void 0) {
        schemas = {};
    }
    if (!newSchema || isEmpty(newSchema) || !((_d = newSchema === null || newSchema === void 0 ? void 0 : newSchema.meta) === null || _d === void 0 ? void 0 : _d.schemaType)) {
        return schemas;
    }
    var schemaType = newSchema.meta.schemaType;
    var _e = schemas,
        _f = schemaType,
        existingSchema = _e[_f],
        otherSchemas = __rest(_e, [typeof _f === "symbol" ? _f : _f + ""]);
    if (!existingSchema) {
        return __assign(__assign({}, otherSchemas), (_a = {}, _a[schemaType] = newSchema, _a));
    }
    var variant = getSelectedVariant(newSchema, existingSchema);
    if (variant) {
        return __assign(__assign({}, otherSchemas), (_b = {}, _b[schemaType] = variant, _b));
    } else {
        return __assign(__assign({}, otherSchemas), (_c = {}, _c[schemaType] = mergeSchemas(newSchema, existingSchema), _c));
    }
};