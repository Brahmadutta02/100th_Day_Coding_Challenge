import {
    Severity
} from '@sentry/types';
import {
    sanitizeTags
} from './utils/addTags';
import {
    extractDetailsFromHttpErrors
} from './utils/extractDetailsFromHttpErrors';
import {
    isWixHttpError
} from './utils/isWixHttpError';
import {
    isAxiosError
} from './utils/isAxiosError';
/**
 * Wrapper around Sentry instance or Sentry hub
 */
export class InternalErrorMonitor {
    constructor(Sentry, appName = '') {
        this.sentry = Sentry;
        this.appName = appName;
    }
    captureException(exception, options) {
        if (isWixHttpError(exception) || isAxiosError(exception)) {
            options = Object.assign(Object.assign({}, options), {
                contexts: Object.assign(Object.assign({}, options === null || options === void 0 ? void 0 : options.contexts), {
                    httpErrorDetails: extractDetailsFromHttpErrors(exception)
                })
            });
        }
        if (options) {
            if (options.tags) {
                options.tags = sanitizeTags(options.tags, this.appName);
            }
            const sentry = this.sentry;
            if (this.isHub(sentry)) {
                return sentry.captureException(exception, {
                    captureContext: options
                });
            } else {
                return sentry.captureException(exception, options);
            }
        } else {
            return this.sentry.captureException(exception);
        }
    }
    captureMessage(message, options) {
        if (options) {
            const {
                level = Severity.Error, tags
            } = options;
            if (tags) {
                options.tags = sanitizeTags(tags, this.appName);
            }
            const sentry = this.sentry;
            if (this.isHub(sentry)) {
                return sentry.captureMessage(message, level, {
                    captureContext: options,
                });
            } else {
                return sentry.captureMessage(message, options);
            }
        } else {
            return this.sentry.captureMessage(message);
        }
    }
    /**
     * Added here to comply with already used api (e.g. in business-manager).
     *
     * @deprecated this API is unstable and could be removed in the future, please do not use this if you don't have a reasons for that.
     */
    captureEvent(event) {
        return this.sentry.captureEvent(event);
    }
    addBreadcrumb(breadcrumb) {
        this.sentry.addBreadcrumb(breadcrumb);
    }
    isHub(sentry) {
        return sentry.captureMessage.length === 3;
    }
}
//# sourceMappingURL=InternalErrorMonitor.js.map