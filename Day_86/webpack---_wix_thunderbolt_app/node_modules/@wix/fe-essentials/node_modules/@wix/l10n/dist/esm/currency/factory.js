import {
    __rest
} from "tslib";
const _currencyFormatterFactory = (_a) => {
    var {
        language,
        country
    } = _a, options = __rest(_a, ["language", "country"]);
    if (typeof(Intl === null || Intl === void 0 ? void 0 : Intl.NumberFormat) === 'undefined') {
        throw new Error('Intl.NumberFormat is not available.');
    }
    const locale = country ? `${language}-${country}` : language;
    return Intl.NumberFormat(locale, Object.assign({
        style: 'currency'
    }, options));
};
const cache = new Map();
const resolver = (options) => Object.keys(options)
    .filter((key) => Boolean(options[key]))
    .sort()
    .map((key) => `${key}=${options[key]}`)
    .join('&');
export const currencyFormatterFactory = (params) => {
    const key = resolver(params);
    if (cache.has(key)) {
        return cache.get(key);
    }
    const result = _currencyFormatterFactory(params);
    cache.set(key, result);
    return result;
};
currencyFormatterFactory.cache = cache;
//# sourceMappingURL=factory.js.map