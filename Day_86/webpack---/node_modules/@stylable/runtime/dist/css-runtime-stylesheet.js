"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.createRenderable = exports.create = void 0;
const stateMiddleDelimiter = '-';
const booleanStateDelimiter = '--';
const stateWithParamDelimiter = '---';

function create(namespace, exports, css, depth, id, renderer) {
    const stylesheet = {
        namespace,
        classes: exports.classes,
        keyframes: exports.keyframes,
        layers: exports.layers,
        vars: exports.vars,
        stVars: exports.stVars,
        cssStates,
        style,
        st: style,
        $id: id,
        $depth: depth,
        $css: css,
    };
    if (renderer) {
        renderer.register(stylesheet);
    }

    function cssStates(stateMapping) {
        const classNames = [];
        for (const stateName in stateMapping) {
            const stateValue = stateMapping[stateName];
            const stateClass = createStateClass(stateName, stateValue);
            if (stateClass) {
                classNames.push(stateClass);
            }
        }
        return classNames.join(' ');
    }

    function createBooleanStateClassName(stateName) {
        return `${namespace}${booleanStateDelimiter}${stateName}`;
    }

    function createStateWithParamClassName(stateName, param) {
        return `${namespace}${stateWithParamDelimiter}${stateName}${stateMiddleDelimiter}${param.length}${stateMiddleDelimiter}${param.replace(/\s/gm, '_')}`;
    }

    function createStateClass(stateName, stateValue) {
        if (stateValue === false ||
            stateValue === undefined ||
            stateValue === null ||
            stateValue !== stateValue // check NaN
        ) {
            return '';
        }
        if (stateValue === true) {
            // boolean state
            return createBooleanStateClassName(stateName);
        }
        const valueAsString = stateValue.toString();
        return createStateWithParamClassName(stateName, valueAsString);
    }

    function style() {
        const classNames = [];
        for (let i = 0; i < arguments.length; i++) {
            // eslint-disable-next-line prefer-rest-params
            const item = arguments[i];
            if (item) {
                if (typeof item === 'string') {
                    classNames[classNames.length] = item;
                } else if (i === 1) {
                    for (const stateName in item) {
                        const stateValue = item[stateName];
                        const stateClass = createStateClass(stateName, stateValue);
                        if (stateClass) {
                            classNames[classNames.length] = stateClass;
                        }
                    }
                }
            }
        }
        return classNames.join(' ');
    }
    return stylesheet;
}
exports.create = create;

function createRenderable(css, depth, id) {
    return {
        $css: css,
        $depth: depth,
        $id: id,
        $theme: true
    };
}
exports.createRenderable = createRenderable;
//# sourceMappingURL=css-runtime-stylesheet.js.map