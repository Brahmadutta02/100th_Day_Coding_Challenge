import * as React from 'react';
import styles from './Image.scss';
import * as imageKit from '@wix/image-kit';
const {
    STATIC_MEDIA_URL
} = imageKit;
const fetchLQIP = ({
    fittingType,
    src,
    target,
    options,
}) => {
    const placeholder = imageKit.getPlaceholder(fittingType, src, target, Object.assign(Object.assign({}, options), {
        autoEncode: true
    }));
    if ((placeholder === null || placeholder === void 0 ? void 0 : placeholder.uri) && !/^[a-z]+:/.test(placeholder.uri)) {
        placeholder.uri = `${STATIC_MEDIA_URL}${placeholder.uri}`;
    }
    return placeholder;
};
const SCHEME_RE = /^[a-z]+:/;
const Image = (props) => {
    var _a, _b;
    const {
        id,
        containerId,
        uri,
        alt,
        name = '',
        role,
        width,
        height,
        displayMode,
        devicePixelRatio,
        quality,
        alignType,
        bgEffectName = '',
        focalPoint,
        upscaleMethod,
        className = '',
        crop,
        imageStyles = {},
        targetWidth,
        targetHeight,
        targetScale,
        onLoad = () => {},
        onError = () => {},
        shouldUseLQIP,
        containerWidth,
        containerHeight,
        getPlaceholder,
        isInFirstFold,
        placeholderTransition,
        socialAttrs,
        isSEOBot,
        skipMeasure,
        lazyLoadImgExperimentOpen,
    } = props;
    const imageRef = React.useRef(null);
    // fix containerId and id to support hoverBox component
    let hasSsrSrc = '';
    const hasBlurTransition = placeholderTransition === 'blur';
    const ssrImageData = React.useRef(null);
    if (!ssrImageData.current) {
        if (getPlaceholder || shouldUseLQIP || isInFirstFold || isSEOBot) {
            const options = Object.assign(Object.assign({
                upscaleMethod
            }, (quality ? quality : {})), {
                shouldLoadHQImage: isInFirstFold,
                isSEOBot
            });
            ssrImageData.current = (getPlaceholder || fetchLQIP)({
                fittingType: displayMode,
                src: {
                    id: uri,
                    width,
                    height,
                    crop,
                    name,
                    focalPoint,
                },
                target: {
                    width: containerWidth,
                    height: containerHeight,
                    alignment: alignType,
                    htmlTag: 'img',
                },
                options,
            });
            hasSsrSrc = !ssrImageData.current.transformed || isInFirstFold || isSEOBot ?
                '' :
                'true';
        } else {
            // to keep an empty placeholder data
            ssrImageData.current = {
                uri: undefined,
                css: {
                    img: {}
                },
                attr: {
                    img: {},
                    container: {}
                },
                transformed: false,
            };
        }
    }
    const isLQIP = !isSEOBot &&
        (getPlaceholder || shouldUseLQIP) &&
        !isInFirstFold &&
        ssrImageData.current.transformed;
    const imageInfo = React.useMemo(() => JSON.stringify(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({
        containerId
    }, (containerId && {
        containerId
    })), (alignType && {
        alignType
    })), (skipMeasure && {
        skipMeasure: true
    })), {
        displayMode
    }), (containerWidth && {
        targetWidth: containerWidth
    })), (containerHeight && {
        targetHeight: containerHeight
    })), (targetWidth && {
        targetWidth
    })), (targetHeight && {
        targetHeight
    })), (targetScale && {
        targetScale
    })), {
        isLQIP,
        isSEOBot,
        lqipTransition: placeholderTransition,
        imageData: Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({
            width,
            height,
            uri,
            name,
            displayMode
        }, (quality && {
            quality
        })), (devicePixelRatio && {
            devicePixelRatio
        })), (focalPoint && {
            focalPoint
        })), (crop && {
            crop
        })), (upscaleMethod && {
            upscaleMethod
        }))
    })), [
        containerId,
        alignType,
        skipMeasure,
        displayMode,
        containerHeight,
        containerWidth,
        targetWidth,
        targetHeight,
        targetScale,
        isLQIP,
        isSEOBot,
        placeholderTransition,
        width,
        height,
        uri,
        name,
        quality,
        devicePixelRatio,
        focalPoint,
        crop,
        upscaleMethod,
    ]);
    const ssrResult = ssrImageData.current;
    const src = ssrResult === null || ssrResult === void 0 ? void 0 : ssrResult.uri;
    const srcset = ssrResult === null || ssrResult === void 0 ? void 0 : ssrResult.srcset;
    const placeholderStyle = (_a = ssrResult.css) === null || _a === void 0 ? void 0 : _a.img;
    const classNames = `${styles.image} ${className}`;
    React.useEffect(() => {
        var _a;
        // When image comes from cache onLoad not trigger on native HTML element
        if (((_a = imageRef.current) === null || _a === void 0 ? void 0 : _a.complete) && onLoad) {
            onLoad({
                target: imageRef.current,
            });
        }
        // eslint-disable-next-line react-hooks/exhaustive-deps
    }, []);
    return (React.createElement("wow-image", {
            id: id,
            class: classNames,
            "data-image-info": imageInfo,
            "data-bg-effect-name": bgEffectName,
            "data-has-ssr-src": hasSsrSrc,
            "data-animate-blur": !isSEOBot && isLQIP && hasBlurTransition ? '' : undefined,
            style: targetWidth ? {
                '--wix-img-max-width': `${targetWidth}px`
            } : {}
        },
        React.createElement("img", Object.assign({
            src: src,
            ref: imageRef,
            alt: alt || '',
            role: role,
            style: Object.assign(Object.assign({}, placeholderStyle), imageStyles),
            onLoad: onLoad,
            onError: onError
        }, socialAttrs, (isInFirstFold ?
            {
                srcSet: (_b = srcset === null || srcset === void 0 ? void 0 : srcset.dpr) === null || _b === void 0 ? void 0 : _b.map((s) => SCHEME_RE.test(s) ? s : `${STATIC_MEDIA_URL}${s}`).join(', '),
                fetchpriority: 'high',
            } :
            lazyLoadImgExperimentOpen ?
            {
                loading: 'lazy'
            } :
            {})))));
};
export {
    Image,
    imageKit
};
//# sourceMappingURL=Image.js.map