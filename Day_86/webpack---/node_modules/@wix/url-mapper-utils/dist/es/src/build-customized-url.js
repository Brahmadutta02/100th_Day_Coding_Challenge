import {
    variablePattern,
    placeholderPattern,
} from './constants';
import {
    getUrlMapping
} from './get-url-mapping';
import {
    buildCustomUrlValidators
} from './param-validators/build-custom-url-validators';
var interpolate = function(itemData) {
    return function(placeholder) {
        var placeholderRegex = new RegExp(placeholderPattern, 'g');
        var itemDataKey = placeholder.replace(placeholderRegex, '');
        return itemData === null || itemData === void 0 ? void 0 : itemData[itemDataKey];
    };
};
/**
 *
 * Builds a URL according to a given identifer and itemData
 * @param {UrlMappings} urlMappings - An object with key as type (default 'main') and array of Url Mapping as value
 * @param {String} key - A unique string that represent the url mapping entity, a page identifier for example 'wix.stores.sub_pages.product' for product page, 'pageId' for dynamic pages, etc...
 * @param {Object} itemData - An object that represent the variables in the url e.g. {'product-name': 'cool-product' } -> /my-store/{{product-name}}
 * @param {BuildCustomizedUrlOptions} [options] -Get url mapping extra options and configurations
 * @return {String} url - The url that was build
 * @example <caption>Usage of the method</caption>
 *
 *
 * const urlMapping = {
 *       key: 'wix.stores.sub_pages.product',
 *       mapping: 'some-prefix/{{product-name}}',
 *       pageIdentifier: 'product-page',
 *       pageIdentifierType: PageIdentifierType.tpaPageId
 * }
 *
 * const itemData = {
 * slug: 'cool-watch'
 * }
 *
 * const urlMappings = {
 *  main: [urlMapping]
 * }
 *
 * buildCustomizedUrl(urlMappings, 'com.wix.id', itemData);
 * // returns '/my-shop/cool-watch'
 *
 *
 **/
export var buildCustomizedUrl = function(urlMappings, key, itemData, options) {
    if (urlMappings === void 0) {
        urlMappings = {
            main: []
        };
    }
    if (options === void 0) {
        options = {};
    }
    var error = buildCustomUrlValidators({
        key: key,
        itemData: itemData
    });
    if (error) {
        throw error;
    }
    var mapping = (getUrlMapping(urlMappings, key) || {}).mapping;
    var baseUrl = (options || {}).baseUrl;
    baseUrl = baseUrl !== null && baseUrl !== void 0 ? baseUrl : '';
    baseUrl = baseUrl.endsWith('/') ? baseUrl === null || baseUrl === void 0 ? void 0 : baseUrl.slice(0, -1) : baseUrl;
    if (!mapping || typeof mapping !== 'string') {
        return;
    }
    var variableRegex = new RegExp(variablePattern, 'g');
    var urlPath = mapping.replace(variableRegex, interpolate(itemData));
    return baseUrl.concat("/".concat(urlPath));
};
//# sourceMappingURL=build-customized-url.js.map