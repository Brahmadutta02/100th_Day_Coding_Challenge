"use strict";
// /*eslint no-extra-parens:0*/
// 'use strict'
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.getLumaMatrix = exports.getAlpha = exports.getTint = exports.getBrightness = exports.getSepia = exports.getContrast = exports.getColor = exports.hex2RgbNorm = exports.hexToRgb = exports.getDoutone = void 0;

function getSepia(amount) {
    return `${0.393 + 0.607 * (1 - amount)} ${0.769 - 0.769 * (1 - amount)} ${0.189 - 0.189 * (1 - amount)} 0 0
     ${0.349 - 0.349 * (1 - amount)} ${0.686 + 0.314 * (1 - amount)} ${0.168 - 0.168 * (1 - amount)} 0 0
     ${0.272 - 0.272 * (1 - amount)} ${0.534 - 0.534 * (1 - amount)} ${0.131 + 0.869 * (1 - amount)} 0 0
     0 0 0 1 0`;
}
exports.getSepia = getSepia;

function getContrast(amount) {
    return `<feFuncR type="linear" slope="${amount}" intercept="${Math.round((-0.5 * amount + 0.5) * 100) / 100}"/>
<feFuncG type="linear" slope="${amount}" intercept="${Math.round((-0.5 * amount + 0.5) * 100) / 100}"/>
<feFuncB type="linear" slope="${amount}" intercept="${Math.round((-0.5 * amount + 0.5) * 100) / 100}"/>`;
}
exports.getContrast = getContrast;

function getBrightness(amount) {
    return `<feFuncR type="linear" slope="${amount}" /><feFuncG type="linear" slope="${amount}" /><feFuncB type="linear" slope="${amount}" />`;
}
exports.getBrightness = getBrightness;

function getTint(color) {
    return `${1 - color.r} 0 0 0 ${color.r} ${1 - color.g} 0 0 0 ${color.g} ${1 - color.b} 0 0 0 ${color.b} 0 0 0 1 0`;
}
exports.getTint = getTint;

function getLumaMatrix(whiteParams, blackParams) {
    return `${whiteParams.r} 0 0 0 ${blackParams.r}
     ${whiteParams.g} 1 0 0 ${blackParams.g}
     ${whiteParams.b} 0 1 0 ${blackParams.b}
     0 0 0 1 0`;
}
exports.getLumaMatrix = getLumaMatrix;

function getColor(color, opacity = 1) {
    return `0 0 0 0 ${color.r}
0 0 0 0 ${color.g}
0 0 0 0 ${color.b}
0 0 0 ${opacity} 0`;
}
exports.getColor = getColor;
/**
 * colors the source to 2 colors , input should be gray scale
 */
function getDoutone(light, dark) {
    const r_diff = light.r - dark.r;
    const g_diff = light.g - dark.g;
    const b_diff = light.b - dark.b;
    return `${r_diff} 0 0 0 ${dark.r} ${g_diff} 0 0 0 ${dark.g} ${b_diff} 0 0 0 ${dark.b} 0 0 0 1 0`;
}
exports.getDoutone = getDoutone;

function getAlpha(amount) {
    return `<feFuncA type="linear" slope="${amount}" />`;
}
exports.getAlpha = getAlpha;

function hexToRgb(hex) {
    const [, r, g, b] = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex); // fIXM<E
    return {
        r: parseInt(r, 16),
        g: parseInt(g, 16),
        b: parseInt(b, 16),
    };
}
exports.hexToRgb = hexToRgb;

function hex2RgbNorm(hex) {
    const {
        r,
        g,
        b
    } = hexToRgb(hex);
    return {
        r: r / 255,
        g: g / 255,
        b: b / 255,
    };
}
exports.hex2RgbNorm = hex2RgbNorm;
//# sourceMappingURL=svgFiltersParts.js.map