"use strict";

function _typeof(obj) {
    "@babel/helpers - typeof";
    return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj) {
        return typeof obj;
    } : function(obj) {
        return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    }, _typeof(obj);
}

function _defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
    }
}

function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    Object.defineProperty(Constructor, "prototype", {
        writable: false
    });
    return Constructor;
}

function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}

function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function");
    }
    subClass.prototype = Object.create(superClass && superClass.prototype, {
        constructor: {
            value: subClass,
            writable: true,
            configurable: true
        }
    });
    Object.defineProperty(subClass, "prototype", {
        writable: false
    });
    if (superClass) _setPrototypeOf(subClass, superClass);
}

function _createSuper(Derived) {
    var hasNativeReflectConstruct = _isNativeReflectConstruct();
    return function _createSuperInternal() {
        var Super = _getPrototypeOf(Derived),
            result;
        if (hasNativeReflectConstruct) {
            var NewTarget = _getPrototypeOf(this).constructor;
            result = Reflect.construct(Super, arguments, NewTarget);
        } else {
            result = Super.apply(this, arguments);
        }
        return _possibleConstructorReturn(this, result);
    };
}

function _possibleConstructorReturn(self, call) {
    if (call && (_typeof(call) === "object" || typeof call === "function")) {
        return call;
    } else if (call !== void 0) {
        throw new TypeError("Derived constructors may only return object or undefined");
    }
    return _assertThisInitialized(self);
}

function _assertThisInitialized(self) {
    if (self === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }
    return self;
}

function _wrapNativeSuper(Class) {
    var _cache = typeof Map === "function" ? new Map() : undefined;
    _wrapNativeSuper = function _wrapNativeSuper(Class) {
        if (Class === null || !_isNativeFunction(Class)) return Class;
        if (typeof Class !== "function") {
            throw new TypeError("Super expression must either be null or a function");
        }
        if (typeof _cache !== "undefined") {
            if (_cache.has(Class)) return _cache.get(Class);
            _cache.set(Class, Wrapper);
        }

        function Wrapper() {
            return _construct(Class, arguments, _getPrototypeOf(this).constructor);
        }
        Wrapper.prototype = Object.create(Class.prototype, {
            constructor: {
                value: Wrapper,
                enumerable: false,
                writable: true,
                configurable: true
            }
        });
        return _setPrototypeOf(Wrapper, Class);
    };
    return _wrapNativeSuper(Class);
}

function _construct(Parent, args, Class) {
    if (_isNativeReflectConstruct()) {
        _construct = Reflect.construct;
    } else {
        _construct = function _construct(Parent, args, Class) {
            var a = [null];
            a.push.apply(a, args);
            var Constructor = Function.bind.apply(Parent, a);
            var instance = new Constructor();
            if (Class) _setPrototypeOf(instance, Class.prototype);
            return instance;
        };
    }
    return _construct.apply(null, arguments);
}

function _isNativeReflectConstruct() {
    if (typeof Reflect === "undefined" || !Reflect.construct) return false;
    if (Reflect.construct.sham) return false;
    if (typeof Proxy === "function") return true;
    try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {}));
        return true;
    } catch (e) {
        return false;
    }
}

function _isNativeFunction(fn) {
    return Function.toString.call(fn).indexOf("[native code]") !== -1;
}

function _setPrototypeOf(o, p) {
    _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
        o.__proto__ = p;
        return o;
    };
    return _setPrototypeOf(o, p);
}

function _getPrototypeOf(o) {
    _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
        return o.__proto__ || Object.getPrototypeOf(o);
    };
    return _getPrototypeOf(o);
}

var ReservedParameterError = /*#__PURE__*/ function(_Error) {
    _inherits(ReservedParameterError, _Error);

    var _super = _createSuper(ReservedParameterError);

    function ReservedParameterError(validationTitle, paramNames) {
        var _this;

        _classCallCheck(this, ReservedParameterError);

        var message = paramNames.length === 1 ? "".concat(paramNames, " is a ").concat(validationTitle, ".") : "[".concat(paramNames, "] are ").concat(validationTitle, "s.");
        _this = _super.call(this, message);
        _this.name = _this.constructor.name;
        return _this;
    }

    return _createClass(ReservedParameterError);
}( /*#__PURE__*/ _wrapNativeSuper(Error));

var MissingMandatoryParamError = /*#__PURE__*/ function(_Error2) {
    _inherits(MissingMandatoryParamError, _Error2);

    var _super2 = _createSuper(MissingMandatoryParamError);

    function MissingMandatoryParamError(params) {
        _classCallCheck(this, MissingMandatoryParamError);

        return _super2.call(this, "Missing params - {".concat(params, "}"));
    }

    return _createClass(MissingMandatoryParamError);
}( /*#__PURE__*/ _wrapNativeSuper(Error));

var UnknownModuleError = /*#__PURE__*/ function(_Error3) {
    _inherits(UnknownModuleError, _Error3);

    var _super3 = _createSuper(UnknownModuleError);

    function UnknownModuleError(module) {
        _classCallCheck(this, UnknownModuleError);

        return _super3.call(this, "The passed module - ".concat(module, " is invalid"));
    }

    return _createClass(UnknownModuleError);
}( /*#__PURE__*/ _wrapNativeSuper(Error));

var InvalidPageError = /*#__PURE__*/ function(_Error4) {
    _inherits(InvalidPageError, _Error4);

    var _super4 = _createSuper(InvalidPageError);

    function InvalidPageError(page) {
        _classCallCheck(this, InvalidPageError);

        return _super4.call(this, "The passed page - ".concat(page, " is invalid"));
    }

    return _createClass(InvalidPageError);
}( /*#__PURE__*/ _wrapNativeSuper(Error));

var InvalidIdError = /*#__PURE__*/ function(_Error5) {
    _inherits(InvalidIdError, _Error5);

    var _super5 = _createSuper(InvalidIdError);

    function InvalidIdError(id) {
        _classCallCheck(this, InvalidIdError);

        return _super5.call(this, "The passed id - ".concat(id, " is invalid"));
    }

    return _createClass(InvalidIdError);
}( /*#__PURE__*/ _wrapNativeSuper(Error));

var InvalidVersionError = /*#__PURE__*/ function(_Error6) {
    _inherits(InvalidVersionError, _Error6);

    var _super6 = _createSuper(InvalidVersionError);

    function InvalidVersionError(version) {
        _classCallCheck(this, InvalidVersionError);

        return _super6.call(this, "The passed version - ".concat(version, " is invalid"));
    }

    return _createClass(InvalidVersionError);
}( /*#__PURE__*/ _wrapNativeSuper(Error));

var InvalidRevisionError = /*#__PURE__*/ function(_Error7) {
    _inherits(InvalidRevisionError, _Error7);

    var _super7 = _createSuper(InvalidRevisionError);

    function InvalidRevisionError(revision) {
        _classCallCheck(this, InvalidRevisionError);

        return _super7.call(this, "The passed revision - ".concat(revision, " is invalid"));
    }

    return _createClass(InvalidRevisionError);
}( /*#__PURE__*/ _wrapNativeSuper(Error));

var InvalidContentTypeError = /*#__PURE__*/ function(_Error8) {
    _inherits(InvalidContentTypeError, _Error8);

    var _super8 = _createSuper(InvalidContentTypeError);

    function InvalidContentTypeError(contentType) {
        _classCallCheck(this, InvalidContentTypeError);

        return _super8.call(this, "The passed contentType - ".concat(contentType, " is invalid"));
    }

    return _createClass(InvalidContentTypeError);
}( /*#__PURE__*/ _wrapNativeSuper(Error));

var InvalidBranchError = /*#__PURE__*/ function(_Error9) {
    _inherits(InvalidBranchError, _Error9);

    var _super9 = _createSuper(InvalidBranchError);

    function InvalidBranchError(branch) {
        _classCallCheck(this, InvalidBranchError);

        return _super9.call(this, "The passed branch - ".concat(branch, " is invalid"));
    }

    return _createClass(InvalidBranchError);
}( /*#__PURE__*/ _wrapNativeSuper(Error));

var InvalidCommonConfigError = /*#__PURE__*/ function(_Error10) {
    _inherits(InvalidCommonConfigError, _Error10);

    var _super10 = _createSuper(InvalidCommonConfigError);

    function InvalidCommonConfigError(commonConfig) {
        _classCallCheck(this, InvalidCommonConfigError);

        return _super10.call(this, "The passed commonConfig - ".concat(commonConfig, " is invalid"));
    }

    return _createClass(InvalidCommonConfigError);
}( /*#__PURE__*/ _wrapNativeSuper(Error));

module.exports = {
    ReservedParameterError: ReservedParameterError,
    MissingMandatoryParamError: MissingMandatoryParamError,
    UnknownModuleError: UnknownModuleError,
    InvalidPageError: InvalidPageError,
    InvalidIdError: InvalidIdError,
    InvalidVersionError: InvalidVersionError,
    InvalidRevisionError: InvalidRevisionError,
    InvalidContentTypeError: InvalidContentTypeError,
    InvalidBranchError: InvalidBranchError,
    InvalidCommonConfigError: InvalidCommonConfigError
};
//# sourceMappingURL=errors.js.map