/******/
(function(modules) { // webpackBootstrap
    /******/ // The module cache
    /******/
    var installedModules = {};
    /******/
    /******/ // The require function
    /******/
    function __webpack_require__(moduleId) {
        /******/
        /******/ // Check if module is in cache
        /******/
        if (installedModules[moduleId]) {
            /******/
            return installedModules[moduleId].exports;
            /******/
        }
        /******/ // Create a new module (and put it into the cache)
        /******/
        var module = installedModules[moduleId] = {
            /******/
            i: moduleId,
            /******/
            l: false,
            /******/
            exports: {}
            /******/
        };
        /******/
        /******/ // Execute the module function
        /******/
        modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
        /******/
        /******/ // Flag the module as loaded
        /******/
        module.l = true;
        /******/
        /******/ // Return the exports of the module
        /******/
        return module.exports;
        /******/
    }
    /******/
    /******/
    /******/ // expose the modules object (__webpack_modules__)
    /******/
    __webpack_require__.m = modules;
    /******/
    /******/ // expose the module cache
    /******/
    __webpack_require__.c = installedModules;
    /******/
    /******/ // define getter function for harmony exports
    /******/
    __webpack_require__.d = function(exports, name, getter) {
        /******/
        if (!__webpack_require__.o(exports, name)) {
            /******/
            Object.defineProperty(exports, name, {
                enumerable: true,
                get: getter
            });
            /******/
        }
        /******/
    };
    /******/
    /******/ // define __esModule on exports
    /******/
    __webpack_require__.r = function(exports) {
        /******/
        if (typeof Symbol !== 'undefined' && Symbol.toStringTag) {
            /******/
            Object.defineProperty(exports, Symbol.toStringTag, {
                value: 'Module'
            });
            /******/
        }
        /******/
        Object.defineProperty(exports, '__esModule', {
            value: true
        });
        /******/
    };
    /******/
    /******/ // create a fake namespace object
    /******/ // mode & 1: value is a module id, require it
    /******/ // mode & 2: merge all properties of value into the ns
    /******/ // mode & 4: return value when already ns object
    /******/ // mode & 8|1: behave like require
    /******/
    __webpack_require__.t = function(value, mode) {
        /******/
        if (mode & 1) value = __webpack_require__(value);
        /******/
        if (mode & 8) return value;
        /******/
        if ((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
        /******/
        var ns = Object.create(null);
        /******/
        __webpack_require__.r(ns);
        /******/
        Object.defineProperty(ns, 'default', {
            enumerable: true,
            value: value
        });
        /******/
        if (mode & 2 && typeof value != 'string')
            for (var key in value) __webpack_require__.d(ns, key, function(key) {
                return value[key];
            }.bind(null, key));
        /******/
        return ns;
        /******/
    };
    /******/
    /******/ // getDefaultExport function for compatibility with non-harmony modules
    /******/
    __webpack_require__.n = function(module) {
        /******/
        var getter = module && module.__esModule ?
            /******/
            function getDefault() {
                return module['default'];
            } :
            /******/
            function getModuleExports() {
                return module;
            };
        /******/
        __webpack_require__.d(getter, 'a', getter);
        /******/
        return getter;
        /******/
    };
    /******/
    /******/ // Object.prototype.hasOwnProperty.call
    /******/
    __webpack_require__.o = function(object, property) {
        return Object.prototype.hasOwnProperty.call(object, property);
    };
    /******/
    /******/ // __webpack_public_path__
    /******/
    __webpack_require__.p = "https://static.parastorage.com/services/cookie-consent-policy-client/1.573.0/";
    /******/
    /******/
    /******/ // Load entry module and return exports
    /******/
    return __webpack_require__(__webpack_require__.s = 0);
    /******/
})
/************************************************************************/
/******/
([
    /* 0 */
    /*!*******************************!*\
      !*** ./client.ts + 8 modules ***!
      \*******************************/
    /*! exports provided: ConsentPolicyManager */
    /*! all exports used */
    /***/
    (function(module, __webpack_exports__, __webpack_require__) {

        "use strict";
        // ESM COMPAT FLAG
        __webpack_require__.r(__webpack_exports__);

        // EXPORTS
        __webpack_require__.d(__webpack_exports__, "ConsentPolicyManager", function() {
            return /* reexport */ consent_policy_manager_ConsentPolicyManager;
        });

        // CONCATENATED MODULE: ./js/consts.ts
        var BASE_DOMAINS = ['wix.com', 'editorx.com'];
        var COOKIE_NAME = 'consent-policy';

        // CONCATENATED MODULE: ./js/utils.ts

        function isSameDomain(candidate, hostname) {
            if (candidate === void 0) {
                candidate = '';
            }
            if (hostname === void 0) {
                hostname = '';
            }
            return (hostname === candidate ||
                hostname.indexOf("." + candidate) ===
                hostname.replace("." + candidate, '').length);
        }

        function isSameDomainBulk(domainsArray, hostName) {
            return domainsArray.some(function(domain) {
                return isSameDomain(domain, hostName);
            });
        }

        function isWix(hostname) {
            return isSameDomainBulk(BASE_DOMAINS, hostname || location.hostname);
        }

        function readCookieData(cookeName) {
            var _a, _b;
            var regex = "[;\\s ]?" + cookeName + "=([\\S]+(?:;?))";
            var cookieData = document.cookie.match(regex);
            return ((_b = (_a = cookieData) === null || _a === void 0 ? void 0 : _a.pop()) === null || _b === void 0 ? void 0 : _b.replace(';', '')) || void 0;
        }

        // CONCATENATED MODULE: ./js/xhr-driver.ts

        var XSRF_COOKIE_NAME = 'XSRF-TOKEN';
        var XSRF_HEADER_NAME = 'x-xsrf-token';

        function xhrPost(uri, successCallback, errorCallback, postBody, authorization) {
            var xhr = new XMLHttpRequest();
            xhr.open('POST', uri, true);
            xhr.onreadystatechange = function() {
                if (xhr.readyState === 4) {
                    var status = xhr.status;
                    if (status < 200 || status >= 300) {
                        runCallback(errorCallback, status);
                    } else {
                        runCallback(successCallback, xhr.responseText);
                    }
                }
            };
            xhr.setRequestHeader('content-type', 'application/json');
            if (authorization) {
                xhr.setRequestHeader('authorization', authorization);
            }
            var xsrfHeader = readCookieData(XSRF_COOKIE_NAME);
            if (xsrfHeader) {
                xhr.setRequestHeader(XSRF_HEADER_NAME, xsrfHeader);
            }
            xhr.send(postBody || null);
        }

        function runCallback(callback, data) {
            try {
                if (typeof callback === 'function') {
                    callback(data);
                }
            } catch (e) {
                console && console.error(e);
            }
        }


        // CONCATENATED MODULE: ./default-policies.ts
        //The default Policy outside the the regulation zone
        var DEFAULT_POLICY = {
            essential: true,
            functional: true,
            analytics: true,
            advertising: true,
            dataToThirdParty: true,
        };
        //The default Wix domain policy in the EU
        var WIX_EU_POLICY = {
            essential: true,
            functional: true,
            analytics: true,
            advertising: false,
            dataToThirdParty: false,
        };

        // CONCATENATED MODULE: ./js/cookie-parser.ts



        var mappingFromCookie = {
            func: 'functional',
            anl: 'analytics',
            adv: 'advertising',
            dt3: 'dataToThirdParty',
            ess: 'essential',
        };

        function getCookieHostParts(hostname) {
            var host = '',
                path = '';
            BASE_DOMAINS.forEach(function(domain) {
                if (isSameDomain(domain, location.hostname)) {
                    host = "." + domain;
                    path = '/';
                }
            });
            if (!host && !path) {
                host = location.hostname; //Free sites
                var pathParts = hostname.split(location.hostname);
                path = pathParts[1] ? "" + pathParts[1] : '/';
                if (path === '/') {
                    var hostParts = host.split('.'); //Not free sites
                    hostParts.shift();
                    host = "." + hostParts.join('.');
                }
            }
            return {
                host: host,
                path: path,
            };
        }

        function removeCookie(baseUrl) {
            var policy = getPolicyFromCookie();
            if (policy && !policy.defaultPolicy) {
                var _a = getCookieHostParts(baseUrl),
                    path = _a.path,
                    host = _a.host;
                document.cookie = COOKIE_NAME + "=; expires=Thu, 01 Jan 1970 00:00:00 GMT; domain=" + host + "; path=" + path + ";";
                return true;
            }
            return false;
        }

        function getPolicyFromCookie() {
            var cookieData = readCookieData(COOKIE_NAME);
            if (!cookieData || typeof cookieData !== 'string') {
                return false;
            }
            var createdDate;
            var policy = {};
            try {
                var cookieJson_1 = JSON.parse(decodeURIComponent(cookieData));
                Object.keys(mappingFromCookie).forEach(function(cookiePolicyKey) {
                    if (typeof cookieJson_1[cookiePolicyKey] === 'number') {
                        var policyKey = mappingFromCookie[cookiePolicyKey];
                        policy[policyKey] = cookieJson_1[cookiePolicyKey] === 1;
                    }
                });
                createdDate = parseTimeStamp(cookieJson_1.ts);
                return {
                    //TODO: REMOVE THIS HACK ONE PRODUCT EXPERIMENT ENDS - this is needed to support policy created by the test in the Tag Manager server
                    defaultPolicy: !!cookieJson_1.temp,
                    policy: policy,
                    createdDate: createdDate,
                };
            } catch (e) {
                return false;
            }
        }

        function parseTimeStamp(ts) {
            var createdDate;
            if (typeof ts === 'number') {
                createdDate = new Date(ts * 1000 * 60);
            }
            return createdDate;
        }

        function getCurrentPolicy(hostname, consentPolicy) {
            var cookiePolicy = getPolicyFromCookie();
            if (cookiePolicy) {
                return cookiePolicy;
            }
            var policy = getDefaultPolicy(hostname, consentPolicy);
            return {
                defaultPolicy: true,
                policy: policy,
            };
        }

        function getDefaultPolicy(hostname, consentPolicy) {
            return consentPolicy ?
                clone(consentPolicy) :
                clone(isWix(hostname) ? WIX_EU_POLICY : DEFAULT_POLICY);
        }

        function getConsentPolicyHeader(hostname, consentPolicy) {
            var _a;
            var policy = getCurrentPolicy(hostname, consentPolicy).policy;
            var somethingIsDenied = false;
            var raw = Object.keys(mappingFromCookie).reduce(function(ret, key) {
                var value = mappingFromCookie[key];
                //@ts-ignore
                var policyValue = policy[value];
                ret[key] = policyValue ? 1 : 0;
                if (!policyValue) {
                    somethingIsDenied = true;
                }
                return ret;
            }, {});
            return somethingIsDenied ?
                (_a = {}, _a[COOKIE_NAME] = encodeURIComponent(JSON.stringify(raw)), _a) : {};
        }

        function clone(obj) {
            return JSON.parse(JSON.stringify(obj));
        }


        // CONCATENATED MODULE: ./js/events.ts
        function publishEvent(eventName, publishingNode, eventData) {
            var customEvent;
            // @ts-ignore
            var isIE = !!document.documentMode;
            if (isIE) {
                customEvent = document.createEvent('CustomEvent');
                customEvent.initCustomEvent(eventName, true, false, eventData);
            } else {
                customEvent = new CustomEvent(eventName, {
                    detail: eventData,
                    bubbles: true,
                });
            }
            if (publishingNode && publishingNode.dispatchEvent) {
                publishingNode.dispatchEvent(customEvent);
            }
        }
        var EVENT_NAMES = {
            CONSENT_POLICY_CHANGED: 'consentPolicyChanged',
            CONSENT_POLICY_MANAGER_READY: 'consentPolicyManagerReady',
        };

        // CONCATENATED MODULE: ./js/api-utils.ts

        var APIPath = '/_api/cookie-consent-policy/v1/consent-policies';

        function getXhrDomainPrefix(baseDomain) {
            if (baseDomain === void 0) {
                baseDomain = '';
            }
            var resDomain;
            if (isWix() || !baseDomain) {
                resDomain = '';
            } else {
                resDomain =
                    baseDomain.indexOf('http') === 0 ? baseDomain : "\\\\" + baseDomain;
            }
            return resDomain;
        }

        function getAPIBase(baseUrl) {
            if (baseUrl === void 0) {
                baseUrl = '';
            }
            return "" + getXhrDomainPrefix(baseUrl) + APIPath;
        }

        // CONCATENATED MODULE: ./js/consent-policy-manager.ts
        var __assign = (undefined && undefined.__assign) || function() {
            __assign = Object.assign || function(t) {
                for (var s, i = 1, n = arguments.length; i < n; i++) {
                    s = arguments[i];
                    for (var p in s)
                        if (Object.prototype.hasOwnProperty.call(s, p))
                            t[p] = s[p];
                }
                return t;
            };
            return __assign.apply(this, arguments);
        };






        var trimTrailingSlash = function(str) {
            return str.endsWith('/') ? str.slice(0, -1) : str;
        };
        var dispatchPolicyChangedEvent = function(policy) {
            publishEvent(EVENT_NAMES.CONSENT_POLICY_CHANGED, document, policy);
        };
        var consent_policy_manager_ConsentPolicyManager = /** @class */ (function() {
            function ConsentPolicyManager() {
                var _this = this;
                this.config = {
                    baseUrl: '',
                };
                //undocumented override of hostname for testing
                this.hostname = window.location.hostname;
                this.initRan = false;
                this.getValidPolicy = function(newPolicy) {
                    var resultPolicy = {};
                    var policy = _this.getCurrentConsentPolicy().policy;
                    if (typeof newPolicy === 'object') {
                        Object.keys(DEFAULT_POLICY).forEach(function(policyKey) {
                            if (typeof newPolicy[policyKey] === 'boolean') {
                                resultPolicy[policyKey] = newPolicy[policyKey];
                            }
                        });
                    }
                    return __assign(__assign({}, policy), resultPolicy);
                };
                this.shouldTriggerConsentPolicyChanged = function(config) {
                    return (config.consentPolicy &&
                        _this.initRan &&
                        _this.getCurrentConsentPolicy().defaultPolicy &&
                        JSON.stringify(config.consentPolicy) !==
                        JSON.stringify(_this.getCurrentConsentPolicy().policy));
                };
                this.init = function(options) {
                    var config = typeof options === 'string' ?
                        {
                            baseUrl: options
                        } :
                        {
                            baseUrl: options.baseUrl,
                            consentPolicy: options.consentPolicy,
                        } || {};
                    if (config.consentPolicy) {
                        config.consentPolicy = _this.getValidPolicy(config.consentPolicy);
                    }
                    if (_this.shouldTriggerConsentPolicyChanged(config)) {
                        dispatchPolicyChangedEvent({
                            defaultPolicy: true,
                            policy: config.consentPolicy,
                        });
                    }
                    _this.initRan = true;
                    _this.config = __assign(__assign({}, _this.config), config);
                    _this.config.baseUrl = trimTrailingSlash(_this.config.baseUrl || '');
                };
                this.setConsentPolicy = function(policy, successCallback, errorCallback) {
                    if (policy === void 0) {
                        var err = 'setConsentPolicy: no policy sent as parameter';
                        errorCallback && errorCallback(err);
                        console.error(err);
                    }
                    var successCB = function(data) {
                        try {
                            var response = JSON.parse(data);
                            var updatedPolicyDetails = {
                                defaultPolicy: false,
                                policy: response.consent.policy,
                            };
                            var ts = response.consent.timestamp;
                            if (ts) {
                                updatedPolicyDetails.createdDate = new Date(ts);
                            }
                            dispatchPolicyChangedEvent(updatedPolicyDetails);
                            successCallback && successCallback(updatedPolicyDetails);
                        } catch (e) {
                            errCB(e);
                        }
                    };
                    var errCB = function(details) {
                        errorCallback &&
                            errorCallback("Failed setting policy. details: " + details);
                    };
                    var policyString = JSON.stringify(__assign({
                        policy: __assign(__assign({}, _this.getValidPolicy(policy)), {
                            essential: true
                        }),
                        location: location.href
                    }, (_this.config.baseUrl ? {
                        baseUrl: _this.config.baseUrl
                    } : {})));
                    var embedsAPI = window.wixEmbedsAPI;
                    var authorization = !isWix() &&
                        embedsAPI &&
                        embedsAPI.getAppToken &&
                        embedsAPI.getAppToken('22bef345-3c5b-4c18-b782-74d4085112ff');
                    xhrPost(getAPIBase(_this.config.baseUrl), successCB, errCB, policyString, authorization);
                };
                this.getCurrentConsentPolicy = function() {
                    return getCurrentPolicy(_this.hostname, _this.config.consentPolicy);
                };
                this._getConsentPolicyHeader = function() {
                    return getConsentPolicyHeader(_this.hostname, _this.config.consentPolicy);
                };
            }
            ConsentPolicyManager.prototype.resetPolicy = function() {
                var _this = this;
                var cookieRemoved = removeCookie(this.config.baseUrl || '');
                if (cookieRemoved) {
                    setTimeout(function() {
                        //Magic number to allow cookie clearing
                        dispatchPolicyChangedEvent(_this.getCurrentConsentPolicy());
                    }, 5);
                }
                return cookieRemoved;
            };
            return ConsentPolicyManager;
        }());


        // CONCATENATED MODULE: ./client.ts



        if (typeof window !== 'undefined') {
            window.consentPolicyManager = new consent_policy_manager_ConsentPolicyManager();
            publishEvent(EVENT_NAMES.CONSENT_POLICY_MANAGER_READY, window, window.consentPolicyManager);
        }


        /***/
    })
    /******/
]);
//# sourceMappingURL=app.bundle.js.map