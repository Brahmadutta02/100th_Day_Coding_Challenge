import {
    getCacheRecords,
    isExpired
} from './record-utils';

function deleteRecord(cleaner, record) {
    if (record === void 0) {
        record = cleaner.records[0];
    }
    localStorage.removeItem(record.originalKey);
    return {
        records: record === cleaner.records[0] ?
            cleaner.records.slice(1) :
            cleaner.records.filter(function(_a) {
                var originalKey = _a.originalKey;
                return originalKey !== record.originalKey;
            }),
        requiredSpace: cleaner.requiredSpace - record.size,
    };
}

function deleteExpired(cleaner) {
    var expiredRecords = cleaner.records.filter(function(record) {
        return isExpired(record);
    });
    expiredRecords.forEach(function(record) {
        return (cleaner = deleteRecord(cleaner, record));
    });
    return cleaner;
}

function lastUsedSort(a, b) {
    return a.lastUsed - b.lastUsed;
}

function canClean(cleaner) {
    return cleaner.records.length > 0 && cleaner.requiredSpace > 0;
}

function deleteOld(cleaner) {
    cleaner.records.sort(lastUsedSort);
    while (canClean(cleaner)) {
        cleaner = deleteRecord(cleaner);
    }
    return cleaner;
}
export function localStorageCleaner(requiredSpace) {
    var cleaner = {
        records: getCacheRecords(),
        requiredSpace: requiredSpace
    };
    cleaner = deleteExpired(cleaner);
    deleteOld(cleaner);
}
//# sourceMappingURL=local-storage-cleaner.js.map