/* global localStorage */
import {
    __assign
} from "tslib";
import {
    KEY_SEPARATOR,
    PREFIX_SEPARATOR,
    STORAGE_PREFIX
} from './constants';

function parseCacheKey(cacheKey) {
    var _a = cacheKey.split(KEY_SEPARATOR),
        prefix = _a[0],
        key = _a[1];
    var _b = prefix.split(PREFIX_SEPARATOR),
        namespace = _b[1],
        scope = _b[2];
    if (scope === undefined) {
        return {
            namespace: namespace,
            key: key
        };
    } else {
        return {
            namespace: namespace,
            scope: scope,
            key: key
        };
    }
}

function deserializeData(data) {
    return JSON.parse(data);
}

function getCacheRecords(prefix) {
    if (prefix === void 0) {
        prefix = STORAGE_PREFIX + PREFIX_SEPARATOR;
    }
    var items = [];
    for (var i = 0; i < localStorage.length; i++) {
        var key = localStorage.key(i);
        if (key.startsWith(prefix)) {
            var data = localStorage.getItem(key);
            items.push(__assign(__assign({
                size: key.length + data.length,
                originalKey: key
            }, deserializeData(data)), parseCacheKey(key)));
        }
    }
    return items;
}

function isExpired(data) {
    if (data.expiration) {
        return data.createdAt + data.expiration * 1000 <= Date.now();
    } else {
        return false;
    }
}
export {
    deserializeData,
    getCacheRecords,
    isExpired
};
//# sourceMappingURL=record-utils.js.map