import greedySplit from 'greedy-split';
import listenerMessageChannel from 'message-channel/listener';
import {
    BaseStorage
} from '../base-storage';
import {
    LocalStorageStrategy
} from '../strategies/local-storage';
var FrameStorageListener = /** @class */ (function() {
    function FrameStorageListener(strategy) {
        if (strategy === void 0) {
            strategy = new LocalStorageStrategy();
        }
        this.storageStrategy = BaseStorage.verify(strategy);
    }
    FrameStorageListener.prototype.start = function(verifier, interceptor) {
        if (!verifier || typeof verifier !== 'function') {
            throw new Error('start function must get a verifier function as a first argument');
        }
        if (interceptor && typeof interceptor !== 'function') {
            throw new Error('the interceptor must be a function');
        }
        var storageStrategy = BaseStorage.verify(this.storageStrategy);
        this.stopListener = listenerMessageChannel('data-capsule', messageHandler);

        function messageHandler(e, reply) {
            if (typeof e.data !== 'string') {
                return;
            }
            var _a = greedySplit(e.data, '|', 3),
                token = _a[0],
                method = _a[1],
                payload = _a[2];
            var respond = function(status, data) {
                if (status === 'resolve') {
                    var response_1 = [status, JSON.stringify({
                        data: data
                    })].join('|');
                    return reply(response_1);
                }
                var response = [status, data].join('|');
                return reply(response);
            };
            if (!verifier(e.source, e.origin, token)) {
                return respond('reject', 'message was not authorized');
            }
            var invoke = storageStrategy[method].bind(storageStrategy);
            var params = JSON.parse(payload).data;
            var options = params[params.length - 1];
            var modifiedOptions = interceptor ?
                interceptor(options, e.source, e.origin, token) :
                options;
            params[params.length - 1] = modifiedOptions;
            return invoke.apply(void 0, params).then(function(result) {
                    return respond('resolve', result);
                })
                .catch(function(error) {
                    return respond('reject', error.message || error);
                });
        }
    };
    FrameStorageListener.prototype.stop = function() {
        this.stopListener && this.stopListener();
    };
    return FrameStorageListener;
}());
export {
    FrameStorageListener
};
//# sourceMappingURL=frame-storage-listener.js.map